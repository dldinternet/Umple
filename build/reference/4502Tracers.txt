Tracers
Tracing
noreferences

@@description
<p>
MOTL sets the Console to be its default tracer. However, it provides a set of potential tracers that will have an impact on how tracing is injected and how its collected. Modellers can control the model tracer using a tracer directive.
</p>

<p>
MOTL tracers can be classified into two main categories: Built in tracers and third party tracers. The main difference between these two categories is that the first category tracers doesnâ€™t require any additional jars imported into your model generated code, while  the later requires jars specific to each tracer.
</p>

<p>
<ol>
<li>(Built in tracers)</li>
  <ul>
  <li>Console: trace output will be directed to system error.</li>
  <li>File: trace output will be directed to trace log file.</li>
  </ul>
&nbsp;<br />
<li>(Third party tracers)</li>
   <ul>
   <li>log4j: a well known java tracer. In MOTL, if log4j is selected as a tracer, log4j trace points will be in injected. In addition, an xml file (log4j2.xml) configuration file. </li>
   <li>LTTNG (Under development)</li>
   </ul>
</ol>
</p>

@@syntax

[[traceType]] [[log4jConfig]]

@@example
@@source manualexamples/Tracers1.ump
@@endexample

@@example
@@source manualexamples/Tracers2.ump
@@endexample

@@example
@@source manualexamples/Tracers3.ump
@@endexample
