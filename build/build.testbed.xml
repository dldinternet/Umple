<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".." default="build" name="UmpleCore" >

  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <!-- ```````````````````````````
    Environment Variables
  ``````````````````````````` -->

  <property name="project.path" value="testbed"/>
  <property name="bin.path" value="${project.path}/bin"/>
  <property name="dist.path" value="dist/${project.path}/java"/>
  <property name="test.output.path" value="dist/qa/testbed_java"/>
  <property name="test.output.path.java" value="dist/qa/testbed_java"/>
  <property name="test.output.path.php" value="dist/qa/testbed_php"/>
  <property name="test.output.path.ruby" value="dist/qa/testbed_ruby"/>
  <property name="myenv" value="cc" />

  <property name="manualumpfiles.path" value="umpleonline/ump/manualexamples"/>
  <property name="manualumpfiles.bin.path" value="${manualumpfiles.path}/bin"/>

  <import file="_${myenv}.xml" />
  <import file="_template.xml" />

  <path id="project.classpath">
    <pathelement location="${bin.path}"/>
    <path refid="junit4.classpath"/>
  </path>

  <path id="manualumpfiles.classpath">
    <pathelement location="${manualumpfiles.bin.path}"/>
    <path refid="junit4.classpath"/>
  </path>


  <!-- ```````````````````````````
    Clean up and initialize any potential byproduct
  ``````````````````````````` -->
  <target name="clean">
	<delete dir="${project.path}/src-gen-umple" failonerror="false"/>	
  </target>


  <target name="init">
    <antcall target="template.init" />
    <mkdir dir="${test.output.path.java}"/>
    <mkdir dir="${test.output.path.php}"/>
    <mkdir dir="${test.output.path.ruby}"/>
  </target>

    
  <!-- ```````````````````````````
    Compile the testbed tests
  ``````````````````````````` -->

  <target name="compile">
    <antcall target="compileJava" />
    <antcall target="compilePhp" />
    <antcall target="compileRuby" />
  </target>
  
  <target name="compileJava">
    <java jar="dist/umple.jar" fork="true" failonerror="true">
      <arg value="testbed/src/TestHarness.ump"/>
    </java>

    <javac debug="true" includeantruntime="false" debuglevel="source,lines,vars" destdir="${bin.path}" source="1.7" target="1.7">
      <src path="${project.path}/src"/>
      <src path="${project.path}/src-gen-umple"/>
      <src path="${project.path}/test"/>
      <exclude name="**/.svn"/>
      <exclude name="**/*.ump" />
      <exclude name="**/data" />
      <classpath refid="project.classpath"/>
    </javac>

  </target>

  <target name="compilePhp">
    <java jar="dist/umple.jar" fork="true" failonerror="true">
      <arg value="testbed_php/src/TestHarnessPhp.ump"/>
    </java>
  </target>
  
  <target name="compileRuby">
    <java jar="dist/umple.jar" fork="true" failonerror="true">
      <arg value="testbed_ruby/src/TestHarnessRuby.ump"/>
    </java>
  </target>
  
  <!-- ```````````````````````````
    Run the testbed tests for all supported languates
  ``````````````````````````` -->

  <target name="test">
    <antcall target="testJava" />
    <antcall target="testPhp" />
    <antcall target="testRuby" />
    <!--
    <antcall target="allUserManualTests" />
    -->
  </target>

  <target name="testJava">
    <echo message="Running JAVA tests via junit"/> 
    <junit fork="yes" forkmode="perBatch" haltonfailure="${haltonfailure}" showoutput="${showJunitOutput}" printsummary="${showJunitSummary}">
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${test.output.path.java}">
        <fileset dir="${project.path}/test">
          <include name="**/*Test*.java"/>
          <exclude name="**/AllTests.java"/>
        </fileset>
      </batchtest>
      <classpath refid="project.classpath"/>
    </junit>

    <junitreport todir="${test.output.path.java}">
      <fileset dir="${test.output.path.java}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.output.path.java}"/>
    </junitreport>
    <echo message="JAVA tests completed!"/> 
  </target>
  
  <target name="testPhp">
    <echo message="Running PHP tests from command line"/> 
    <exec executable="php" dir="testbed_php/test/" output="${test.output.path.php}/index.xml">
      <arg value="AllXmlTests.php"/>
    </exec>
    <exec executable="php" dir="testbed_php/test/" output="${test.output.path.php}/index.html" outputproperty="test.output.php">
      <arg value="AllTests.php"/>
    </exec>
    <!-- check for error --> 
    <fail message="PHP tests failed ('Fail' found)">
      <condition> 
        <contains string="${test.output.php}" substring="Fail" casesensitive="true"/> 
      </condition> 
    </fail>    
    <fail message="PHP tests failed ('PHP Fatal error' found)">
      <condition> 
        <contains string="${test.output.php}" substring="PHP Fatal error" casesensitive="true"/> 
      </condition> 
    </fail>    
    <echo message="PHP tests completed!"/> 
  </target>
  
  <target name="testRuby">
    <echo message="Running RUBY tests via rake task"/> 
    <exec executable="${rake_cmd}" dir="testbed_ruby/" output="${test.output.path.ruby}/index.html" outputproperty="test.output.ruby" />

    <!-- check for error string 'rake aborted', and fail build if itis found --> 
    <fail message="Ruby tests failed ('rake aborted' found)">
      <condition> 
        <contains string="${test.output.ruby}" substring="rake aborted" casesensitive="false"/> 
      </condition> 
    </fail> 

    <echo message="RUBY tests completed!"/> 
  </target>
  
  <!-- ```````````````````````````
    Under development - user manual tests
  ``````````````````````````` -->
  <target name="allUserManualTests">
  
    <echo>Building User Manual Examples</echo>
    
    <delete failonerror="false" >
       <fileset dir="${manualumpfiles.path}/src-gen-umple" />
       <fileset dir="${manualumpfiles.path}/bin"  />
    </delete>
      
    <foreach target="userManualTest" param="manualFile" parallel="false">
      <path>
        <fileset dir="${manualumpfiles.path}" includes="*.ump" />
      </path>
    </foreach>  
  </target>

  <target name="userManualTest">
    <sequential>
      <basename file="${manualFile}" property="manualfileshort" suffix="ump" />
      <property name="fullump" value="${manualumpfiles.path}/${manualfileshort}.ump" />
      <echo>Will test ${fullump} </echo>

      <!-- Compile in umple -->
      <java jar="dist/umple.jar" fork="true" failonerror="true" dir="${manualumpfiles.path}">
        <arg value="-g" />
        <arg value="Java" />
        <arg value="--path" />
        <arg value="src-gen-umple" />
        <arg value="${manualfileshort}.ump" />
      </java>

      <!-- Compile the resulting Java if OK to do so -->
      <if>
        <resourcecontains resource="../${fullump}" substring="@@@skipcompile" />
        <then>
          <echo>Skipping Java compile due to presence of @@@skip</echo>
        </then>
        <else>
          <mkdir dir="${manualumpfiles.path}/bin"  />
          <javac debug="true" includeantruntime="false" debuglevel="source,lines,vars" destdir="${manualumpfiles.bin.path}" source="1.7" target="1.7">
            <src path="${manualumpfiles.path}/src-gen-umple"/>
            <classpath refid="manualumpfiles.classpath"/>
          </javac>
        </else>

      </if>

      <!-- Delete the generated stuff after success -->
      <delete failonerror="false" >
        <fileset dir="${manualumpfiles.path}/src-gen-umple" />
        <fileset dir="${manualumpfiles.path}/bin"  />
      </delete>
      
    </sequential>
  </target>


  <!-- ```````````````````````````
    Build the application
  ``````````````````````````` -->
  
  <!-- 
    Build
    run by the build machine, should work as-is on your machine, but be careful
    as your code will be run against the "latest" Umpled Umple.
   -->
  <target name="build" >
    <echo>Running testbed tests in build.testbed.xml to verify generated code works</echo>
    <antcall target="clean" />
    <antcall target="template.clean" />
    <antcall target="init" />
    <antcall target="compile" />
    <antcall target="test" />
    <antcall target="template.resetVersion" />
  </target>

  <!-- can be run locally as a quick(er) test to see if the build will pass on the server -->
  <target name="pre_build" >
    <antcall target="compile" />
    <antcall target="test" />
  </target>
  
  
</project>

