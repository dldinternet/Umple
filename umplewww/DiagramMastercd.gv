// Code generated by Umple

digraph "DiagramMaster" {
  size="80,10"
  rankdir="BT"
  node [shape=record; href="javascript:Action.selectClass(\"\N\");"];

  // Class: Documenter
  Documenter [shape=record, label="{Documenter|inputPath\ :\ String\l\
outputPath\ :\ String\l\
messages\ :\ String\l}",
   tooltip="class Documenter
"];

  // Class: Content
  Content [shape=record, label="{Content|title\ :\ String\l\
shouldIncludeReferences\ :\ Boolean\l\
description\ :\ String\l\
syntax\ :\ String\l\
examples\ :\ String\l}",
   tooltip="class Content
"];

  // Class: Group
  Group [shape=record, label="{Group|name\ :\ String\l}",
   tooltip="class Group
"];

  // Class: Parser
  Parser [shape=record, label="{Parser|filename\ :\ String\l\
name\ :\ String\l\
grammarRules\ :\ String\l\
parseResult\ :\ ParseResult\l\
_curParsePos\ :\ Position\l\
rootToken\ :\ Token\l}",
   tooltip="class Parser
* Parses an Umple file (.ump) based on grammar rules.
 
 As parsing is going on \"tokens\" will be created and linked together in a hierarchy fashion based on what was parsed.
"];

  // Class: ContentParser
  ContentParser [shape=record, label="{ContentParser|init\ :\ Integer\l}",
   tooltip="class ContentParser
"];
  ContentParser -> Parser [arrowhead="empty"; samehead="gen"];


  // Class: Template
  Template [shape=record, label="{Template|htmlTemplate\ :\ String\l\
exampleTemplate\ :\ String\l\
syntaxTemplate\ :\ String\l\
navigationHeaderTemplate\ :\ String\l\
navigationItemTemplate\ :\ String\l\
navigationItemTemplateNoAnchor\ :\ String\l}",
   tooltip="class Template
"];

  // Class: GeneratorHelper
  GeneratorHelper [shape=record, label="{GeneratorHelper}",
   tooltip="class GeneratorHelper
"];

  // Class: EcoreGenerator
  EcoreGenerator [shape=record, label="{EcoreGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class EcoreGenerator
"];
  EcoreGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: PapyrusGenerator
  PapyrusGenerator [shape=record, label="{PapyrusGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class PapyrusGenerator
"];
  PapyrusGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: XmiGenerator
  XmiGenerator [shape=record, label="{XmiGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class XmiGenerator
"];
  XmiGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: TextUmlGenerator
  TextUmlGenerator [shape=record, label="{TextUmlGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class TextUmlGenerator
"];
  TextUmlGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: GvStateDiagramGenerator
  GvStateDiagramGenerator [shape=record, label="{GvStateDiagramGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class GvStateDiagramGenerator
"];
  GvStateDiagramGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: GvClassDiagramGenerator
  GvClassDiagramGenerator [shape=record, label="{GvClassDiagramGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class GvClassDiagramGenerator
"];
  GvClassDiagramGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: SimulateGenerator
  SimulateGenerator [shape=record, label="{SimulateGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class SimulateGenerator
"];
  SimulateGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: YumlGenerator
  YumlGenerator [shape=record, label="{YumlGenerator|model\ :\ UmpleModel\l\
outputPath\ :\ String\l}",
   tooltip="class YumlGenerator
"];
  YumlGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: JsonGenerator
  JsonGenerator [shape=record, label="{JsonGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class JsonGenerator
"];
  JsonGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: JavaGenerator
  JavaGenerator [shape=record, label="{JavaGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class JavaGenerator
"];
  JavaGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];

  JavaGenerator -> CodeTranslator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: CppGenerator
  CppGenerator [shape=record, label="{CppGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l\
callHeader\ :\ boolean\l\
callLttng\ :\ boolean\l}",
   tooltip="class CppGenerator
"];
  CppGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];

  CppGenerator -> CodeTranslator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: PhpGenerator
  PhpGenerator [shape=record, label="{PhpGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class PhpGenerator
"];
  PhpGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];

  PhpGenerator -> CodeTranslator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: RubyGenerator
  RubyGenerator [shape=record, label="{RubyGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class RubyGenerator
"];
  RubyGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];

  RubyGenerator -> CodeTranslator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: SqlGenerator
  SqlGenerator [shape=record, label="{SqlGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class SqlGenerator
"];
  SqlGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];

  SqlGenerator -> CodeTranslator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: SDLGenerator
  SDLGenerator [shape=record, label="{SDLGenerator|model\ :\ UmpleModel\l\
output\ :\ String\l}",
   tooltip="class SDLGenerator
"];
  SDLGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];

  SDLGenerator -> CodeTranslator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: JsonParser
  JsonParser [shape=record, label="{JsonParser}",
   tooltip="class JsonParser
"];
  JsonParser -> Parser [arrowhead="empty"; samehead="gen"];


  // Class: Json
  Json [shape=record, label="{Json|name\ :\ String\l\
value\ :\ String\l\
composites\ :\ Json\l\
arrays\ :\ Json\l}",
   tooltip="class Json
"];

  // Class: Couple
  Couple [shape=record, label="{Couple|open\ :\ String\l\
close\ :\ String\l}",
   tooltip="class Couple
"];

  // Class: ParseResult
  ParseResult [shape=record, label="{ParseResult|wasSuccess\ :\ Boolean\l\
hasWarnings\ :\ Boolean\l\
_acceptsErrors\ :\ Boolean\l}",
   tooltip="class ParseResult
* Represents the results of parsing, such as if it was successful, whether it had warnings, etc.
"];

  // Class: ErrorMessage
  ErrorMessage [shape=record, label="{ErrorMessage|parameters\ :\ String\l}",
   tooltip="class ErrorMessage
* Represents an error message, typically used with parsing.
"];

  // Class: ErrorType
  ErrorType [shape=record, label="{ErrorType|errorCode\ :\ Integer\l\
severity\ :\ Integer\l\
errorFormat\ :\ String\l\
errorUrl\ :\ String\l}",
   tooltip="class ErrorType
* Represents an error type, which contains an error code, the severity of the error, etc.
"];

  // Class: ErrorTypeSingleton
  ErrorTypeSingleton [shape=record, label="{ErrorTypeSingleton}",
   tooltip="class ErrorTypeSingleton
"];

  // Class: Token
  Token [shape=record, label="{Token|name\ :\ String\l\
value\ :\ String\l}",
   tooltip="class Token
* Fundamental to all parsing, used in conjunction with rules and their definitions.  As parsing is taking place
 these will indicate what is currently being looked for (such as a class definition or attribute) and helps to keep
 track of the positions that the input parser parsed things at.
"];

  // Class: Position
  Position [shape=record, label="{Position|filename\ :\ String\l\
lineNumber\ :\ Integer\l\
characterOffset\ :\ Integer\l\
offset\ :\ Integer\l}",
   tooltip="class Position
* Used to indicate the coordinates of a position when parsing.  This is done by keeping track of the
 filename, the line number and the corresponding offset on that line number.
"];

  // Class: Rule
  Rule [shape=record, label="{Rule|name\ :\ String\l\
shouldHide\ :\ Boolean\l\
definitions\ :\ String\l}",
   tooltip="class Rule
* Represents a rule, which has a name and contains definitions that describe it.
 
 Examples of this are a class definition.
"];

  // Class: RulePartValue
  RulePartValue [shape=record, label="{RulePartValue|name\ :\ String\l\
value\ :\ String\l}",
   tooltip="class RulePartValue
"];

  // Class: RulePart
  RulePart [shape=record, label="{RulePart|name\ :\ String\l\
multiplicity\ :\ String\l\
nextIdentifiers\ :\ String\l\
maximumPartsFound\ :\ Integer\l}",
   tooltip="class RulePart
"];

  // Class: RuleInstance
  RuleInstance [shape=record, label="{RuleInstance|stopAts\ :\ String\l\
updateIndex\ :\ Integer\l\
rulePartsIndex\ :\ Integer\l}",
   tooltip="class RuleInstance
"];

  // Class: StateMachine
  StateMachine [shape=record, label="{StateMachine|name\ :\ String\l}",
   tooltip="class StateMachine
"];

  // Class: State
  State [shape=record, label="{State|name\ :\ String\l\
isConcurrent\ :\ Boolean\l\
isStartState\ :\ Boolean\l\
isInternal\ :\ Boolean\l\
isHistoryState\ :\ Boolean\l\
isDeepHistoryState\ :\ Boolean\l\
finalState\ :\ Boolean\l}",
   tooltip="class State
"];

  // Class: Activity
  Activity [shape=record, label="{Activity|position\ :\ Position\l\
activityCode\ :\ String\l\
codeblock\ :\ CodeBlock\l}",
   tooltip="class Activity
"];

  // Class: Transition
  Transition [shape=record, label="{Transition|isInternal\ :\ Boolean\l\
autoTransition\ :\ Boolean\l}",
   tooltip="class Transition
"];

  // Class: Action
  Action [shape=record, label="{Action|actionType\ :\ String\l\
position\ :\ Position\l\
actionCode\ :\ String\l\
isInternal\ :\ Boolean\l\
codeblock\ :\ CodeBlock\l}",
   tooltip="class Action
"];

  // Class: Event
  Event [shape=record, label="{Event|name\ :\ String\l\
args\ :\ String\l\
isTimer\ :\ Boolean\l\
autoTransition\ :\ Boolean\l\
timerInSeconds\ :\ String\l\
isInternal\ :\ Boolean\l}",
   tooltip="class Event
"];

  // Class: Guard
  Guard [shape=record, label="{Guard|position\ :\ Position\l\
condition\ :\ String\l\
codeblock\ :\ CodeBlock\l}",
   tooltip="class Guard
"];

  // Class: TextParser
  TextParser [shape=record, label="{TextParser|_currentName\ :\ String\l\
_lastCharacterIndex\ :\ Integer\l\
_currentCharacterIndex\ :\ Integer\l\
_maxCharacterIndex\ :\ Integer\l\
indexToReplacementOffsetMap\ :\ Hashtable&lt;Integer,Integer&gt;\l\
_text\ :\ String\l\
_filename\ :\ String\l}",
   tooltip="class TextParser
* Parses textual input and used in conjunction with the umple parser and internal parser to tokenize the contents of a file such
 as an Umple file.
"];

  // Class: UmletGenerator
  UmletGenerator [shape=record, label="{UmletGenerator|filename\ :\ String\l\
model\ :\ UmpleModel\l}",
   tooltip="class UmletGenerator
"];
  UmletGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: UmletDiagram
  UmletDiagram [shape=record, label="{UmletDiagram}",
   tooltip="class UmletDiagram
"];

  // Class: UmletElement
  UmletElement [shape=record, label="{UmletElement|type\ :\ String\l\
panelAttributes\ :\ String\l\
additionalAttributes\ :\ String\l}",
   tooltip="class UmletElement
"];

  // Class: UmpleModel
  UmpleModel [shape=record, label="{UmpleModel|umpleFile\ :\ UmpleFile\l\
defaultPackage\ :\ String\l\
generates\ :\ GenerateTarget\l\
shouldGenerate\ :\ Boolean\l\
glossary\ :\ Glossary\l\
defaultNamespace\ :\ String\l\
code\ :\ String\l\
debugMode\ :\ Boolean\l\
lastResult\ :\ ParseResult\l\
generatedCode\ :\ Map&lt;String,String&gt;\l\
levelOffset\ :\ Coordinate\l\
initialOffset\ :\ Coordinate\l\
classSize\ :\ Coordinate\l\
maxYLevels\ :\ int\l\
offsetFromEdge\ :\ Coordinate\l\
reflexiveSegmentLength\ :\ int\l\
traceType\ :\ String\l\
versionNumber\ :\ String\l}",
   tooltip="class UmpleModel
* The main meta-model of Umple.
 
 The model contains everything that was derived from an Umple file (.ump) when it was parsed such as 
 the classes, attributes, associations, methods, etc that were in it.
 
 Put another way, when an Umple file (.ump) is parsed an Umple model is populated with everything that was parsed from that file.
 
 Because of this it is absolutely critical to understand the model since it is basically the \"root\" of everything.
"];

  // Class: UmpleElement
  UmpleElement [shape=record, label="{UmpleElement|name\ :\ String\l\
modifier\ :\ String\l\
namespaces\ :\ String\l\
packageName\ :\ String\l\
extraCode\ :\ String\l\
isInternal\ :\ Boolean\l\
coordinates\ :\ Coordinate\l}",
   tooltip="class UmpleElement
* An element partaining to an entity with Umple.
"];

  // Class: Method
  Method [shape=record, label="{Method|modifier\ :\ String\l\
name\ :\ String\l\
position\ :\ Position\l\
type\ :\ String\l\
isImplemented\ :\ Boolean\l}",
   tooltip="class Method
* A method which recides inside an Umple Class.
"];

  // Class: Modifier
  Modifier [shape=record, label="{Modifier|name\ :\ String\l}",
   tooltip="class Modifier
"];

  // Class: MethodBody
  MethodBody [shape=record, label="{MethodBody|extraCode\ :\ String\l\
codeblock\ :\ CodeBlock\l}",
   tooltip="class MethodBody
* The contents of a method, such as the code within it.
"];

  // Class: Constant
  Constant [shape=record, label="{Constant|name\ :\ String\l\
type\ :\ String\l\
modifier\ :\ String\l\
value\ :\ String\l}",
   tooltip="class Constant
* Represents a constant.
"];

  // Class: UmpleVariable
  UmpleVariable [shape=record, label="{UmpleVariable|name\ :\ String\l\
type\ :\ String\l\
modifier\ :\ String\l\
value\ :\ String\l}",
   tooltip="class UmpleVariable
Superclass for tracking member variables in all target languages
TODO: Code smell because we have both an association variable and also an association
This class should go and instead AssociationEnd should be the member variable
"];

  // Class: UniqueIdentifier
  UniqueIdentifier [shape=record, label="{UniqueIdentifier}",
   tooltip="class UniqueIdentifier
"];
  UniqueIdentifier -> UmpleVariable [arrowhead="empty"; samehead="gen"];


  // Class: MethodParameter
  MethodParameter [shape=record, label="{MethodParameter|isAutounique\ :\ Boolean\l\
isList\ :\ Boolean\l\
isDerived\ :\ Boolean\l\
isLazy\ :\ Boolean\l}",
   tooltip="class MethodParameter
* Represents a parameter in a method and its various forms.
"];
  MethodParameter -> UmpleVariable [arrowhead="empty"; samehead="gen"];


  // Class: Type
  Type [shape=record, label="{Type}",
   tooltip="class Type
NOT used right now
Type is a simple string
"];

  // Class: PrimitiveType
  PrimitiveType [shape=record, label="{PrimitiveType|typeName\ :\ String\l}",
   tooltip="class PrimitiveType
NOT used right now
"];
  PrimitiveType -> Type [arrowhead="empty"; samehead="gen"];


  // Class: ReferenceType
  ReferenceType [shape=record, label="{ReferenceType}",
   tooltip="class ReferenceType
NOT used right now
"];
  ReferenceType -> Type [arrowhead="empty"; samehead="gen"];


  // Class: ConstraintVariable
  ConstraintVariable [shape=record, label="{ConstraintVariable|type\ :\ String\l\
constrainedVariable\ :\ String\l\
value\ :\ String\l\
isAttribute\ :\ boolean\l\
isAssociation\ :\ boolean\l\
index\ :\ Integer\l\
isPrimitive\ :\ boolean\l\
isNumeric\ :\ boolean\l}",
   tooltip="class ConstraintVariable
Under Development
"];

  // Class: Constraint
  Constraint [shape=record, label="{Constraint|expressions\ :\ ConstraintVariable\l}",
   tooltip="class Constraint
The Constraint object related to Umple Classes
"];

  // Class: CodeBlock
  CodeBlock [shape=record, label="{CodeBlock}",
   tooltip="class CodeBlock
"];

  // Class: CodeInjection
  CodeInjection [shape=record, label="{CodeInjection|type\ :\ String\l\
operation\ :\ String\l\
snippet\ :\ CodeBlock\l\
position\ :\ Position\l\
isInternal\ :\ Boolean\l}",
   tooltip="class CodeInjection
"];

  // Class: Key
  Key [shape=record, label="{Key|isDefault\ :\ Boolean\l\
members\ :\ String\l}",
   tooltip="class Key
"];

  // Class: UmpleClassifier
  UmpleClassifier [shape=record, label="{UmpleClassifier}",
   tooltip="class UmpleClassifier
* Represents an Umple classifier.
"];
  UmpleClassifier -> UmpleElement [arrowhead="empty"; samehead="gen"];


  // Class: UmpleInterface
  UmpleInterface [shape=record, label="{UmpleInterface}",
   tooltip="class UmpleInterface
* Represents an Umple interface.
"];
  UmpleInterface -> UmpleClassifier [arrowhead="empty"; samehead="gen"];


  // Class: UmpleClass
  UmpleClass [shape=record, label="{UmpleClass|isAbstract\ :\ Boolean\l\
isSingleton\ :\ Boolean\l\
associations\ :\ Association\l\
key\ :\ Key\l\
iAmImmutable\ :\ Boolean\l\
ancestorIsImmutable\ :\ Boolean\l\
sourceModel\ :\ UmpleModel\l}",
   tooltip="class UmpleClass
* Represents an Umple class which can contain attributes, associations and methods.
"];
  UmpleClass -> UmpleClassifier [arrowhead="empty"; samehead="gen"];


  // Class: Depend
  Depend [shape=record, label="{Depend|name\ :\ String\l\
isInternal\ :\ Boolean\l}",
   tooltip="class Depend
"];

  // Class: AssociationClass
  AssociationClass [shape=record, label="{AssociationClass}",
   tooltip="class AssociationClass
"];
  AssociationClass -> UmpleClass [arrowhead="empty"; samehead="gen"];


  // Class: Attribute
  Attribute [shape=record, label="{Attribute|isAutounique\ :\ Boolean\l\
isList\ :\ Boolean\l\
isDerived\ :\ Boolean\l\
codeblock\ :\ CodeBlock\l\
isLazy\ :\ Boolean\l}",
   tooltip="class Attribute
* Represents an attribute.
"];
  Attribute -> UmpleVariable [arrowhead="empty"; samehead="gen"];


  // Class: Association
  Association [shape=record, label="{Association|name\ :\ String\l\
isLeftNavigable\ :\ Boolean\l\
isRightNavigable\ :\ Boolean\l\
positions\ :\ Coordinate\l\
tokenPosition\ :\ Position\l\
immutable\ :\ Boolean\l}",
   tooltip="class Association
* Represents an association, typically between two Umple classes (1-1, 1-*, *-1, etc).
"];

  // Class: AssociationEnd
  AssociationEnd [shape=record, label="{AssociationEnd|roleName\ :\ String\l\
className\ :\ String\l\
modifier\ :\ String\l\
referenceToClassName\ :\ String\l\
multiplicity\ :\ Multiplicity\l\
isDefaultRoleName\ :\ Boolean\l\
priority\ :\ String\l}",
   tooltip="class AssociationEnd
TODO: Code smell referenceToClassName is a duplication, can access via the association
Create a derived attribute otherend (the other AssociationEnd)
"];

  // Class: AssociationVariable
  AssociationVariable [shape=record, label="{AssociationVariable|multiplicity\ :\ Multiplicity\l\
isNavigable\ :\ Boolean\l\
priority\ :\ String\l}",
   tooltip="class AssociationVariable
TODO: Code smell. Should be replaced by the 'otherEnd' of the AssociationEnd
"];
  AssociationVariable -> UmpleVariable [arrowhead="empty"; samehead="gen"];


  // Class: Multiplicity
  Multiplicity [shape=record, label="{Multiplicity|bound\ :\ String\l\
minimum\ :\ String\l\
maximum\ :\ String\l}",
   tooltip="class Multiplicity
TODO: extract derived attributes from Umple_Code.ump (getLowerBound etc.)
"];

  // Class: GeneratedElement
  GeneratedElement [shape=record, label="{GeneratedElement}",
   tooltip="class GeneratedElement
TODO: Code smell: This duplicates the structure of the class from UmpleClass
This is a problem for model-to-model transformations
Should be abolished
"];

  // Class: GeneratedClass
  GeneratedClass [shape=record, label="{GeneratedClass}",
   tooltip="class GeneratedClass
* Represents a class that is generated from an Umple class, such as a Java or Cpp class.
"];
  GeneratedClass -> GeneratedElement [arrowhead="empty"; samehead="gen"];


  // Class: Point
  Point [shape=record, label="{Point|x\ :\ Integer\l\
y\ :\ Integer\l}",
   tooltip="class Point
class GeneratedInterface
{
isA GeneratedElement;
//code = null;
* -> 1 UmpleModel model;
0..1 -> 1 UmpleInterface uInterface;
}
"];

  // Class: Coordinate
  Coordinate [shape=record, label="{Coordinate|x\ :\ Integer\l\
y\ :\ Integer\l\
width\ :\ Integer\l\
height\ :\ Integer\l}",
   tooltip="class Coordinate
"];

  // Class: Comment
  Comment [shape=record, label="{Comment|text\ :\ String\l}",
   tooltip="class Comment
* Represents a comment, such as those found around classes, methods, attributes and associations.
"];

  // Class: GenerateTarget
  GenerateTarget [shape=record, label="{GenerateTarget|language\ :\ String\l\
path\ :\ String\l\
override\ :\ Boolean\l\
overrideAll\ :\ Boolean\l}",
   tooltip="class GenerateTarget
* Represents the generation target, such as what the generated output language will be.
"];

  // Class: TraceCondition
  TraceCondition [shape=record, label="{TraceCondition|conditionType\ :\ String\l\
preCondition\ :\ boolean\l\
postCondition\ :\ boolean\l\
lhs\ :\ String\l}",
   tooltip="class TraceCondition
"];

  // Class: ConditionRhs
  ConditionRhs [shape=record, label="{ConditionRhs|rhs\ :\ String\l\
comparisonOperator\ :\ String\l}",
   tooltip="class ConditionRhs
"];

  // Class: TraceRecord
  TraceRecord [shape=record, label="{TraceRecord|recordOnly\ :\ boolean\l\
record\ :\ String\l}",
   tooltip="class TraceRecord
"];

  // Class: MethodTraceEntity
  MethodTraceEntity [shape=record, label="{MethodTraceEntity|name\ :\ String\l\
entry\ :\ boolean\l\
exit\ :\ boolean\l}",
   tooltip="class MethodTraceEntity
"];

  // Class: TraceDirective
  TraceDirective [shape=record, label="{TraceDirective|id\ :\ Integer\l}",
   tooltip="class TraceDirective
"];

  // Class: Attribute_TraceItem
  Attribute_TraceItem [shape=record, label="{Attribute_TraceItem|traceSet\ :\ boolean\l\
traceGet\ :\ boolean\l\
forClause\ :\ Integer\l\
periodClause\ :\ String\l\
duringClause\ :\ String\l\
executeClause\ :\ String\l}",
   tooltip="class Attribute_TraceItem
"];

  // Class: StateMachine_TraceItem
  StateMachine_TraceItem [shape=record, label="{StateMachine_TraceItem|entry\ :\ boolean\l\
exit\ :\ boolean\l\
traceStateMachineFlag\ :\ boolean\l}",
   tooltip="class StateMachine_TraceItem
"];

  // Class: TraceCase
  TraceCase [shape=record, label="{TraceCase|name\ :\ String\l}",
   tooltip="class TraceCase
"];

  // Class: RuntimeException
  RuntimeException [shape=record, label="{RuntimeException|str\ :\ String\l\
parent\ :\ Exception\l}",
   tooltip="class RuntimeException
"];

  // Class: UmpleCompilerException
  UmpleCompilerException [shape=record, label="{UmpleCompilerException}",
   tooltip="class UmpleCompilerException
"];
  UmpleCompilerException -> RuntimeException [arrowhead="empty"; samehead="gen"];


  // Class: SemanticException
  SemanticException [shape=record, label="{SemanticException}",
   tooltip="class SemanticException
"];

  // Class: UmpleFile
  UmpleFile [shape=record, label="{UmpleFile|file\ :\ File\l\
fileName\ :\ String\l\
path\ :\ String\l\
fileContent\ :\ StringBuilder\l}",
   tooltip="class UmpleFile
TODO: Users of this can most likely just use File, so this could be refactored out
"];

  // Class: UmpleParserFactory
  UmpleParserFactory [shape=record, label="{UmpleParserFactory}",
   tooltip="class UmpleParserFactory
"];

  // Class: UmpleInternalParser
  UmpleInternalParser [shape=record, label="{UmpleInternalParser|currentPackageName\ :\ String\l\
packageNameUsed\ :\ Boolean\l\
model\ :\ UmpleModel\l\
unparsedUmpleFiles\ :\ String\l\
parsedUmpleFiles\ :\ String\l\
shouldProcessAgain\ :\ Boolean\l\
shouldProcessClassAgain\ :\ Boolean\l\
unlinkedAssociationVariables\ :\ AssociationVariable\l\
unlinkedAssociations\ :\ Association\l\
positionToClassNameReference\ :\ Map&lt;Position,String&gt;\l\
unlinkedExtends\ :\ Map&lt;UmpleClassifier,List&lt;String&gt;&gt;\l\
unlinkedExtendsTokens\ :\ Map&lt;UmpleClassifier,List&lt;Token&gt;&gt;\l\
unlinkedExtendsTokensInterface\ :\ Map&lt;UmpleClassifier,List&lt;Token&gt;&gt;\l\
unlinkedInterfaceExtends\ :\ Map&lt;UmpleClassifier,List&lt;String&gt;&gt;\l\
lastComments\ :\ List&lt;Comment&gt;\l\
placeholderStateMachine\ :\ StateMachine\l\
stateMachineNameToToken\ :\ Map&lt;String,Token&gt;\l\
possiblyUnknownStates\ :\ Map&lt;State,List&lt;Token&gt;&gt;\l}",
   tooltip="class UmpleInternalParser
Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This is our internal parser implementation for the Umple language.  It uses
a generic Parser that can read an external EBNF grammar file, and then populate
an abstract syntax tree.

The work of the UmpleInternalParser is 

a) The grammar definition (defined externally in *.grammar files)
b) Analyzing the AST to populate an Umple meta model instance
c) Delegating to our code generator to produce the necessary artifacts (i.e. Java / PHP / Ruby code)

Please refer to UmpleInternalParser_Code.ump for implementation details.
"];
  UmpleInternalParser -> Parser [arrowhead="empty"; samehead="gen"];

  UmpleInternalParser -> UmpleParser [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: Pair
  Pair [shape=record, label="{Pair|name\ :\ String\l\
value\ :\ String\l}",
   tooltip="class Pair
"];

  // Class: UmpleXtextParser
  UmpleXtextParser [shape=record, label="{UmpleXtextParser|temp\ :\ UmpleInternalParser\l}",
   tooltip="class UmpleXtextParser
"];
  UmpleXtextParser -> UmpleParser [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: SynchronizationAction
  SynchronizationAction [shape=record, label="{SynchronizationAction|deltaCode\ :\ String\l\
umpleCode\ :\ String\l}",
   tooltip="class SynchronizationAction
"];

  // Class: UpdatePositioningAction
  UpdatePositioningAction [shape=record, label="{UpdatePositioningAction|umpleParser\ :\ UmpleParser\l\
textParser\ :\ TextParser\l\
jsonParser\ :\ JsonParser\l\
json\ :\ Json\l\
addedPositions\ :\ String\l}",
   tooltip="class UpdatePositioningAction
"];
  UpdatePositioningAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: NewAction
  NewAction [shape=record, label="{NewAction}",
   tooltip="class NewAction
"];
  NewAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: EditAction
  EditAction [shape=record, label="{EditAction}",
   tooltip="class EditAction
"];
  EditAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: DeleteAction
  DeleteAction [shape=record, label="{DeleteAction}",
   tooltip="class DeleteAction
"];
  DeleteAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: NewAssociationAction
  NewAssociationAction [shape=record, label="{NewAssociationAction}",
   tooltip="class NewAssociationAction
"];
  NewAssociationAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: EditAssociationAction
  EditAssociationAction [shape=record, label="{EditAssociationAction}",
   tooltip="class EditAssociationAction
"];
  EditAssociationAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: DeleteAssociationAction
  DeleteAssociationAction [shape=record, label="{DeleteAssociationAction}",
   tooltip="class DeleteAssociationAction
"];
  DeleteAssociationAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: DeleteGeneralizationAction
  DeleteGeneralizationAction [shape=record, label="{DeleteGeneralizationAction}",
   tooltip="class DeleteGeneralizationAction
"];
  DeleteGeneralizationAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: NewGeneralizationAction
  NewGeneralizationAction [shape=record, label="{NewGeneralizationAction}",
   tooltip="class NewGeneralizationAction
"];
  NewGeneralizationAction -> SynchronizationAction [arrowhead="empty"; samehead="gen"];


  // Class: VioletGenerator
  VioletGenerator [shape=record, label="{VioletGenerator|filename\ :\ String\l\
model\ :\ UmpleModel\l}",
   tooltip="class VioletGenerator
"];
  VioletGenerator -> CodeGenerator [arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: VioletDiagram
  VioletDiagram [shape=record, label="{VioletDiagram}",
   tooltip="class VioletDiagram
"];

  // Class: VioletClass
  VioletClass [shape=record, label="{VioletClass|name\ :\ String\l\
x\ :\ Double\l\
y\ :\ Double\l}",
   tooltip="class VioletClass
"];

  // Class: VioletAssociation
  VioletAssociation [shape=record, label="{VioletAssociation|startLabel\ :\ String\l\
endLabel\ :\ String\l}",
   tooltip="class VioletAssociation
"];

  // Class: VmlSystem
  VmlSystem [shape=record, label="{VmlSystem|code\ :\ String\l}",
   tooltip="class VmlSystem
"];

  // Class: Concern
  Concern [shape=record, label="{Concern|name\ :\ String\l}",
   tooltip="class Concern
POSITION INFORMATION
"];

  // Class: VariationPoint
  VariationPoint [shape=record, label="{VariationPoint|name\ :\ String\l}",
   tooltip="class VariationPoint
"];

  // Class: Variant
  Variant [shape=record, label="{Variant|name\ :\ String\l}",
   tooltip="class Variant
"];

  // Class: CodeSnippet
  CodeSnippet [shape=record, label="{CodeSnippet|code\ :\ String\l}",
   tooltip="class CodeSnippet
"];

  // Class: VmlParser
  VmlParser [shape=record, label="{VmlParser|variationPointToRequiresListMap\ :\ Map&lt;VariationPoint,List&lt;String&gt;&gt;\l\
invokedVariations\ :\ List&lt;VariationPoint&gt;\l}",
   tooltip="class VmlParser
"];
  VmlParser -> Parser [arrowhead="empty"; samehead="gen"];


  // Class: UmpleConsoleMain
  UmpleConsoleMain [shape=record, label="{UmpleConsoleMain}",
   tooltip="class UmpleConsoleMain
"];

  // Class: UmpleRunMain
  UmpleRunMain [shape=record, label="{UmpleRunMain}",
   tooltip="class UmpleRunMain
"];

  // Class: PlaygroundMain
  PlaygroundMain [shape=record, label="{PlaygroundMain}",
   tooltip="class PlaygroundMain
TODO: Code smell - rename?
Text to diagram merging tool used by UmpleOnline
"];

  // Class: StatsMain
  StatsMain [shape=record, label="{StatsMain}",
   tooltip="class StatsMain
"];

  // Class: MetricsCollector
  MetricsCollector [shape=record, label="{MetricsCollector|logs\ :\ String\l}",
   tooltip="class MetricsCollector
"];

  // Class: TriState
  TriState [shape=record, label="{TriState|isSet\ :\ Boolean\l\
status\ :\ Boolean\l}",
   tooltip="class TriState
"];

  // Class: Language
  Language [shape=record, label="{Language}",
   tooltip="class Language
"];

  // Class: Input
  Input [shape=record, label="{Input|stream\ :\ InputStream\l\
reader\ :\ BufferedReader\l}",
   tooltip="class Input
"];

  // Class: FileManager
  FileManager [shape=record, label="{FileManager}",
   tooltip="class FileManager
"];

  // Class: ActionResponse
  ActionResponse [shape=record, label="{ActionResponse|default_success_message_id\ :\ String\l\
successMessage\ :\ String\l\
errors\ :\ ErrorItem\l}",
   tooltip="class ActionResponse
"];

  // Class: ErrorItem
  ErrorItem [shape=record, label="{ErrorItem|id\ :\ String\l\
parts\ :\ String\l}",
   tooltip="class ErrorItem
"];

  // Class: StringFormatter
  StringFormatter [shape=record, label="{StringFormatter}",
   tooltip="class StringFormatter
"];

  // Class: SampleFileWriter
  SampleFileWriter [shape=record, label="{SampleFileWriter}",
   tooltip="class SampleFileWriter
"];

  // Class: DeleteLanguage
  DeleteLanguage [shape=record, label="{DeleteLanguage}",
   tooltip="class DeleteLanguage
"];

  // Class: Word
  Word [shape=record, label="{Word|singular\ :\ String\l\
plural\ :\ String\l}",
   tooltip="class Word
"];

  // Class: Glossary
  Glossary [shape=record, label="{Glossary|words\ :\ Word\l}",
   tooltip="class Glossary
"];

  // Class: ExceptionDumper
  ExceptionDumper [shape=record, label="{ExceptionDumper}",
   tooltip="class ExceptionDumper
"];

  // Class: Object
  Object [shape=record, label="{Object}",
   tooltip="class Object
"];

  // Class: ClassLoader
  ClassLoader [shape=record, label="{ClassLoader}",
   tooltip="class ClassLoader
"];

  // Class: Command
  Command [shape=record, label="{Command|history\ :\ String\l\
messages\ :\ String\l\
attributes\ :\ String\l\
currentObject\ :\ Object\l\
loader\ :\ ClassLoader\l}",
   tooltip="class Command
"];

  // Class: Builder
  Builder [shape=record, label="{Builder}",
   tooltip="class Builder
"];

  // Class: DynamicClassPathLoader
  DynamicClassPathLoader [shape=record, label="{DynamicClassPathLoader}",
   tooltip="class DynamicClassPathLoader
"];

  // Class: DocumenterMain
  DocumenterMain [shape=record, label="{DocumenterMain}",
   tooltip="class DocumenterMain
"];

  // Class: TraceItem
  TraceItem [shape=record, label="{TraceItem}",
   tooltip="class TraceItem
"];

  // Class: VmlConsole
  VmlConsole [shape=record, label="{VmlConsole}",
   tooltip="class VmlConsole
"];

  // Class: CodeCompiler
  CodeCompiler [shape=record, label="{CodeCompiler}",
   tooltip="class CodeCompiler
"];

  // All associations
  Documenter -> ContentParser [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 parser"];
  Group -> Content [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  Parser -> Rule [dir="forward", arrowhead="open", taillabel="* ", headlabel="* "];
  Parser -> Couple [dir="forward", arrowhead="open", taillabel="* ", headlabel="* "];
  ContentParser -> Group [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  Couple -> Couple [dir="none", taillabel="0..1 ", headlabel="* ignores"];
  ParseResult -> Position [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 "];
  ParseResult -> ErrorMessage [dir="forward", arrowhead="open", taillabel="* ", headlabel="* "];
  ErrorMessage -> ErrorType [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 "];
  ErrorMessage -> Position [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 "];
  ErrorTypeSingleton -> ErrorType [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  Token -> Token [dir="none", taillabel="0..1 parentToken", headlabel="* subTokens"];
  Token -> Position [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 "];
  RulePartValue -> Position [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 "];
  RuleInstance -> RulePart [dir="forward", arrowhead="open", taillabel="* ", headlabel="* "];
  RuleInstance -> Parser [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 "];
  StateMachine -> UmpleClass [dir="none", taillabel="* ", headlabel="0..1 "];
  StateMachine -> State [dir="none", taillabel="* nestedStateMachines", headlabel="0..1 parentState"];
  State -> Activity [dir="none", taillabel="1 ", headlabel="0..1 "];
  State -> Action [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* "];
  State -> StateMachine [dir="none", taillabel="* ", headlabel="1 "];
  Activity -> Event [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 onCompletionEvent"];
  Transition -> Event [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 "];
  Transition -> State [dir="none", taillabel="* ", headlabel="1 fromState"];
  Transition -> State [dir="none", taillabel="* nextTransition", headlabel="1 nextState"];
  Transition -> Guard [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 "];
  Transition -> Action [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 "];
  UmletGenerator -> UmletElement [dir="forward", arrowhead="open", taillabel="* ", headlabel="* classElements"];
  UmletGenerator -> UmletElement [dir="forward", arrowhead="open", taillabel="* ", headlabel="* associationElements"];
  UmletDiagram -> UmletElement [dir="none", taillabel="* ", headlabel="* "];
  UmletElement -> Coordinate [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 "];
  UmpleModel -> Association [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  UmpleModel -> UmpleClass [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  UmpleModel -> StateMachine [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* stateMachineDefinitions"];
  UmpleModel -> UmpleInterface [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  UmpleElement -> Position [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* positions"];
  Method -> MethodParameter [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  Method -> MethodBody [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 "];
  Method -> Comment [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  ReferenceType -> UmpleClass [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 "];
  ReferenceType -> UmpleInterface [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 "];
  CodeInjection -> UmpleClass [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 "];
  UmpleClassifier -> Method [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  UmpleClassifier -> Depend [dir="forward", arrowhead="open", taillabel="* ", headlabel="* "];
  UmpleClassifier -> Constant [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  UmpleClassifier -> Token [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 extendsToken"];
  UmpleInterface -> UmpleInterface [dir="forward", arrowhead="open", taillabel="* ", headlabel="* extendsInterface"];
  UmpleClass -> CodeInjection [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  UmpleClass -> Constraint [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  UmpleClass -> UmpleClass [dir="none", taillabel="* subclasses", headlabel="0..1 extendsClass"];
  UmpleClass -> UmpleInterface [dir="forward", arrowhead="open", taillabel="* ", headlabel="* parentInterface"];
  UmpleClass -> UniqueIdentifier [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 "];
  UmpleClass -> Attribute [dir="none", taillabel="1 ", headlabel="* "];
  UmpleClass -> AssociationVariable [dir="none", taillabel="0..1 ", headlabel="* "];
  UmpleClass -> Comment [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  UmpleClass -> TraceDirective [dir="none", taillabel="0..1 ", headlabel="* "];
  UmpleClass -> TraceCase [dir="none", taillabel="0..1 ", headlabel="* "];
  AssociationClass -> Association [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..2 associatedTo"];
  Attribute -> Comment [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  Association -> AssociationEnd [dir="none", taillabel="0..1 ", headlabel="2 ends"];
  AssociationVariable -> Comment [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  GeneratedClass -> UmpleModel [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 model"];
  GeneratedClass -> UmpleClass [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="1 uClass"];
  GeneratedClass -> GeneratedClass [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 parentClass"];
  TraceCondition -> ConditionRhs [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="1 rhs"];
  TraceRecord -> Attribute [dir="none", taillabel="* ", headlabel="* "];
  TraceRecord -> StateMachine [dir="none", taillabel="* ", headlabel="* "];
  TraceDirective -> Attribute_TraceItem [dir="none", taillabel="1 ", headlabel="* "];
  TraceDirective -> StateMachine_TraceItem [dir="none", taillabel="* ", headlabel="* "];
  TraceDirective -> MethodTraceEntity [dir="none", taillabel="* ", headlabel="* "];
  TraceDirective -> AssociationVariable [dir="none", taillabel="0..1 ", headlabel="0..1 "];
  TraceDirective -> TraceCondition [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* condition"];
  TraceDirective -> TraceRecord [dir="none", taillabel="1 ", headlabel="0..1 "];
  Attribute_TraceItem -> Attribute [dir="none", taillabel="* ", headlabel="* "];
  StateMachine_TraceItem -> StateMachine [dir="none", taillabel="* ", headlabel="0..1 "];
  StateMachine_TraceItem -> Transition [dir="none", taillabel="* ", headlabel="0..1 "];
  TraceCase -> TraceDirective [dir="none", taillabel="* ", headlabel="* "];
  UmpleInternalParser -> ErrorType [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* messagesToExpect"];
  UmpleInternalParser -> ErrorType [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* warningsToIgnore"];
  VioletGenerator -> VioletClass [dir="forward", arrowhead="open", taillabel="* ", headlabel="* "];
  VioletGenerator -> VioletAssociation [dir="forward", arrowhead="open", taillabel="* ", headlabel="* "];
  VioletDiagram -> VioletClass [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  VioletDiagram -> VioletAssociation [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* "];
  VioletClass -> VioletClass [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 parentClass"];
  VioletAssociation -> VioletClass [dir="forward", arrowhead="open", taillabel="* ", headlabel="1..2 "];
  VmlSystem -> CodeSnippet [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* "];
  VmlSystem -> Concern [dir="none", taillabel="0..1 ", headlabel="* "];
  Concern -> VariationPoint [dir="none", taillabel="0..1 ", headlabel="* "];
  VariationPoint -> CodeSnippet [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 "];
  VariationPoint -> Variant [dir="none", taillabel="0..1 ", headlabel="* "];
  VariationPoint -> VariationPoint [dir="forward", arrowhead="open", taillabel="* ", headlabel="* requires"];
  Variant -> CodeSnippet [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 "];
  VmlParser -> VmlSystem [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 system"];
}
