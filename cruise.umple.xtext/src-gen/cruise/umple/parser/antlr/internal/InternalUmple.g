/*
* generated by Xtext
*/
grammar InternalUmple;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package cruise.umple.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cruise.umple.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import cruise.umple.services.UmpleGrammarAccess;

}

@parser::members {

 	private UmpleGrammarAccess grammarAccess;
 	
    public InternalUmpleParser(TokenStream input, UmpleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "UmpleModel";	
   	}
   	
   	@Override
   	protected UmpleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleUmpleModel
entryRuleUmpleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUmpleModelRule()); }
	 iv_ruleUmpleModel=ruleUmpleModel 
	 { $current=$iv_ruleUmpleModel.current; } 
	 EOF 
;

// Rule UmpleModel
ruleUmpleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getUmpleModelAccess().getElementsAbstractElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUmpleModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getNamespaceParserRuleCall_0()); 
    }
    this_Namespace_0=ruleNamespace
    { 
        $current = $this_Namespace_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getGlossaryParserRuleCall_1()); 
    }
    this_Glossary_1=ruleGlossary
    { 
        $current = $this_Glossary_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getGenerateParserRuleCall_2()); 
    }
    this_Generate_2=ruleGenerate
    { 
        $current = $this_Generate_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getUseStatementParserRuleCall_3()); 
    }
    this_UseStatement_3=ruleUseStatement
    { 
        $current = $this_UseStatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getEntityParserRuleCall_4()); 
    }
    this_Entity_4=ruleEntity
    { 
        $current = $this_Entity_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGlossary
entryRuleGlossary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlossaryRule()); }
	 iv_ruleGlossary=ruleGlossary 
	 { $current=$iv_ruleGlossary.current; } 
	 EOF 
;

// Rule Glossary
ruleGlossary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGlossaryAccess().getGlossaryAction_0(),
            $current);
    }
)	otherlv_1='glossary' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGlossaryAccess().getGlossaryKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGlossaryAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlossaryAccess().getWordsWordParserRuleCall_3_0()); 
	    }
		lv_words_3_0=ruleWord		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlossaryRule());
	        }
       		add(
       			$current, 
       			"words",
        		lv_words_3_0, 
        		"Word");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGlossaryAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWordRule()); }
	 iv_ruleWord=ruleWord 
	 { $current=$iv_ruleWord.current; } 
	 EOF 
;

// Rule Word
ruleWord returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_singular_0_0=RULE_STRING
		{
			newLeafNode(lv_singular_0_0, grammarAccess.getWordAccess().getSingularSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"singular",
        		lv_singular_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWordAccess().getColonKeyword_1());
    }
(
(
		lv_plural_2_0=RULE_STRING
		{
			newLeafNode(lv_plural_2_0, grammarAccess.getWordAccess().getPluralSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"plural",
        		lv_plural_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWordAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleGenerate
entryRuleGenerate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenerateRule()); }
	 iv_ruleGenerate=ruleGenerate 
	 { $current=$iv_ruleGenerate.current; } 
	 EOF 
;

// Rule Generate
ruleGenerate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='generate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGenerateAccess().getGenerateKeyword_0());
    }
((
(
		lv_java_1_0=	'Java' 
    {
        newLeafNode(lv_java_1_0, grammarAccess.getGenerateAccess().getJavaJavaKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenerateRule());
	        }
       		setWithLastConsumed($current, "java", true, "Java");
	    }

)
)
    |(
(
		lv_Php_2_0=	'Php' 
    {
        newLeafNode(lv_Php_2_0, grammarAccess.getGenerateAccess().getPhpPhpKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenerateRule());
	        }
       		setWithLastConsumed($current, "Php", true, "Php");
	    }

)
)
    |(
(
		lv_Ruby_3_0=	'Ruby' 
    {
        newLeafNode(lv_Ruby_3_0, grammarAccess.getGenerateAccess().getRubyRubyKeyword_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenerateRule());
	        }
       		setWithLastConsumed($current, "Ruby", lv_Ruby_3_0, "Ruby");
	    }

)
))	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGenerateAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleUseStatement
entryRuleUseStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseStatementRule()); }
	 iv_ruleUseStatement=ruleUseStatement 
	 { $current=$iv_ruleUseStatement.current; } 
	 EOF 
;

// Rule UseStatement
ruleUseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='use' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUseStatementAccess().getUseKeyword_0());
    }
(
(
		lv_file_1_0=RULE_ID
		{
			newLeafNode(lv_file_1_0, grammarAccess.getUseStatementAccess().getFileIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUseStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"file",
        		lv_file_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUseStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleNamespace
entryRuleNamespace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceRule()); }
	 iv_ruleNamespace=ruleNamespace 
	 { $current=$iv_ruleNamespace.current; } 
	 EOF 
;

// Rule Namespace
ruleNamespace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamespaceAccess().getNamespaceKeyword_0());
    }
(
(
		lv_value_1_0=RULE_ID
		{
			newLeafNode(lv_value_1_0, grammarAccess.getNamespaceAccess().getValueIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamespaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamespaceAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getClassDefinitionParserRuleCall_0()); 
    }
    this_ClassDefinition_0=ruleClassDefinition
    { 
        $current = $this_ClassDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getInterfaceDefinitionParserRuleCall_1()); 
    }
    this_InterfaceDefinition_1=ruleInterfaceDefinition
    { 
        $current = $this_InterfaceDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getExternalDefinitionParserRuleCall_2()); 
    }
    this_ExternalDefinition_2=ruleExternalDefinition
    { 
        $current = $this_ExternalDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getAssociationDefinitionParserRuleCall_3()); 
    }
    this_AssociationDefinition_3=ruleAssociationDefinition
    { 
        $current = $this_AssociationDefinition_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getAssociationClassDefinitionParserRuleCall_4()); 
    }
    this_AssociationClassDefinition_4=ruleAssociationClassDefinition
    { 
        $current = $this_AssociationClassDefinition_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getStateMachineDefinitionParserRuleCall_5()); 
    }
    this_StateMachineDefinition_5=ruleStateMachineDefinition
    { 
        $current = $this_StateMachineDefinition_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClassDefinition
entryRuleClassDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassDefinitionRule()); }
	 iv_ruleClassDefinition=ruleClassDefinition 
	 { $current=$iv_ruleClassDefinition.current; } 
	 EOF 
;

// Rule ClassDefinition
ruleClassDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassDefinitionAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassDefinitionAccess().getClassContentClassContentParserRuleCall_3_0()); 
	    }
		lv_classContent_3_0=ruleClassContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassDefinitionRule());
	        }
       		add(
       			$current, 
       			"classContent",
        		lv_classContent_3_0, 
        		"ClassContent");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleExternalDefinition
entryRuleExternalDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalDefinitionRule()); }
	 iv_ruleExternalDefinition=ruleExternalDefinition 
	 { $current=$iv_ruleExternalDefinition.current; } 
	 EOF 
;

// Rule ExternalDefinition
ruleExternalDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='external' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExternalDefinitionAccess().getExternalKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExternalDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExternalDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExternalDefinitionAccess().getClassContentClassContentParserRuleCall_3_0()); 
	    }
		lv_classContent_3_0=ruleClassContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternalDefinitionRule());
	        }
       		add(
       			$current, 
       			"classContent",
        		lv_classContent_3_0, 
        		"ClassContent");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExternalDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleInterfaceDefinition
entryRuleInterfaceDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceDefinitionRule()); }
	 iv_ruleInterfaceDefinition=ruleInterfaceDefinition 
	 { $current=$iv_ruleInterfaceDefinition.current; } 
	 EOF 
;

// Rule InterfaceDefinition
ruleInterfaceDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceDefinitionAccess().getInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInterfaceDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getDependDependParserRuleCall_3_0()); 
	    }
		lv_depend_3_0=ruleDepend		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceDefinitionRule());
	        }
       		add(
       			$current, 
       			"depend",
        		lv_depend_3_0, 
        		"Depend");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAssociationDefinition
entryRuleAssociationDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssociationDefinitionRule()); }
	 iv_ruleAssociationDefinition=ruleAssociationDefinition 
	 { $current=$iv_ruleAssociationDefinition.current; } 
	 EOF 
;

// Rule AssociationDefinition
ruleAssociationDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='association' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssociationDefinitionAccess().getAssociationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAssociationDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssociationDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssociationDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssociationDefinitionAccess().getAssociationAssociationParserRuleCall_3_0()); 
	    }
		lv_association_3_0=ruleAssociation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssociationDefinitionRule());
	        }
       		add(
       			$current, 
       			"association",
        		lv_association_3_0, 
        		"Association");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssociationDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleClassContent
entryRuleClassContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassContentRule()); }
	 iv_ruleClassContent=ruleClassContent 
	 { $current=$iv_ruleClassContent.current; } 
	 EOF 
;

// Rule ClassContent
ruleClassContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClassContentAccess().getAttributeParserRuleCall_0()); 
    }
    this_Attribute_0=ruleAttribute
    { 
        $current = $this_Attribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassContentAccess().getPositionParserRuleCall_1()); 
    }
    this_Position_1=rulePosition
    { 
        $current = $this_Position_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassContentAccess().getSoftwarePatternParserRuleCall_2()); 
    }
    this_SoftwarePattern_2=ruleSoftwarePattern
    { 
        $current = $this_SoftwarePattern_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassContentAccess().getDependParserRuleCall_3()); 
    }
    this_Depend_3=ruleDepend
    { 
        $current = $this_Depend_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassContentAccess().getSymmetricReflexiveAssociationParserRuleCall_4()); 
    }
    this_SymmetricReflexiveAssociation_4=ruleSymmetricReflexiveAssociation
    { 
        $current = $this_SymmetricReflexiveAssociation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassContentAccess().getInlineAssociationParserRuleCall_5()); 
    }
    this_InlineAssociation_5=ruleInlineAssociation
    { 
        $current = $this_InlineAssociation_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassContentAccess().getStateMachineParserRuleCall_6()); 
    }
    this_StateMachine_6=ruleStateMachine
    { 
        $current = $this_StateMachine_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssociationClassContent
entryRuleAssociationClassContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssociationClassContentRule()); }
	 iv_ruleAssociationClassContent=ruleAssociationClassContent 
	 { $current=$iv_ruleAssociationClassContent.current; } 
	 EOF 
;

// Rule AssociationClassContent
ruleAssociationClassContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssociationClassContentAccess().getAttributeParserRuleCall_0()); 
    }
    this_Attribute_0=ruleAttribute
    { 
        $current = $this_Attribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssociationClassContentAccess().getPositionParserRuleCall_1()); 
    }
    this_Position_1=rulePosition
    { 
        $current = $this_Position_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssociationClassContentAccess().getSoftwarePatternParserRuleCall_2()); 
    }
    this_SoftwarePattern_2=ruleSoftwarePattern
    { 
        $current = $this_SoftwarePattern_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssociationClassContentAccess().getDependParserRuleCall_3()); 
    }
    this_Depend_3=ruleDepend
    { 
        $current = $this_Depend_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssociationClassContentAccess().getSymmetricReflexiveAssociationParserRuleCall_4()); 
    }
    this_SymmetricReflexiveAssociation_4=ruleSymmetricReflexiveAssociation
    { 
        $current = $this_SymmetricReflexiveAssociation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssociationClassContentAccess().getInlineAssociationParserRuleCall_5()); 
    }
    this_InlineAssociation_5=ruleInlineAssociation
    { 
        $current = $this_InlineAssociation_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssociationClassContentAccess().getStateMachineParserRuleCall_6()); 
    }
    this_StateMachine_6=ruleStateMachine
    { 
        $current = $this_StateMachine_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDepend
entryRuleDepend returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDependRule()); }
	 iv_ruleDepend=ruleDepend 
	 { $current=$iv_ruleDepend.current; } 
	 EOF 
;

// Rule Depend
ruleDepend returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='depend' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDependAccess().getDependKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDependAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDependRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='.*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDependAccess().getFullStopAsteriskKeyword_2());
    }
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDependAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssociationRule()); }
	 iv_ruleAssociation=ruleAssociation 
	 { $current=$iv_ruleAssociation.current; } 
	 EOF 
;

// Rule Association
ruleAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssociationAccess().getMultiplicityParserRuleCall_0()); 
    }
rulemultiplicity
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_type1_1_0=RULE_ID
		{
			newLeafNode(lv_type1_1_0, grammarAccess.getAssociationAccess().getType1IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type1",
        		lv_type1_1_0, 
        		"ID");
	    }

)
)(
(
		lv_rolename1_2_0=RULE_ID
		{
			newLeafNode(lv_rolename1_2_0, grammarAccess.getAssociationAccess().getRolename1IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rolename1",
        		lv_rolename1_2_0, 
        		"ID");
	    }

)
)?(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssociationAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }

    |	otherlv_4='--' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssociationAccess().getHyphenMinusHyphenMinusKeyword_3_1());
    }

    |	otherlv_5='<-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAssociationAccess().getLessThanSignHyphenMinusKeyword_3_2());
    }

    |	otherlv_6='><' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAssociationAccess().getGreaterThanSignLessThanSignKeyword_3_3());
    }
)
    { 
        newCompositeNode(grammarAccess.getAssociationAccess().getMultiplicityParserRuleCall_4()); 
    }
rulemultiplicity
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_type2_8_0=RULE_ID
		{
			newLeafNode(lv_type2_8_0, grammarAccess.getAssociationAccess().getType2IDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type2",
        		lv_type2_8_0, 
        		"ID");
	    }

)
)(
(
		lv_rolename2_9_0=RULE_ID
		{
			newLeafNode(lv_rolename2_9_0, grammarAccess.getAssociationAccess().getRolename2IDTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rolename2",
        		lv_rolename2_9_0, 
        		"ID");
	    }

)
)?	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAssociationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleSymmetricReflexiveAssociation
entryRuleSymmetricReflexiveAssociation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymmetricReflexiveAssociationRule()); }
	 iv_ruleSymmetricReflexiveAssociation=ruleSymmetricReflexiveAssociation 
	 { $current=$iv_ruleSymmetricReflexiveAssociation.current; } 
	 EOF 
;

// Rule SymmetricReflexiveAssociation
ruleSymmetricReflexiveAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSymmetricReflexiveAssociationAccess().getMultiplicityParserRuleCall_0()); 
    }
rulemultiplicity
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='self' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSymmetricReflexiveAssociationAccess().getSelfKeyword_1());
    }
(
(
		lv_rolename_2_0=RULE_ID
		{
			newLeafNode(lv_rolename_2_0, grammarAccess.getSymmetricReflexiveAssociationAccess().getRolenameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSymmetricReflexiveAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rolename",
        		lv_rolename_2_0, 
        		"ID");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSymmetricReflexiveAssociationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleInlineAssociation
entryRuleInlineAssociation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInlineAssociationRule()); }
	 iv_ruleInlineAssociation=ruleInlineAssociation 
	 { $current=$iv_ruleInlineAssociation.current; } 
	 EOF 
;

// Rule InlineAssociation
ruleInlineAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInlineAssociationAccess().getMultiplicityParserRuleCall_0()); 
    }
rulemultiplicity
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_rolename1_1_0=RULE_ID
		{
			newLeafNode(lv_rolename1_1_0, grammarAccess.getInlineAssociationAccess().getRolename1IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInlineAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rolename1",
        		lv_rolename1_1_0, 
        		"ID");
	    }

)
)?(	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInlineAssociationAccess().getHyphenMinusGreaterThanSignKeyword_2_0());
    }

    |	otherlv_3='--' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInlineAssociationAccess().getHyphenMinusHyphenMinusKeyword_2_1());
    }

    |	otherlv_4='<-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInlineAssociationAccess().getLessThanSignHyphenMinusKeyword_2_2());
    }

    |	otherlv_5='><' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInlineAssociationAccess().getGreaterThanSignLessThanSignKeyword_2_3());
    }
)
    { 
        newCompositeNode(grammarAccess.getInlineAssociationAccess().getMultiplicityParserRuleCall_3()); 
    }
rulemultiplicity
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_type_7_0=RULE_ID
		{
			newLeafNode(lv_type_7_0, grammarAccess.getInlineAssociationAccess().getTypeIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInlineAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_7_0, 
        		"ID");
	    }

)
)(
(
		lv_rolename2_8_0=RULE_ID
		{
			newLeafNode(lv_rolename2_8_0, grammarAccess.getInlineAssociationAccess().getRolename2IDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInlineAssociationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rolename2",
        		lv_rolename2_8_0, 
        		"ID");
	    }

)
)?	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInlineAssociationAccess().getSemicolonKeyword_6());
    }
)
;







// Entry rule entryRuleAssociationClassDefinition
entryRuleAssociationClassDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssociationClassDefinitionRule()); }
	 iv_ruleAssociationClassDefinition=ruleAssociationClassDefinition 
	 { $current=$iv_ruleAssociationClassDefinition.current; } 
	 EOF 
;

// Rule AssociationClassDefinition
ruleAssociationClassDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='associationClass' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssociationClassDefinitionAccess().getAssociationClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAssociationClassDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssociationClassDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssociationClassDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssociationClassDefinitionAccess().getAssociationClassContentAssociationClassContentParserRuleCall_3_0()); 
	    }
		lv_associationClassContent_3_0=ruleAssociationClassContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssociationClassDefinitionRule());
	        }
       		add(
       			$current, 
       			"associationClassContent",
        		lv_associationClassContent_3_0, 
        		"AssociationClassContent");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssociationClassDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSoftwarePattern
entryRuleSoftwarePattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSoftwarePatternRule()); }
	 iv_ruleSoftwarePattern=ruleSoftwarePattern 
	 { $current=$iv_ruleSoftwarePattern.current; } 
	 EOF 
;

// Rule SoftwarePattern
ruleSoftwarePattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSoftwarePatternAccess().getIsAParserRuleCall_0()); 
    }
    this_isA_0=ruleisA
    { 
        $current = $this_isA_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSoftwarePatternAccess().getSingletonParserRuleCall_1()); 
    }
    this_Singleton_1=ruleSingleton
    { 
        $current = $this_Singleton_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSoftwarePatternAccess().getKeyDefinitionParserRuleCall_2()); 
    }
    this_KeyDefinition_2=ruleKeyDefinition
    { 
        $current = $this_KeyDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSoftwarePatternAccess().getCodeInjectionParserRuleCall_3()); 
    }
    this_CodeInjection_3=ruleCodeInjection
    { 
        $current = $this_CodeInjection_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleisA
entryRuleisA returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsARule()); }
	 iv_ruleisA=ruleisA 
	 { $current=$iv_ruleisA.current; } 
	 EOF 
;

// Rule isA
ruleisA returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='isA' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIsAAccess().getIsAKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsARule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIsAAccess().getExtendsClassUmpleElementCrossReference_1_0()); 
	}

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIsAAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsARule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getIsAAccess().getExtendsClassUmpleElementCrossReference_2_1_0()); 
	}

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIsAAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleSingleton
entryRuleSingleton returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingletonRule()); }
	 iv_ruleSingleton=ruleSingleton 
	 { $current=$iv_ruleSingleton.current; } 
	 EOF 
;

// Rule Singleton
ruleSingleton returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_singleton_0_0=	'singleton' 
    {
        newLeafNode(lv_singleton_0_0, grammarAccess.getSingletonAccess().getSingletonSingletonKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingletonRule());
	        }
       		setWithLastConsumed($current, "singleton", true, "singleton");
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSingletonAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleKeyDefinition
entryRuleKeyDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyDefinitionRule()); }
	 iv_ruleKeyDefinition=ruleKeyDefinition 
	 { $current=$iv_ruleKeyDefinition.current; } 
	 EOF 
;

// Rule KeyDefinition
ruleKeyDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='key' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyDefinitionAccess().getKeyKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getKeyDefinitionAccess().getKeyAction_1(),
            $current);
    }
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKeyDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		lv_keys_3_0=RULE_ID
		{
			newLeafNode(lv_keys_3_0, grammarAccess.getKeyDefinitionAccess().getKeysIDTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyDefinitionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"keys",
        		lv_keys_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getKeyDefinitionAccess().getCommaKeyword_3_1_0());
    }
(
(
		lv_keys_5_0=RULE_ID
		{
			newLeafNode(lv_keys_5_0, grammarAccess.getKeyDefinitionAccess().getKeysIDTerminalRuleCall_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyDefinitionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"keys",
        		lv_keys_5_0, 
        		"ID");
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getKeyDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCodeInjection
entryRuleCodeInjection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeInjectionRule()); }
	 iv_ruleCodeInjection=ruleCodeInjection 
	 { $current=$iv_ruleCodeInjection.current; } 
	 EOF 
;

// Rule CodeInjection
ruleCodeInjection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='before' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCodeInjectionAccess().getBeforeKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCodeInjectionAccess().getNameExtendedIDParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCodeInjectionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_code_2_0=RULE_STRING
		{
			newLeafNode(lv_code_2_0, grammarAccess.getCodeInjectionAccess().getCodeSTRINGTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCodeInjectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_2_0, 
        		"STRING");
	    }

)
))
    |(	otherlv_3='after' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCodeInjectionAccess().getAfterKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCodeInjectionAccess().getNameExtendedIDParserRuleCall_1_1_0()); 
	    }
		lv_name_4_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCodeInjectionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_code_5_0=RULE_STRING
		{
			newLeafNode(lv_code_5_0, grammarAccess.getCodeInjectionAccess().getCodeSTRINGTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCodeInjectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_5_0, 
        		"STRING");
	    }

)
)))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_autounique_0_0=	'autounique' 
    {
        newLeafNode(lv_autounique_0_0, grammarAccess.getAttributeAccess().getAutouniqueAutouniqueKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "autounique", true, "autounique");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getNameExtendedIDParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getSemicolonKeyword_0_2());
    }
)
    |((
(
		lv_unique_3_0=	'unique' 
    {
        newLeafNode(lv_unique_3_0, grammarAccess.getAttributeAccess().getUniqueUniqueKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "unique", true, "unique");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getModifierModifierEnumRuleCall_1_1_0()); 
	    }
		lv_modifier_4_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_4_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getTypeUmpleAttributeTypeParserRuleCall_1_2_0_0_0()); 
	    }
		lv_type_5_0=ruleUmpleAttributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"UmpleAttributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_list_6_0=	'[]' 
    {
        newLeafNode(lv_list_6_0, grammarAccess.getAttributeAccess().getListLeftSquareBracketRightSquareBracketKeyword_1_2_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "list", true, "[]");
	    }

)
)?)
    |((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getAttributeAccess().getObjectClassDefinitionCrossReference_1_2_1_0_0()); 
	}

)
)(
(
		lv_list_8_0=	'[]' 
    {
        newLeafNode(lv_list_8_0, grammarAccess.getAttributeAccess().getListLeftSquareBracketRightSquareBracketKeyword_1_2_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "list", true, "[]");
	    }

)
)?))?(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getNameExtendedIDParserRuleCall_1_3_0()); 
	    }
		lv_name_9_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10='=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getValueUmplePrimitiveTypeParserRuleCall_1_4_1_0()); 
	    }
		lv_value_11_0=ruleUmplePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_11_0, 
        		"UmplePrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAttributeAccess().getSemicolonKeyword_1_5());
    }
))
;





// Entry rule entryRuleStateMachineDefinition
entryRuleStateMachineDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateMachineDefinitionRule()); }
	 iv_ruleStateMachineDefinition=ruleStateMachineDefinition 
	 { $current=$iv_ruleStateMachineDefinition.current; } 
	 EOF 
;

// Rule StateMachineDefinition
ruleStateMachineDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='statemachine' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateMachineDefinitionAccess().getStatemachineKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateMachineDefinitionAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateMachineDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateMachineDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateMachineDefinitionAccess().getStatesStateParserRuleCall_3_0()); 
	    }
		lv_states_3_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateMachineDefinitionRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateMachineDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleStateMachine
entryRuleStateMachine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateMachineRule()); }
	 iv_ruleStateMachine=ruleStateMachine 
	 { $current=$iv_ruleStateMachine.current; } 
	 EOF 
;

// Rule StateMachine
ruleStateMachine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateMachineAccess().getEnumParserRuleCall_0()); 
    }
    this_Enum_0=ruleEnum
    { 
        $current = $this_Enum_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateMachineAccess().getInlineStateMachineParserRuleCall_1()); 
    }
    this_InlineStateMachine_1=ruleInlineStateMachine
    { 
        $current = $this_InlineStateMachine_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateMachineAccess().getReferencedStateMachineParserRuleCall_2()); 
    }
    this_ReferencedStateMachine_2=ruleReferencedStateMachine
    { 
        $current = $this_ReferencedStateMachine_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInlineStateMachine
entryRuleInlineStateMachine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInlineStateMachineRule()); }
	 iv_ruleInlineStateMachine=ruleInlineStateMachine 
	 { $current=$iv_ruleInlineStateMachine.current; } 
	 EOF 
;

// Rule InlineStateMachine
ruleInlineStateMachine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInlineStateMachineAccess().getNameExtendedIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInlineStateMachineRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInlineStateMachineAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInlineStateMachineAccess().getStatesStateParserRuleCall_2_0()); 
	    }
		lv_states_2_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInlineStateMachineRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_2_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInlineStateMachineAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleReferencedStateMachine
entryRuleReferencedStateMachine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferencedStateMachineRule()); }
	 iv_ruleReferencedStateMachine=ruleReferencedStateMachine 
	 { $current=$iv_ruleReferencedStateMachine.current; } 
	 EOF 
;

// Rule ReferencedStateMachine
ruleReferencedStateMachine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReferencedStateMachineAccess().getNameExtendedIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferencedStateMachineRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferencedStateMachineAccess().getAsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferencedStateMachineRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getReferencedStateMachineAccess().getMachineStateMachineDefinitionCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	 iv_ruleEnum=ruleEnum 
	 { $current=$iv_ruleEnum.current; } 
	 EOF 
;

// Rule Enum
ruleEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getNameExtendedIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getStatesExtendedIDParserRuleCall_2_0()); 
	    }
		lv_states_2_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_2_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getStatesExtendedIDParserRuleCall_3_1_0()); 
	    }
		lv_states_4_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_4_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getNameExtendedIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1());
    }
((	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateAccess().getAsteriskKeyword_2_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getStatesStateEntityParserRuleCall_2_1_0()); 
	    }
		lv_states_3_0=ruleStateEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"StateEntity");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStateEntity
entryRuleStateEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateEntityRule()); }
	 iv_ruleStateEntity=ruleStateEntity 
	 { $current=$iv_ruleStateEntity.current; } 
	 EOF 
;

// Rule StateEntity
ruleStateEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateEntityAccess().getTransitionParserRuleCall_0()); 
    }
    this_Transition_0=ruleTransition
    { 
        $current = $this_Transition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateEntityAccess().getEntryOrExitActionParserRuleCall_1()); 
    }
    this_EntryOrExitAction_1=ruleEntryOrExitAction
    { 
        $current = $this_EntryOrExitAction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getStateEntityAccess().getActivityParserRuleCall_2_0()); 
    }
    this_Activity_2=ruleActivity
    { 
        $current = $this_Activity_2.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateEntityAccess().getHyphenMinusGreaterThanSignKeyword_2_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getStateEntityAccess().getExtendedIDParserRuleCall_2_1_1()); 
    }
ruleextendedID
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStateEntityAccess().getSemicolonKeyword_2_1_2());
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getStateEntityAccess().getStateParserRuleCall_3()); 
    }
    this_State_6=ruleState
    { 
        $current = $this_State_6.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getStateEntityAccess().getExpressionParserRuleCall_4_0()); 
    }
    this_expression_7=ruleexpression
    { 
        $current = $this_expression_7.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStateEntityAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTransitionAccess().getGuardParserRuleCall_0_0()); 
    }
    this_Guard_0=ruleGuard
    { 
        $current = $this_Guard_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getEventsEventDefinitionParserRuleCall_0_1_0()); 
	    }
		lv_events_1_0=ruleEventDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"events",
        		lv_events_1_0, 
        		"EventDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAActionParserRuleCall_0_3_0()); 
	    }
		lv_a_3_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_3_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getStateNameExtendedIDParserRuleCall_0_4_0()); 
	    }
		lv_stateName_4_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"stateName",
        		lv_stateName_4_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getSemicolonKeyword_0_5());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getTransitionAccess().getEventDefinitionParserRuleCall_1_0()); 
    }
    this_EventDefinition_6=ruleEventDefinition
    { 
        $current = $this_EventDefinition_6.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getGGuardParserRuleCall_1_1_0()); 
	    }
		lv_g_7_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"g",
        		lv_g_7_0, 
        		"Guard");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8='->' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAActionParserRuleCall_1_3_0()); 
	    }
		lv_a_9_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_9_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getStateNameExtendedIDParserRuleCall_1_4_0()); 
	    }
		lv_stateName_10_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"stateName",
        		lv_stateName_10_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransitionAccess().getSemicolonKeyword_1_5());
    }
))
;





// Entry rule entryRuleEventDefinition
entryRuleEventDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDefinitionRule()); }
	 iv_ruleEventDefinition=ruleEventDefinition 
	 { $current=$iv_ruleEventDefinition.current; } 
	 EOF 
;

// Rule EventDefinition
ruleEventDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEventDefinitionAccess().getAfterEveryEventParserRuleCall_0()); 
    }
    this_AfterEveryEvent_0=ruleAfterEveryEvent
    { 
        $current = $this_AfterEveryEvent_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEventDefinitionAccess().getAfterEventParserRuleCall_1()); 
    }
    this_AfterEvent_1=ruleAfterEvent
    { 
        $current = $this_AfterEvent_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEventDefinitionAccess().getEventParserRuleCall_2()); 
    }
    this_Event_2=ruleEvent
    { 
        $current = $this_Event_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getNameExtendedIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAfterEveryEvent
entryRuleAfterEveryEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterEveryEventRule()); }
	 iv_ruleAfterEveryEvent=ruleAfterEveryEvent 
	 { $current=$iv_ruleAfterEveryEvent.current; } 
	 EOF 
;

// Rule AfterEveryEvent
ruleAfterEveryEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='afterEvery' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAfterEveryEventAccess().getAfterEveryKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAfterEveryEventAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterEveryEventAccess().getNameExtendedIDParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterEveryEventRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAfterEveryEventAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAfterEvent
entryRuleAfterEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterEventRule()); }
	 iv_ruleAfterEvent=ruleAfterEvent 
	 { $current=$iv_ruleAfterEvent.current; } 
	 EOF 
;

// Rule AfterEvent
ruleAfterEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wait' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAfterEventAccess().getWaitKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAfterEventAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterEventAccess().getNameExtendedIDParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterEventRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAfterEventAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='/' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActionAccess().getSolidusKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getCodeBlockParserRuleCall_1_0()); 
	    }
		lv_code_1_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"code",
        		lv_code_1_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEntryOrExitAction
entryRuleEntryOrExitAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntryOrExitActionRule()); }
	 iv_ruleEntryOrExitAction=ruleEntryOrExitAction 
	 { $current=$iv_ruleEntryOrExitAction.current; } 
	 EOF 
;

// Rule EntryOrExitAction
ruleEntryOrExitAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_type_0_0=	'entry' 
    {
        newLeafNode(lv_type_0_0, grammarAccess.getEntryOrExitActionAccess().getTypeEntryKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntryOrExitActionRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_0, "entry");
	    }

)
)
    |(
(
		lv_type_1_0=	'exit' 
    {
        newLeafNode(lv_type_1_0, grammarAccess.getEntryOrExitActionAccess().getTypeExitKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntryOrExitActionRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_1_0, "exit");
	    }

)
))	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEntryOrExitActionAccess().getSolidusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntryOrExitActionAccess().getActionCodeBlockParserRuleCall_2_0()); 
	    }
		lv_actionCode_3_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntryOrExitActionRule());
	        }
       		set(
       			$current, 
       			"actionCode",
        		lv_actionCode_3_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleActivity
entryRuleActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActivityRule()); }
	 iv_ruleActivity=ruleActivity 
	 { $current=$iv_ruleActivity.current; } 
	 EOF 
;

// Rule Activity
ruleActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActivityAccess().getDoKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActivityAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActivityAccess().getCodeBlockParserRuleCall_2_0()); 
	    }
		lv_code_2_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActivityRule());
	        }
       		set(
       			$current, 
       			"code",
        		lv_code_2_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getActivityAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	 iv_ruleGuard=ruleGuard 
	 { $current=$iv_ruleGuard.current; } 
	 EOF 
;

// Rule Guard
ruleGuard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGuardAccess().getLeftSquareBracketKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getGuardAccess().getGuardCodeParserRuleCall_1()); 
    }
    this_GuardCode_1=ruleGuardCode
    { 
        $current = $this_GuardCode_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGuardAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleGuardCode
entryRuleGuardCode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardCodeRule()); }
	 iv_ruleGuardCode=ruleGuardCode 
	 { $current=$iv_ruleGuardCode.current; } 
	 EOF 
;

// Rule GuardCode
ruleGuardCode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getGuardCodeAccess().getExpressionParserRuleCall()); 
    }
    this_expression_0=ruleexpression
    { 
        $current = $this_expression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePosition
entryRulePosition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPositionRule()); }
	 iv_rulePosition=rulePosition 
	 { $current=$iv_rulePosition.current; } 
	 EOF 
;

// Rule Position
rulePosition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPositionAccess().getAssociationPositionParserRuleCall_0()); 
    }
    this_AssociationPosition_0=ruleAssociationPosition
    { 
        $current = $this_AssociationPosition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPositionAccess().getElementPositionParserRuleCall_1()); 
    }
    this_ElementPosition_1=ruleElementPosition
    { 
        $current = $this_ElementPosition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleElementPosition
entryRuleElementPosition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementPositionRule()); }
	 iv_ruleElementPosition=ruleElementPosition 
	 { $current=$iv_ruleElementPosition.current; } 
	 EOF 
;

// Rule ElementPosition
ruleElementPosition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='position' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElementPositionAccess().getPositionKeyword_0());
    }
(
(
		lv_x_1_0=RULE_INT
		{
			newLeafNode(lv_x_1_0, grammarAccess.getElementPositionAccess().getXINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementPositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_1_0, 
        		"INT");
	    }

)
)(
(
		lv_y_2_0=RULE_INT
		{
			newLeafNode(lv_y_2_0, grammarAccess.getElementPositionAccess().getYINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementPositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"y",
        		lv_y_2_0, 
        		"INT");
	    }

)
)(
(
		lv_width_3_0=RULE_INT
		{
			newLeafNode(lv_width_3_0, grammarAccess.getElementPositionAccess().getWidthINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementPositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"width",
        		lv_width_3_0, 
        		"INT");
	    }

)
)(
(
		lv_height_4_0=RULE_INT
		{
			newLeafNode(lv_height_4_0, grammarAccess.getElementPositionAccess().getHeightINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementPositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"height",
        		lv_height_4_0, 
        		"INT");
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getElementPositionAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleAssociationPosition
entryRuleAssociationPosition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssociationPositionRule()); }
	 iv_ruleAssociationPosition=ruleAssociationPosition 
	 { $current=$iv_ruleAssociationPosition.current; } 
	 EOF 
;

// Rule AssociationPosition
ruleAssociationPosition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='position.association' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssociationPositionAccess().getPositionAssociationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAssociationPositionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssociationPositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssociationPositionAccess().getC1CoordinateParserRuleCall_2_0()); 
	    }
		lv_c1_2_0=ruleCoordinate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssociationPositionRule());
	        }
       		set(
       			$current, 
       			"c1",
        		lv_c1_2_0, 
        		"Coordinate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssociationPositionAccess().getC2CoordinateParserRuleCall_3_0()); 
	    }
		lv_c2_3_0=ruleCoordinate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssociationPositionRule());
	        }
       		set(
       			$current, 
       			"c2",
        		lv_c2_3_0, 
        		"Coordinate");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssociationPositionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleCoordinate
entryRuleCoordinate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCoordinateRule()); }
	 iv_ruleCoordinate=ruleCoordinate 
	 { $current=$iv_ruleCoordinate.current; } 
	 EOF 
;

// Rule Coordinate
ruleCoordinate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_x_0_0=RULE_INT
		{
			newLeafNode(lv_x_0_0, grammarAccess.getCoordinateAccess().getXINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCoordinateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_0_0, 
        		"INT");
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCoordinateAccess().getCommaKeyword_1());
    }
(
(
		lv_y_2_0=RULE_INT
		{
			newLeafNode(lv_y_2_0, grammarAccess.getCoordinateAccess().getYINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCoordinateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"y",
        		lv_y_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleUmpleAttributeType
entryRuleUmpleAttributeType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUmpleAttributeTypeRule()); } 
	 iv_ruleUmpleAttributeType=ruleUmpleAttributeType 
	 { $current=$iv_ruleUmpleAttributeType.current.getText(); }  
	 EOF 
;

// Rule UmpleAttributeType
ruleUmpleAttributeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Date' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getDateKeyword_0()); 
    }

    |
	kw='Time' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getTimeKeyword_1()); 
    }

    |
	kw='Double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getDoubleKeyword_2()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getDoubleKeyword_3()); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getIntegerKeyword_4()); 
    }

    |
	kw='integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getIntegerKeyword_5()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getIntKeyword_6()); 
    }

    |
	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getBooleanKeyword_7()); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getBooleanKeyword_8()); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getStringKeyword_9()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUmpleAttributeTypeAccess().getStringKeyword_10()); 
    }
)
    ;





// Entry rule entryRuleUmplePrimitiveType
entryRuleUmplePrimitiveType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUmplePrimitiveTypeRule()); } 
	 iv_ruleUmplePrimitiveType=ruleUmplePrimitiveType 
	 { $current=$iv_ruleUmplePrimitiveType.current.getText(); }  
	 EOF 
;

// Rule UmplePrimitiveType
ruleUmplePrimitiveType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getUmplePrimitiveTypeAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getUmplePrimitiveTypeAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulemultiplicity
entryRulemultiplicity returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); } 
	 iv_rulemultiplicity=rulemultiplicity 
	 { $current=$iv_rulemultiplicity.current.getText(); }  
	 EOF 
;

// Rule multiplicity
rulemultiplicity returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicityAccess().getBoundParserRuleCall_0()); 
    }
    this_bound_0=rulebound    {
		$current.merge(this_bound_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getMultiplicityAccess().getBoundParserRuleCall_1_0()); 
    }
    this_bound_1=rulebound    {
		$current.merge(this_bound_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getMultiplicityAccess().getBoundParserRuleCall_1_2()); 
    }
    this_bound_3=rulebound    {
		$current.merge(this_bound_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulebound
entryRulebound returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoundRule()); } 
	 iv_rulebound=rulebound 
	 { $current=$iv_rulebound.current.getText(); }  
	 EOF 
;

// Rule bound
rulebound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getBoundAccess().getINTTerminalRuleCall_0()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoundAccess().getAsteriskKeyword_1()); 
    }
)
    ;







// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current; } 
	 EOF 
;

// Rule block
ruleblock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getBlocksBlockStatementParserRuleCall_2_0()); 
	    }
		lv_blocks_2_0=ruleblockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_2_0, 
        		"blockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleparExpression
entryRuleparExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParExpressionRule()); }
	 iv_ruleparExpression=ruleparExpression 
	 { $current=$iv_ruleparExpression.current; } 
	 EOF 
;

// Rule parExpression
ruleparExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_expression_1=ruleexpression
    { 
        $current = $this_expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleassignmentOperator
entryRuleassignmentOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOperatorRule()); } 
	 iv_ruleassignmentOperator=ruleassignmentOperator 
	 { $current=$iv_ruleassignmentOperator.current.getText(); }  
	 EOF 
;

// Rule assignmentOperator
ruleassignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_1()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleexpressionList
entryRuleexpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleexpressionList=ruleexpressionList 
	 { $current=$iv_ruleexpressionList.current; } 
	 EOF 
;

// Rule expressionList
ruleexpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpression1ConditionalExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleconditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"conditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentOperatorParserRuleCall_1_0()); 
    }
ruleassignmentOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpression2ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression2_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleconditionalExpression
entryRuleconditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleconditionalExpression=ruleconditionalExpression 
	 { $current=$iv_ruleconditionalExpression.current; } 
	 EOF 
;

// Rule conditionalExpression
ruleconditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression1ConditionalOrExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleconditionalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"conditionalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression2ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression2_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression3ExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expression3_4_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression3",
        		lv_expression3_4_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleconditionalOrExpression
entryRuleconditionalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalOrExpressionRule()); }
	 iv_ruleconditionalOrExpression=ruleconditionalOrExpression 
	 { $current=$iv_ruleconditionalOrExpression.current; } 
	 EOF 
;

// Rule conditionalOrExpression
ruleconditionalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpression1ConditionalAndExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleconditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"conditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpressionRestConditionalAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressionRest_2_0=ruleconditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"expressionRest",
        		lv_expressionRest_2_0, 
        		"conditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleconditionalAndExpression
entryRuleconditionalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalAndExpressionRule()); }
	 iv_ruleconditionalAndExpression=ruleconditionalAndExpression 
	 { $current=$iv_ruleconditionalAndExpression.current; } 
	 EOF 
;

// Rule conditionalAndExpression
ruleconditionalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpression1EqualityExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleequalityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"equalityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpressionRestEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressionRest_2_0=ruleequalityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"expressionRest",
        		lv_expressionRest_2_0, 
        		"equalityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleequalityExpression
entryRuleequalityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleequalityExpression=ruleequalityExpression 
	 { $current=$iv_ruleequalityExpression.current; } 
	 EOF 
;

// Rule equalityExpression
ruleequalityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpression1RelationalExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"relationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='==' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEqualityExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0());
    }

    |	otherlv_2='!=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpressionRestRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressionRest_3_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"expressionRest",
        		lv_expressionRest_3_0, 
        		"relationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerelationalExpression
entryRulerelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_rulerelationalExpression=rulerelationalExpression 
	 { $current=$iv_rulerelationalExpression.current; } 
	 EOF 
;

// Rule relationalExpression
rulerelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpression1AdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"additiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalOpParserRuleCall_1_0()); 
    }
rulerelationalOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpressionRestAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressionRest_2_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"expressionRest",
        		lv_expressionRest_2_0, 
        		"additiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerelationalOp
entryRulerelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_rulerelationalOp=rulerelationalOp 
	 { $current=$iv_rulerelationalOp.current.getText(); }  
	 EOF 
;

// Rule relationalOp
rulerelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleadditiveExpression
entryRuleadditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleadditiveExpression=ruleadditiveExpression 
	 { $current=$iv_ruleadditiveExpression.current; } 
	 EOF 
;

// Rule additiveExpression
ruleadditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpression1MultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"multiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0());
    }

    |	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpressionRestMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressionRest_3_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"expressionRest",
        		lv_expressionRest_3_0, 
        		"multiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulemultiplicativeExpression
entryRulemultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_rulemultiplicativeExpression=rulemultiplicativeExpression 
	 { $current=$iv_rulemultiplicativeExpression.current; } 
	 EOF 
;

// Rule multiplicativeExpression
rulemultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpression1UnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_1_0_0());
    }

    |	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_1_0_1());
    }

    |	otherlv_3='%' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicativeExpressionAccess().getPercentSignKeyword_1_0_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpressionRestUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressionRest_4_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"expressionRest",
        		lv_expressionRest_4_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleunaryExpression
entryRuleunaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleunaryExpression=ruleunaryExpression 
	 { $current=$iv_ruleunaryExpression.current; } 
	 EOF 
;

// Rule unaryExpression
ruleunaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_0_1_0()); 
	    }
		lv_exp1_1_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"exp1",
        		lv_exp1_1_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp1_3_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"exp1",
        		lv_exp1_3_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='++' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryExpressionAccess().getPlusSignPlusSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_2_1_0()); 
	    }
		lv_exp1_5_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"exp1",
        		lv_exp1_5_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_6='--' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryExpressionAccess().getHyphenMinusHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp1UnaryExpressionParserRuleCall_3_1_0()); 
	    }
		lv_exp1_7_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"exp1",
        		lv_exp1_7_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExp2UnaryExpressionNotPlusMinusParserRuleCall_4_0()); 
	    }
		lv_exp2_8_0=ruleunaryExpressionNotPlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"exp2",
        		lv_exp2_8_0, 
        		"unaryExpressionNotPlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleunaryExpressionNotPlusMinus
entryRuleunaryExpressionNotPlusMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusRule()); }
	 iv_ruleunaryExpressionNotPlusMinus=ruleunaryExpressionNotPlusMinus 
	 { $current=$iv_ruleunaryExpressionNotPlusMinus.current; } 
	 EOF 
;

// Rule unaryExpressionNotPlusMinus
ruleunaryExpressionNotPlusMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='~' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getTildeKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_0_1()); 
    }
    this_unaryExpression_1=ruleunaryExpression
    { 
        $current = $this_unaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_1_1()); 
    }
    this_unaryExpression_3=ruleunaryExpression
    { 
        $current = $this_unaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPrimaryParserRuleCall_2_0()); 
    }
    this_primary_4=ruleprimary
    { 
        $current = $this_primary_4.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_5='++' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPlusSignPlusSignKeyword_2_1_0());
    }

    |	otherlv_6='--' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getHyphenMinusHyphenMinusKeyword_2_1_1());
    }
)?))
;





// Entry rule entryRuleprimary
entryRuleprimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_ruleprimary=ruleprimary 
	 { $current=$iv_ruleprimary.current; } 
	 EOF 
;

// Rule primary
ruleprimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getParExpressionParserRuleCall_0()); 
    }
    this_parExpression_0=ruleparExpression
    { 
        $current = $this_parExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_1()); 
    }
    this_literal_1=ruleliteral
    { 
        $current = $this_literal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleliteral
entryRuleliteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleliteral=ruleliteral 
	 { $current=$iv_ruleliteral.current; } 
	 EOF 
;

// Rule literal
ruleliteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_0_0(),
            $current);
    }
)this_INT_1=RULE_INT
    { 
    newLeafNode(this_INT_1, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0_1()); 
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_1_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getDOUBLEParserRuleCall_1_1()); 
    }
ruleDOUBLE
    { 
        afterParserOrEnumRuleCall();
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_2_0(),
            $current);
    }
)this_STRING_5=RULE_STRING
    { 
    newLeafNode(this_STRING_5, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2_1()); 
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_3_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getExtendedIDParserRuleCall_3_1()); 
    }
ruleextendedID
    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getJavaFunctionCallParserRuleCall_4()); 
    }
    this_javaFunctionCall_8=rulejavaFunctionCall
    { 
        $current = $this_javaFunctionCall_8.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_5_0(),
            $current);
    }
)this_TRUE_10=RULE_TRUE
    { 
    newLeafNode(this_TRUE_10, grammarAccess.getLiteralAccess().getTRUETerminalRuleCall_5_1()); 
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_6_0(),
            $current);
    }
)this_FALSE_12=RULE_FALSE
    { 
    newLeafNode(this_FALSE_12, grammarAccess.getLiteralAccess().getFALSETerminalRuleCall_6_1()); 
    }
))
;











// Entry rule entryRulejavaFunctionDeclaration
entryRulejavaFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaFunctionDeclarationRule()); }
	 iv_rulejavaFunctionDeclaration=rulejavaFunctionDeclaration 
	 { $current=$iv_rulejavaFunctionDeclaration.current; } 
	 EOF 
;

// Rule javaFunctionDeclaration
rulejavaFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='static' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJavaFunctionDeclarationAccess().getStaticKeyword_0());
    }
)?(	otherlv_1='public' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJavaFunctionDeclarationAccess().getPublicKeyword_1_0());
    }

    |	otherlv_2='private' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJavaFunctionDeclarationAccess().getPrivateKeyword_1_1());
    }

    |	otherlv_3='protected' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJavaFunctionDeclarationAccess().getProtectedKeyword_1_2());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getReturnTypeAttributeTypeParserRuleCall_2_0_0()); 
	    }
		lv_returnType_4_0=ruleattributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_4_0, 
        		"attributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_5='void' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJavaFunctionDeclarationAccess().getVoidKeyword_2_1());
    }

    |(
(
		lv_referenceType_6_0=RULE_ID
		{
			newLeafNode(lv_referenceType_6_0, grammarAccess.getJavaFunctionDeclarationAccess().getReferenceTypeIDTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"referenceType",
        		lv_referenceType_6_0, 
        		"ID");
	    }

)
))(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getJavaFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
)((	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getJavaFunctionDeclarationAccess().getLeftParenthesisKeyword_4_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListAttributeTypeParserRuleCall_4_0_1_0_0()); 
	    }
		lv_argList_9_0=ruleattributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"argList",
        		lv_argList_9_0, 
        		"attributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListIDExtendedIDParserRuleCall_4_0_1_1_0()); 
	    }
		lv_argListID_10_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"argListID",
        		lv_argListID_10_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getJavaFunctionDeclarationAccess().getCommaKeyword_4_0_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListAttributeTypeParserRuleCall_4_0_1_2_1_0()); 
	    }
		lv_argList_12_0=ruleattributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"argList",
        		lv_argList_12_0, 
        		"attributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionDeclarationAccess().getArgListIDExtendedIDParserRuleCall_4_0_1_2_2_0()); 
	    }
		lv_argListID_13_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"argListID",
        		lv_argListID_13_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getJavaFunctionDeclarationAccess().getRightParenthesisKeyword_4_0_2());
    }
)
    |	otherlv_15='()' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getJavaFunctionDeclarationAccess().getLeftParenthesisRightParenthesisKeyword_4_1());
    }
))
;





// Entry rule entryRulejavaFunctionDefinition
entryRulejavaFunctionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaFunctionDefinitionRule()); }
	 iv_rulejavaFunctionDefinition=rulejavaFunctionDefinition 
	 { $current=$iv_rulejavaFunctionDefinition.current; } 
	 EOF 
;

// Rule javaFunctionDefinition
rulejavaFunctionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionDefinitionAccess().getDeclJavaFunctionDeclarationParserRuleCall_0_0()); 
	    }
		lv_decl_0_0=rulejavaFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"decl",
        		lv_decl_0_0, 
        		"javaFunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionDefinitionAccess().getCodeBlockParserRuleCall_1_0()); 
	    }
		lv_code_1_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"code",
        		lv_code_1_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulejavaFunctionCall
entryRulejavaFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaFunctionCallRule()); }
	 iv_rulejavaFunctionCall=rulejavaFunctionCall 
	 { $current=$iv_rulejavaFunctionCall.current; } 
	 EOF 
;

// Rule javaFunctionCall
rulejavaFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionCallAccess().getNameExtendedIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionCallRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJavaFunctionCallAccess().getLeftParenthesisKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFunctionCallAccess().getArgsExpressionListParserRuleCall_1_0_1_0()); 
	    }
		lv_args_2_0=ruleexpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFunctionCallRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"expressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJavaFunctionCallAccess().getRightParenthesisKeyword_1_0_2());
    }
)
    |	otherlv_4='()' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getJavaFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_1_1());
    }
))
;





// Entry rule entryRuleblockStatement
entryRuleblockStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	 iv_ruleblockStatement=ruleblockStatement 
	 { $current=$iv_ruleblockStatement.current; } 
	 EOF 
;

// Rule blockStatement
ruleblockStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getStatementParserRuleCall_0()); 
    }
    this_statement_0=rulestatement
    { 
        $current = $this_statement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getLocalVariableDeclarationStatementParserRuleCall_1()); 
    }
    this_localVariableDeclarationStatement_1=rulelocalVariableDeclarationStatement
    { 
        $current = $this_localVariableDeclarationStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulelocalVariableDeclarationStatement
entryRulelocalVariableDeclarationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationStatementRule()); }
	 iv_rulelocalVariableDeclarationStatement=rulelocalVariableDeclarationStatement 
	 { $current=$iv_rulelocalVariableDeclarationStatement.current; } 
	 EOF 
;

// Rule localVariableDeclarationStatement
rulelocalVariableDeclarationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLocalVariableDeclarationStatementAccess().getLocalVariableDeclarationParserRuleCall_0()); 
    }
    this_localVariableDeclaration_0=rulelocalVariableDeclaration
    { 
        $current = $this_localVariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalVariableDeclarationStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRulelocalVariableDeclaration
entryRulelocalVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); }
	 iv_rulelocalVariableDeclaration=rulelocalVariableDeclaration 
	 { $current=$iv_rulelocalVariableDeclaration.current; } 
	 EOF 
;

// Rule localVariableDeclaration
rulelocalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getTypeAttributeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleattributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"attributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getDecVariableDeclaratorsParserRuleCall_1_0()); 
	    }
		lv_dec_1_0=rulevariableDeclarators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_1_0, 
        		"variableDeclarators");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulevariableDeclarators
entryRulevariableDeclarators returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclaratorsRule()); }
	 iv_rulevariableDeclarators=rulevariableDeclarators 
	 { $current=$iv_rulevariableDeclarators.current; } 
	 EOF 
;

// Rule variableDeclarators
rulevariableDeclarators returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorsAccess().getVdVariableDeclaratorParserRuleCall_0_0()); 
	    }
		lv_vd_0_0=rulevariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorsRule());
	        }
       		add(
       			$current, 
       			"vd",
        		lv_vd_0_0, 
        		"variableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclaratorsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorsAccess().getVdVariableDeclaratorParserRuleCall_1_1_0()); 
	    }
		lv_vd_2_0=rulevariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorsRule());
	        }
       		add(
       			$current, 
       			"vd",
        		lv_vd_2_0, 
        		"variableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulevariableDeclarator
entryRulevariableDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclaratorRule()); }
	 iv_rulevariableDeclarator=rulevariableDeclarator 
	 { $current=$iv_rulevariableDeclarator.current; } 
	 EOF 
;

// Rule variableDeclarator
rulevariableDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getNameExtendedIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleextendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"extendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getExpExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exp_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_0()); 
    }
    this_block_0=ruleblock
    { 
        $current = $this_block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfstatementParserRuleCall_1()); 
    }
    this_ifstatement_1=ruleifstatement
    { 
        $current = $this_ifstatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForstatementParserRuleCall_2()); 
    }
    this_forstatement_2=ruleforstatement
    { 
        $current = $this_forstatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhilestatementParserRuleCall_3()); 
    }
    this_whilestatement_3=rulewhilestatement
    { 
        $current = $this_whilestatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnstatementParserRuleCall_4()); 
    }
    this_returnstatement_4=rulereturnstatement
    { 
        $current = $this_returnstatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getEndstatementParserRuleCall_5()); 
    }
    this_endstatement_5=ruleendstatement
    { 
        $current = $this_endstatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreakstatementParserRuleCall_6()); 
    }
    this_breakstatement_6=rulebreakstatement
    { 
        $current = $this_breakstatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionstatementParserRuleCall_7()); 
    }
    this_expressionstatement_7=ruleexpressionstatement
    { 
        $current = $this_expressionstatement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTrystatementParserRuleCall_8()); 
    }
    this_trystatement_8=ruletrystatement
    { 
        $current = $this_trystatement_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleendstatement
entryRuleendstatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndstatementRule()); }
	 iv_ruleendstatement=ruleendstatement 
	 { $current=$iv_ruleendstatement.current; } 
	 EOF 
;

// Rule endstatement
ruleendstatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEndstatementAccess().getEndstatementAction_0(),
            $current);
    }
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEndstatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRulebreakstatement
entryRulebreakstatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakstatementRule()); }
	 iv_rulebreakstatement=rulebreakstatement 
	 { $current=$iv_rulebreakstatement.current; } 
	 EOF 
;

// Rule breakstatement
rulebreakstatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakstatementAccess().getBreakstatementAction_0(),
            $current);
    }
)	otherlv_1='break' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreakstatementAccess().getBreakKeyword_1());
    }
	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBreakstatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleifstatement
entryRuleifstatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfstatementRule()); }
	 iv_ruleifstatement=ruleifstatement 
	 { $current=$iv_ruleifstatement.current; } 
	 EOF 
;

// Rule ifstatement
ruleifstatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfstatementAccess().getIfstatementAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfstatementAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfstatementAccess().getConditionParExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleparExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfstatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"parExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfstatementAccess().getState1StatementParserRuleCall_3_0()); 
	    }
		lv_state1_3_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfstatementRule());
	        }
       		set(
       			$current, 
       			"state1",
        		lv_state1_3_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfstatementAccess().getElseKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfstatementAccess().getState2StatementParserRuleCall_4_1_0()); 
	    }
		lv_state2_5_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfstatementRule());
	        }
       		set(
       			$current, 
       			"state2",
        		lv_state2_5_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleforstatement
entryRuleforstatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForstatementRule()); }
	 iv_ruleforstatement=ruleforstatement 
	 { $current=$iv_ruleforstatement.current; } 
	 EOF 
;

// Rule forstatement
ruleforstatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getForstatementAccess().getForstatementAction_0(),
            $current);
    }
)	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForstatementAccess().getForKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForstatementAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForstatementAccess().getControlForControlParserRuleCall_3_0()); 
	    }
		lv_control_3_0=ruleforControl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForstatementRule());
	        }
       		set(
       			$current, 
       			"control",
        		lv_control_3_0, 
        		"forControl");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForstatementAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForstatementAccess().getStateStatementParserRuleCall_5_0()); 
	    }
		lv_state_5_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForstatementRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_5_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulewhilestatement
entryRulewhilestatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhilestatementRule()); }
	 iv_rulewhilestatement=rulewhilestatement 
	 { $current=$iv_rulewhilestatement.current; } 
	 EOF 
;

// Rule whilestatement
rulewhilestatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getWhilestatementAccess().getWhilestatementAction_0(),
            $current);
    }
)	otherlv_1='while' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhilestatementAccess().getWhileKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhilestatementAccess().getConditionParExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleparExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhilestatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"parExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhilestatementAccess().getStateStatementParserRuleCall_3_0()); 
	    }
		lv_state_3_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhilestatementRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_3_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulereturnstatement
entryRulereturnstatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnstatementRule()); }
	 iv_rulereturnstatement=rulereturnstatement 
	 { $current=$iv_rulereturnstatement.current; } 
	 EOF 
;

// Rule returnstatement
rulereturnstatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnstatementAccess().getReturnstatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnstatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnstatementAccess().getRetValExpressionParserRuleCall_2_0()); 
	    }
		lv_retVal_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnstatementRule());
	        }
       		set(
       			$current, 
       			"retVal",
        		lv_retVal_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnstatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleexpressionstatement
entryRuleexpressionstatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionstatementRule()); }
	 iv_ruleexpressionstatement=ruleexpressionstatement 
	 { $current=$iv_ruleexpressionstatement.current; } 
	 EOF 
;

// Rule expressionstatement
ruleexpressionstatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionstatementAccess().getExpressionParserRuleCall_0()); 
    }
    this_expression_0=ruleexpression
    { 
        $current = $this_expression_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionstatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuletrystatement
entryRuletrystatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrystatementRule()); }
	 iv_ruletrystatement=ruletrystatement 
	 { $current=$iv_ruletrystatement.current; } 
	 EOF 
;

// Rule trystatement
ruletrystatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrystatementAccess().getTrystatementAction_0(),
            $current);
    }
)	otherlv_1='try' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrystatementAccess().getTryKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrystatementAccess().getTryBlockBlockParserRuleCall_2_0()); 
	    }
		lv_tryBlock_2_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrystatementRule());
	        }
       		set(
       			$current, 
       			"tryBlock",
        		lv_tryBlock_2_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='catch' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTrystatementAccess().getCatchKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrystatementAccess().getCatchBlockBlockParserRuleCall_4_0()); 
	    }
		lv_catchBlock_4_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrystatementRule());
	        }
       		set(
       			$current, 
       			"catchBlock",
        		lv_catchBlock_4_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleforControl
entryRuleforControl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForControlRule()); }
	 iv_ruleforControl=ruleforControl 
	 { $current=$iv_ruleforControl.current; } 
	 EOF 
;

// Rule forControl
ruleforControl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getForControlAccess().getForControlAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getInitForInitParserRuleCall_1_0()); 
	    }
		lv_init_1_0=ruleforInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_1_0, 
        		"forInit");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForControlAccess().getSemicolonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getConditionExpressionParserRuleCall_3_0()); 
	    }
		lv_condition_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_3_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForControlAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getUpdateForUpdateParserRuleCall_5_0()); 
	    }
		lv_update_5_0=ruleforUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_5_0, 
        		"forUpdate");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleforInit
entryRuleforInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInitRule()); }
	 iv_ruleforInit=ruleforInit 
	 { $current=$iv_ruleforInit.current; } 
	 EOF 
;

// Rule forInit
ruleforInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getForInitAccess().getExpressionsExpressionParserRuleCall_0_0_0()); 
	    }
		lv_expressions_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInitRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForInitAccess().getCommaKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForInitAccess().getExpressionsExpressionParserRuleCall_0_1_1_0()); 
	    }
		lv_expressions_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInitRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |
    { 
        newCompositeNode(grammarAccess.getForInitAccess().getLocalVariableDeclarationParserRuleCall_1()); 
    }
    this_localVariableDeclaration_3=rulelocalVariableDeclaration
    { 
        $current = $this_localVariableDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleforUpdate
entryRuleforUpdate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForUpdateRule()); }
	 iv_ruleforUpdate=ruleforUpdate 
	 { $current=$iv_ruleforUpdate.current; } 
	 EOF 
;

// Rule forUpdate
ruleforUpdate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getForUpdateAccess().getExpressionListParserRuleCall()); 
    }
    this_expressionList_0=ruleexpressionList
    { 
        $current = $this_expressionList_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleattributeType
entryRuleattributeType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeTypeRule()); } 
	 iv_ruleattributeType=ruleattributeType 
	 { $current=$iv_ruleattributeType.current.getText(); }  
	 EOF 
;

// Rule attributeType
ruleattributeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Date' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getDateKeyword_0()); 
    }

    |
	kw='Time' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getTimeKeyword_1()); 
    }

    |
	kw='Double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getDoubleKeyword_2()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getDoubleKeyword_3()); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getIntegerKeyword_4()); 
    }

    |
	kw='integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getIntegerKeyword_5()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getIntKeyword_6()); 
    }

    |
	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getBooleanKeyword_7()); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getBooleanKeyword_8()); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getStringKeyword_9()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getStringKeyword_10()); 
    }
)
    ;











// Entry rule entryRuleextendedID
entryRuleextendedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); } 
	 iv_ruleextendedID=ruleextendedID 
	 { $current=$iv_ruleextendedID.current.getText(); }  
	 EOF 
;

// Rule extendedID
ruleextendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;







// Entry rule entryRuleCHARS
entryRuleCHARS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCHARSRule()); } 
	 iv_ruleCHARS=ruleCHARS 
	 { $current=$iv_ruleCHARS.current.getText(); }  
	 EOF 
;

// Rule CHARS
ruleCHARS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCHARSAccess().getExtendedIDParserRuleCall_0()); 
    }
    this_extendedID_0=ruleextendedID    {
		$current.merge(this_extendedID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getCHARSAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule Modifier
ruleModifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='immutable' 
	{
        $current = grammarAccess.getModifierAccess().getIMMUTABLEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getModifierAccess().getIMMUTABLEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='settable' 
	{
        $current = grammarAccess.getModifierAccess().getSETTABLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getModifierAccess().getSETTABLEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='internal' 
	{
        $current = grammarAccess.getModifierAccess().getINTERNALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getModifierAccess().getINTERNALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='defaulted' 
	{
        $current = grammarAccess.getModifierAccess().getDEFAULTEDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getModifierAccess().getDEFAULTEDEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='const' 
	{
        $current = grammarAccess.getModifierAccess().getCONSTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getModifierAccess().getCONSTEnumLiteralDeclaration_4()); 
    }
));



RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_RUBY_FUNCTION : RULE_DEF ( options {greedy=false;} : . )*RULE_END;

RULE_DEF : 'def';

RULE_END : 'end';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


