<%@ jet package="cruise.umple.ignore" class="Ignore"%>

  public String toString()
  {
    String outputString = "";
    <%
    String customToStringPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before","toString"));
    String customToStringPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after","toString"));
    if (customToStringPrefixCode != null) 
    {
      append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customToStringPrefixCode, "    "));
    }
    if (customToStringPostfixCode != null) 
    {
      append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customToStringPostfixCode, "    "));
    }
    String ret = "";
   
    LinkedList<String> displayedAttributes = new LinkedList<String>();
    LinkedList<String> displayedStrings = new LinkedList<String>();
    LinkedList<String> displayedNonStrings = new LinkedList<String>();
    List<String> keys = new ArrayList<String>();
    for(String k: uClass.getKey().getMembers())
      keys.add(k);
    for(Attribute av: uClass.getAttributes())
    {
      if(!"String".equals(av.getType()))
        if(av.getIsAutounique() || keys.contains(av.getName()))
          displayedAttributes.addFirst(av.getName());
        else
          displayedAttributes.addLast(av.getName());
    }
    for(Attribute av: uClass.getAttributes())
    {
      if("String".equals(av.getType()))
        if(av.getIsAutounique() || keys.contains(av.getName()))
          displayedStrings.addFirst(av.getName());
        else
          displayedStrings.addLast(av.getName());
    }
    for(AssociationVariable av: uClass.getAssociationVariables())
    {
      if(!uClass.getName().equals(av.getType())){
      if("1".equals(av.getMultiplicity().getMinimum())||"0".equals(av.getMultiplicity().getMinimum())||"1".equals(av.getMultiplicity().getBound()))
      if("1".equals(av.getMultiplicity().getMaximum())||"1".equals(av.getMultiplicity().getBound()))
        if(keys.contains(av.getName()))
          displayedAttributes.addFirst(av.getName());
        else
          displayedAttributes.addLast(av.getName());
        }
    }
    for(AssociationVariable av: uClass.getAssociationVariables())
    {
      if(uClass.getName().equals(av.getType())){
      if("1".equals(av.getMultiplicity().getMinimum())||"0".equals(av.getMultiplicity().getMinimum())||"1".equals(av.getMultiplicity().getBound()))
      if("1".equals(av.getMultiplicity().getMaximum())||"1".equals(av.getMultiplicity().getBound()))
        if(keys.contains(av.getName()))
          displayedNonStrings.addFirst(av.getName());
        else
          displayedNonStrings.addLast(av.getName());
        }
    }
    ret += "super.toString() + \"[\"";
    boolean firstStr = true;
    for(String av: displayedStrings)
    {
      if(firstStr)
        firstStr = false;
      else
        ret += "+ \",\" ";
      ret += "+\n            \"" + av + "\" + \":\" + " + av + ".toString()";
    }
    ret += "+ \"]\"";
    for(String av: displayedAttributes)
    {          
      ret += " + System.getProperties().getProperty(\"line.separator\") +\n            ";      
        ret += "\"  \" + " + "\"" + av + "\" + \"=\" + " + av + ".toString().replaceAll(\"  \",\"    \")";
      
    }
    firstStr = true;
    if(displayedNonStrings.size()>0)
      ret += " + System.getProperties().getProperty(\"line.separator\")";
    for(String av: displayedNonStrings)
    {          
      ret += "+ \n            ";      
      if(firstStr)
      {
        firstStr = false;
        ret += "\"  \" + " + "\"" + "Connected \" + (" + av + "!=null ? Integer.toHexString(" + av + ".hashCode()) : \"\")";
      }
      else
        ret += "(" + av + "!=null ? \" to \" + Integer.toHexString(" + av + ".hashCode()) : \"\")";
      
    }
    ret += "\n     + outputString";
    append(stringBuffer,"\n    return {0};", ret);
    %>
  }

