<%@ jet package="cruise.umple.ignore" class="Ignore"%>
<%
    String customMinimumNumberOfPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", gen.translate("minimumNumberOfMethod",av)));
    String customMinimumNumberOfPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after", gen.translate("minimumNumberOfMethod",av)));
    %>
<% if (customMinimumNumberOfPrefixCode == null && customMinimumNumberOfPostfixCode == null) { %>
  public static int <%=gen.translate("minimumNumberOfMethod",av)%>()
  {
    return <%=av.getMultiplicity().getLowerBound()%>;
  }
<% } else { %>
  public static int <%=gen.translate("minimumNumberOfMethod",av)%>()
  {
    <% if (customMinimumNumberOfPrefixCode != null) { addUncaughtExceptionVariables(stringBuffer.toString().split("\\n").length,customMinimumNumberOfPrefixCode,gen.translate("minimumNumberOfMethod",av)); 
    append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customMinimumNumberOfPrefixCode, "    ")); } %>
    int minimum = <%=av.getMultiplicity().getLowerBound()%>;
    <% if (customMinimumNumberOfPostfixCode != null) { addUncaughtExceptionVariables(stringBuffer.toString().split("\\n").length,customMinimumNumberOfPostfixCode,gen.translate("minimumNumberOfMethod",av)); 
    append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customMinimumNumberOfPostfixCode, "    ")); } %>
    return minimum;
  }
<% } %>
