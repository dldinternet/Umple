<%@ jet package="cruise.umple.ignore" class="Ignore" %>
<%

  String customConstructorPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before","constructor"));
  String customConstructorPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after","constructor"));

  appendln(stringBuffer, "");

  String accessibility = uClass.getIsSingleton() ? "private" : "public";
  append(stringBuffer,"  {0} {1}({2})",new Object[] {accessibility, uClass.getName(), gClass.getLookup("constructorSignature")});

  String extraNote = null;
  
  appendln(stringBuffer, "");
  
  boolean hasBody = false;

  append(stringBuffer, "  {");
  if (!uClass.isRoot() && !"interface".equals(uClass.getExtendsClass().getModifier()))
  {
    appendln(stringBuffer, "");
    append(stringBuffer, "    super({0});", gClass.getParentClass().getLookup("constructorSignature_caller"));
    hasBody = true;
  }
  
  if (customConstructorPrefixCode != null)
  {
    append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customConstructorPrefixCode, "    "));
    hasBody = true;
  }

  if (uClass.getKey().isProvided())
  {
    hasBody = true;
    appendln(stringBuffer, "");
    append(stringBuffer, "    cachedHashCode = -1;");
  }
  
  for(String memberId : uClass.getKey().getMembers())
  {
    Attribute av = uClass.getAttribute(memberId);
    AssociationVariable as = uClass.getAssociationVariable(memberId);
    if (av != null  && !av.isImmutable())
    {
      hasBody = true;
      appendln(stringBuffer, "");
      append(stringBuffer, "    {0} = true;", gen.translate("attributeCanSet",av));
    }
    else if (as != null)
    {
      hasBody = true;
      appendln(stringBuffer, "");
      append(stringBuffer, "    {0} = true;", gen.translate("associationCanSet",as));
    }
  } 
  
  for (Attribute av : uClass.getAttributes())
  {
    if (av.getIsAutounique() || av.isConstant() || "theInstance".equals(gen.translate("attributeOne",av)) || av.getIsDerived())
    {
      continue;
    }
    
    TraceItem traceItem = av.getTraced("constructor",uClass);
    
    if (av.getIsList())
    {
      hasBody = true;
      %><%@ include file="constructor_AttributeAssignList.jet"%><%
    }
    else if ("defaulted".equals(av.getModifier()))
    {
      hasBody = true;
      %><%@ include file="constructor_AttributeAssignDefaulted.jet"%><% 
    }
    else if (av.isImmutable() && av.getIsLazy())
    {
      hasBody = true;
      %><%@ include file="constructor_AttributeUnassignedImmutable.jet"%><%
    }
    else if (av.isImmutable())
    {
      hasBody = true;
      %><%@ include file="constructor_AttributeAssignImmutable.jet"%><% 
    }
    else
    {
      hasBody = true;
      if(!av.getIsLazy()){
         %><%@ include file="constructor_AttributeAssign.jet"%><%
      }
      else
      {
         %><%@ include file="constructor_AttributeAssignLazy.jet"%><%
      }
    }
    
    if(traceItem!=null)
    {
%>
    ( new Thread()
    {
      public void run()
      {
        while( true )
        {
          <%= traceItem.trace(gen,av,"at_p",uClass) %>
          try
          {
            Thread.sleep(<%= traceItem.getPeriodClause() %>);
          }
          catch (InterruptedException e)
          {
            e.printStackTrace();
          }
        }
      }
    }
    ).start();<%
    }
  }

  for (Attribute av : uClass.getAttributes())
  {
    if (av.getIsAutounique())
    {
      hasBody = true;
      %><%@ include file="constructor_AttributeAssignAutounique.jet"%><%
    }
  }
  
  for (AssociationVariable av : uClass.getAssociationVariables())
  {
  	if (!av.getIsNavigable() || !av.isImmutable())
  	{
  	  continue;
  	}
    append(stringBuffer, "\n    {0} = true;", gen.translate("associationCanSet",av));
  }
  boolean doneOnce=false;
  String firstSorted = "";
  for (AssociationVariable av : uClass.getAssociationVariables()) 
  {
  	if (av.isOnlyOne() && av.getRelatedAssociation().isMany() && av.getRelatedAssociation().isSorted() && av.getIsNavigable())
  	{
  		if("".equals(firstSorted))
  		{
  			firstSorted = gen.translate("attributeOne",av) + "=" + gen.translate("parameterOne",av) + ";";
  		}
  		else
  		{
  			if(!doneOnce)
  			{
  				append(stringBuffer,"\n    {0}\n    {1}\n    {2}","// Direct set of variable needed to ensure consistency","// for multiple sorted associations",firstSorted);
  				doneOnce = true;
  			}	
  			append(stringBuffer,"\n    {0}={1};", gen.translate("attributeOne",av),gen.translate("parameterOne",av));
    	}
  	}
  }
  for (AssociationVariable av : uClass.getAssociationVariables()) 
  {
    AssociationVariable relatedAssociation = av.getRelatedAssociation();
    
    if (!av.getIsNavigable())
    {
      continue;
    }
    
    if (!relatedAssociation.getIsNavigable())
    {
      if (av.isOnlyOne())
      {
        hasBody = true;
        %><%@ include file="constructor_AssociationAssignUndirectionalOne.jet"%><%
      }
      else if (av.isOptionalOne() && av.isImmutable())
      {
        hasBody = true;
        %><%@ include file="constructor_AssociationAssignImmutableOptionalOne.jet"%><%
      }
      else if (av.isMandatoryMany())
      {
        hasBody = true;
        %><%@ include file="constructor_AssociationAssignMandatoryMany.jet"%><%
      }
      else if (av.isOptionalN() && av.isImmutable())
      {
        hasBody = true;
        %><%@ include file="constructor_AssociationAssignImmutableOptionalN.jet"%><%
      }
      else if (av.isMany() && av.isImmutable())
      {
      	hasBody = true;
        %><%@ include file="constructor_AssociationAssignImmutableOptionalMany.jet"%><%
      }
      else if (av.isMany())
      {
        hasBody = true;
        %><%@ include file="constructor_AssociationAssignOptionalMany.jet"%><%
      }
      continue;
    }
    
    if (av.isOnlyOne() && relatedAssociation.isOnlyOne())
    {
      hasBody = true;
      %><%@ include file="constructor_AssociationAssignOneToOne.jet"%><%
    }
    else if ((av.isMN() || av.isN()) && (relatedAssociation.isMandatory() || relatedAssociation.isOptionalN()))
    {
      hasBody = true;
      %><%@ include file="constructor_AssociationAssignOptionalMany.jet"%><%
    }
    else
    {
      %><%@ include file="constructor_AssociationAssignDefault.jet"%><%
    }
  }
  
  for(StateMachine sm : uClass.getStateMachines())
  {
    State state = sm.getStartState();
    if (state == null)
    {
      continue;
    }
    hasBody = true;
    for (StateMachine nestedSm : sm.getNestedStateMachines())
    {
      %><%@ include file="constructor_NestedStateMachineAssignDefault.jet"%><%
    }
    %><%@ include file="constructor_StateMachineAssignDefault.jet"%><%
  }
  
  if (customConstructorPostfixCode != null)
  {
    append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customConstructorPostfixCode, "    "));
    hasBody = true;
  }

  if (hasBody)
  {
    appendln(stringBuffer, "");
    append(stringBuffer, "  }");
  }
  else
  {
    append(stringBuffer, "}");
  }

  if (uClass.getIsSingleton())
  {
    appendln(stringBuffer, "");
    %><%@ include file="constructor_Singleton.jet"%><%
  }
%>
