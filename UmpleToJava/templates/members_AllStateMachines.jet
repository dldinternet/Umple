<%@ jet package="cruise.umple.ignore" class="Ignore" %>
<%
{
  isFirst = true;
  for(StateMachine sm : uClass.getStateMachines())
  {
    List<StateMachine> allNested = sm.getNestedStateMachines();

    if (isFirst)
    {
      appendln(stringBuffer, "");
      appendln(stringBuffer, "");
      append(stringBuffer,"  //{0} State Machines", uClass.getName());
      isFirst = false;
    }
  
    append(stringBuffer, "\n  enum {0} { {1} }", gen.translate("type",sm), gen.translate("listStates",sm));

    for (StateMachine nestedSm : allNested)
    {
      append(stringBuffer, "\n  enum {0} { {1} }", gen.translate("type",nestedSm), gen.translate("listStates",nestedSm));
    }
    
    append(stringBuffer, "\n  private {0} {1};", gen.translate("type",sm), gen.translate("stateMachineOne", sm));
    for (StateMachine nestedSm : allNested)
    {
      append(stringBuffer, "\n  private {0} {1};", gen.translate("type",nestedSm), gen.translate("stateMachineOne", nestedSm));
    }

    if (sm.isQueued() || sm.isPooled())
    {
      boolean nestedSMhasEvent=false;
      append(stringBuffer,"\n  ");
      append(stringBuffer,"\n  //enumeration type of messages accepted by {0}", uClass.getName());
      if (!sm.getNestedStateMachines().isEmpty() && !sm.getEvents().isEmpty())
      {
        for(StateMachine nestedSm : allNested){
           for (Event event : nestedSm.getEvents())
           {
        	    if(event.getIsInternal() == false && event != null){
        			nestedSMhasEvent=true; 
        		}
        	}
    	}
    	
    	if (nestedSMhasEvent == true){
    	  append(stringBuffer, "\n  enum MessageType { {0} }", gen.translate("listWithAutoTransitionAndNestedEvents",sm));
    	  nestedSMhasEvent=false;
    	}
    	else
    	{
    	  append(stringBuffer, "\n  enum MessageType { {0} }", gen.translate("listEvents",sm));
    	}  
      }
      else if (!sm.getNestedStateMachines().isEmpty() && sm.getEvents().isEmpty())
      {
        append(stringBuffer, "\n  enum MessageType { {0} }", gen.translate("listEventsNSM",sm));
      }
      else
      {
        append(stringBuffer, "\n  enum MessageType { {0} }", gen.translate("listEvents",sm));
      }
      append(stringBuffer,"\n  ");
      append(stringBuffer,"\n  MessagePool pool;");
      append(stringBuffer,"\n  Thread removal;");
            
    }
    if (sm.isPooled()){
      append(stringBuffer,"\n");
      append(stringBuffer,"\n  // A list of message types for each state of the {0}", uClass.getName());
      append(stringBuffer,"\n  {0}",gen.translate("listMessageTypesStates",sm));
    }
  }
}
%>