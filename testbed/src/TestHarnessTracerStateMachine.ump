
namespace cruise.tracer.test;

class GarageDoorA
{
    // UML state machine digram for a Garage door, written in Umple
    GarageDoor {
      	
      	Open { buttonOrObstacle -> Closing;  }
      	
      	Closing {
          buttonOrObstacle -> Opening;
          reachBottom -> Closed;
      	}

      	Closed { buttonOrObstacle -> Opening; }

      	Opening {
          buttonOrObstacle -> HalfOpen;
          reachTop -> Open;
      	}

      	HalfOpen { buttonOrObstacle -> Opening; }
    }
    
    // trace a single state only
    trace Closing;
}

class GarageDoorB
{
    GarageDoor {
      	
      	Open { 
          buttonOrObstacle -> Closing;
          entry / { closeGarageLights(); }
          }
      	
      	Closing {
          buttonOrObstacle -> Opening;
          reachBottom -> Closed;
      	}

      	Closed {
          buttonOrObstacle -> Opening;
          entry / { openGarageLights(); }
          }

      	Opening {
          buttonOrObstacle -> HalfOpen;
          reachTop -> Open;
      	}

      	HalfOpen { buttonOrObstacle -> Opening; }
    }
    
    // trace state entry
    trace entry Closed;
  
    void openGarageLights() {}
    void closeGarageLights() {}
}

class GarageDoorC
{
    GarageDoor {
      	
      	Open { 
          buttonOrObstacle -> Closing;
          
          }
      	
      	Closing {
          buttonOrObstacle -> Opening;
          reachBottom -> Closed;
      	}

      	Closed {
          buttonOrObstacle -> Opening;
          entry / { openGarageLights(); }
          exit / { closeGarageLights(); }
          }

      	Opening {
          buttonOrObstacle -> HalfOpen;
          reachTop -> Open;
      	}

      	HalfOpen { buttonOrObstacle -> Opening; }
    }
    
    // trace state exit
    trace exit Closed;
  
    void openGarageLights() {}
    void closeGarageLights() {}
}

class GarageDoorD
{
    // UML state machine digram for a Garage door, written in Umple
    GarageDoor {
      	
      	Open { buttonOrObstacle -> Closing;  }
      	
      	Closing {
          buttonOrObstacle -> Opening;
          reachBottom -> Closed;
      	}

      	Closed { buttonOrObstacle -> Opening; }

      	Opening {
          buttonOrObstacle -> HalfOpen;
          reachTop -> Open;
      	}

      	HalfOpen { buttonOrObstacle -> Opening; }
    }
    
    // trace event
    trace buttonOrObstacle;
}

class GarageDoorZ
{
    // UML state machine digram for a Garage door, written in Umple
    GarageDoor {
      	
      	Open { buttonOrObstacle -> Closing;  }
      	
      	Closing {
          buttonOrObstacle -> Opening;
          reachBottom -> Closed;
      	}

      	Closed { buttonOrObstacle -> Opening; }

      	Opening {
          buttonOrObstacle -> HalfOpen;
          reachTop -> Open;
      	}

      	HalfOpen { buttonOrObstacle -> Opening; }
    }
    
    // trace whole state machine
    trace GarageDoor;
}

class LightFixtureA
{
  
  status {
    Open {
      flip -> Closed;
    }
    Closed {
      flip -> Open;
      do 
      {  
        Thread.sleep(400);
        measureClose();
      }
    }
    // trace state with do activity
    trace Closed;
  }
  
  void measureClose() {};
}


class LightFixtureB
{ 
  bulb 
  {
    Off { flip -> On; }
    On 
    {
      flip -> Off;
      Normal { touch -> Dimmed; }
      Dimmed { touch -> Off; }
    }
  }
  // trace state with its nested state
  trace On;
}
