<%@ jet package="cruise.umple.ignore" class="Ignore"%>
<%
  String existingToNewMap = StringFormatter.format("{0}ToNew{1}", relatedAssociation.getName(), av.getUpperCaseName());
  String orCheckMaxBound = av.isStar() ? "" : StringFormatter.format(" || {0}.length > {1}()", gen.translate("parameterMany",av), gen.translate("maximumNumberOfMethod",av));
%>
  bool <%=gen.translate("type",uClass)%>::<%=gen.translate("setManyMethod",av)%>(<%=gen.translate("type",av)%>... <%=gen.translate("parameterMany",av)%>)
  {
    bool wasSet = false;
    <% if (customSetManyPrefixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customSetManyPrefixCode, "    ")); } %>
    if (<%=gen.translate("parameterMany",av)%>.length < <%=gen.translate("minimumNumberOfMethod",av)%>()<%=orCheckMaxBound%>)
    {
      <% if (customSetManyPostfixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "      ")); } %>
      return wasSet;
    }

    vector<<%=gen.translate("type",av)%>*> <%=gen.translate("parameterCheckNewMany",av)%>;
	
    map<<%=gen.relatedTranslate("type",av)%>,int> <%=existingToNewMap%>;
    for (<%=gen.translate("type",av)%> <%=gen.translate("parameterOne",av)%> : <%=gen.translate("parameterMany",av)%>)
    {
      if (find(<%=gen.translate("parameterCheckNewMany",av)%>.begin(),<%=gen.translate("parameterCheckNewMany",av)%>.end(),<%=gen.translate("parameterOne",av)%>) != <%=gen.translate("parameterCheckNewMany",av)%>.end())
      {
        <% if (customSetManyPostfixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "        ")); } %>
        return wasSet;
      }
      else if (<%=gen.translate("parameterOne",av)%>-><%=gen.relatedTranslate("getMethod",av)%>() != NULL && this!=<%=gen.translate("parameterOne",av)%>-><%=gen.relatedTranslate("getMethod",av)%>())
      {
        <%=gen.relatedTranslate("type",av)%>* <%=gen.relatedTranslate("parameterExisting",av)%> = <%=gen.translate("parameterOne",av)%>.<%=gen.relatedTranslate("getMethod",av)%>();
        if (!<%=existingToNewMap%>.find(<%=gen.relatedTranslate("parameterExisting",av)%>))
        {
          <%=existingToNewMap%>.insert(<%=gen.relatedTranslate("parameterExisting",av)%>, new int(<%=gen.relatedTranslate("parameterExisting",av)%>-><%=gen.translate("numberOfMethod",av)%>()));
        }
        int currentCount = <%=existingToNewMap%>.find(<%=gen.relatedTranslate("parameterExisting",av)%>)->firtst;
        int nextCount = currentCount - 1;
        if (nextCount < <%=av.getMultiplicity().getLowerBound()%>)
        {
          <% if (customSetManyPostfixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "          ")); } %>
          return wasSet;
        }
        <%=existingToNewMap%>.insert(<%=gen.relatedTranslate("parameterExisting",av)%>, new int(nextCount));
      }
      <%=gen.translate("parameterCheckNewMany",av)%>.push_back(<%=gen.translate("parameterOne",av)%>);
    }

    <%=gen.translate("associationMany",av)%>.removeAll(<%=gen.translate("parameterCheckNewMany",av)%>);

    for (<%=gen.translate("type",av)%> orphan : <%=gen.translate("associationMany",av)%>)
    {
      <%=gen.relatedTranslate("setMethod",av)%>(orphan, null);
    }
    <%=gen.translate("associationMany",av)%>.clear();
    for (<%=gen.translate("type",av)%> <%=gen.translate("parameterOne",av)%> : <%=gen.translate("parameterMany",av)%>)
    {
      if (<%=gen.translate("parameterOne",av)%>.<%=gen.relatedTranslate("getMethod",av)%>() != null)
      {
        <%=gen.translate("parameterOne",av)%>.<%=gen.relatedTranslate("getMethod",av)%>()-><%=gen.translate("associationMany",av)%>.erase(<%=gen.translate("parameterOne",av)%>);
      }
      <%=gen.relatedTranslate("setMethod",av)%>(<%=gen.translate("parameterOne",av)%>, this);
      <%=gen.translate("associationMany",av)%>.push_back(<%=gen.translate("parameterOne",av)%>);
    }
    wasSet = true;
    <% if (customSetManyPostfixCode != null) { append(stringBuffer, "\n{0}",GeneratorHelper.doIndent(customSetManyPostfixCode, "    ")); } %>
    return wasSet;
  }

<%@ include file="association_GetPrivate.jet" %>