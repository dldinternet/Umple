// Example system representing aspects of a car without OBEX
// Demonstrates the composite Structure Diagram in Umple

namespace car;

class SensorData {
	isA RelativeData;
}

class WheelsData {
	isA RelativeData;
}

class MotorOilData {
	isA RelativeData;
}

class SparkPlugData {
	isA RelativeData;
}

class ParticleFilterData {
	isA RelativeData;
}

class MotorRotationSpeed  {
	public out int speed;
}

class MotorOilQuantity {
	public out int motorOilQuantity;
}

class MotorOilViscosity {
	public out int motorOilViscosity;
}


class ThrottleControl {
	public in int motorRotationSpeed;
	public out int throttleValue;
}

class Speedometer {
	public out int speed;
}


class MotorOilCheck {
	public in int motorRotationSpeed;
	public in int motorOilViscosity;
	public out boolean motorOilRenewal;
}


class ConditionCheckAdapter{
	public in boolean ignition;
	public in double wheelsclientData;
	public in double motorOilclientData;
	public in double particleFilterclientData;
	public in double sparkPlugclientData;
	public out SummaryEstimation driverInterface;

	SummaryEstimation summaryEstimation;

	[wheelsclientData]
	[motorOilclientData]
	[particleFilterclientData]
	[sparkPlugclientData]
	void computeData()  {
		if (motorOilclientData < wheelsclientData) {
			summaryEstimation.serviceDate = motorOilclientData;
		}

		if (particleFilterclientData.status  != null) {
			if (particleFilterclientData < wheelsclientData) {
				summaryEstimation.serviceDate = particleFilterclientData;
			}
		}
		if (sparkPlugclientData.status != null) {
			if (sparkPlugclientData < wheelsclientData) {
				summaryEstimation.serviceDate = sparkPlugclientData;
			}
		}
		if (wheelsclientData < 0.0) {
			summaryEstimation.summaryEstimation = -1.0;
		}
		if (wheelsclientData == 0.0) {
			summaryEstimation.summaryEstimation = 0.0;
		}
		if (wheelsclientData > 0.0) {
			summaryEstimation.summaryEstimation = 1.0;
		}
		->driverInterface(summaryEstimation);
	}

	[ignition]
	void displayDriverInterface()  {
		->driverInterface(summaryEstimation);
	}
}


class ClientAdaptive1{

	public in boolean ignition;
	public in SensorData sensorData;
	public in BoardData boardData;

	public out double clientData;

	double initialAvailability = 10000;

	[sensorData]
	void init()  {
	  stored_initial_availability = sensorData.initialAvailability;
	}
	
	[clientData, period(1)]
	[sensorData != null]
	void computeData {
  	  double relativeAvailability= 100.0 - sensorData.relativeWear;
	  ->clientData((initialAvailability / 100.0) * relativeAvailability);
	}
}



class CarSystem {
	public in boolean ignition;
	public in BoardData boardData;
	public in WheelsData wheelsData;
	public in MotorOilData motorOilData;
	public in ParticleFilterData particleFilterData;
	public in SparkPlugDataData sparkPlugData;


	public out SummaryEstimation driverInterface;
	public out int throttleStatus;
	public out boolean motorOilLed;

	ClientAdaptive1 clientWheels;
	ClientAdaptive1 clientMotorOil;
	ClientAdaptive1 clientParticleFilter;
	ClientAdaptive1 clientSparkPlugAdaptive;
	ConditionCheckAdapter conditionCheckAdapter;
	MotorRotationSpeed motorRotationSpeed;
	MotorOilQuantity motorOilQuantity;
	MotorOilViscosity motorOilViscosity;
	ThrottleControl throttleControl;
	MotorOilCheck motorOilCheck;


	SummaryEstimation summaryEstimation;

	[ignition]
	active carTurnedOn {
		->driverInterface(summaryEstimation);
                -> ConditionCheckAdapter.displayDriverInterface();
	}

	[period(1)]
        [ignition,wheelsData, motorOilData,particleFilterData,sparkPlugData]
	active computeData {
		->(clientWheels.computeData(), 
		clientMotorOil.computeData(), 
		clientParticleFilter.computeData(),
		clientSparkPlug.computeData(),
		ConditionCheckAdapter.computeData());

	}

	[driverInterface]
	active displaySummary {
		ConditionCheckAdapter.driverInterface(driverInterface);
	}


	this.ignition -> clientWheels.ignition;
	this.wheelsData -> clientWheels.sensorData {
		return new SensorData(this.wheelsData.relativeWear,this.wheelsData.initialAvailability);
	}
	this.boardData -> clientWheels.boardData;

	this.ignition -> clientMotorOil.ignition;
	this.motorOilData -> clientMotorOil.sensorData {
		return new SensorData(this.wheelsData.relativeWear,this.wheelsData.initialAvailability);
	}
	this.boardData -> clientMotorOil.boardData;


	this.ignition -> clientParticleFilter.ignition;
	this.particleFilter -> clientParticleFilter.sensorData {
		return new SensorData(this.wheelsData.relativeWear,this.wheelsData.initialAvailability);
	}
	this.boardData -> clientParticleFilter.boardData;

	this.ignition -> clientSparkPlug.ignition;
	this.sparkPlug -> clientSparkPlug.sensorData {
		return new SensorData(this.wheelsData.relativeWear,this.wheelsData.initialAvailability);
	}
	this.boardData -> clientSparkPlug.boardData;

	this.ignition -> ConditionCheckAdapter.ignition;
	ConditionCheckAdapter.driverInterface -> this.driverInterface;

	clientWheels.clientData -> ConditionCheckAdapter.wheelsclientData;
	clientMotorOil.clientData -> ConditionCheckAdapter.motorOilclientData;
	clientParticleFilter.clientData -> ConditionCheckAdapter.particleFilterclientData;
	clientSparkPlug.clientData -> ConditionCheckAdapter.sparkPlugclientData;

	throttleControl.throttleValue -> this.throttleStatus;
	motorOilCheck.motorOilRenewal -> this.motorOilLed;
	motorRotationSpeed.motorRotationSpeed -> throttleControl.motorRotationSpeed;
	motorOilQuantity.motorOilQuantity -> motorOilCheck.motorOilQuantity;
	motorOilViscosity.motorOilViscosity -> motorOilCheck.motorOilViscosity;
}

class RelativeData {}
