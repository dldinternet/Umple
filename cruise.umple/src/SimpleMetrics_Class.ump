/***************************************************************************************************
*  C O P Y R I G H T: All contributers to the Umple Project
*
*  C R E D I T S
*  Class Metrics implemented by Antonio Maria Pereira de Resende during his visit at
*  University of Ottawa as a Visit Researh (March-2013 to March-2014) and under supervision 
*  of Timothy Lethbridge.
*  This research is supported by CNPQ-BRAZIL and Universidade Federal de Lavras-UFLA (Brazil)
*  
*  A B O U T   T H I S    F I L E
*  File..........: SimpleMetrics_Class.ump 
*  Description...: It contains the class and routines to calculate Class Metrics.
*                  The metrics involved are: 
*                      Total of State Machines per class
*                      Total of Associations per class
*                      Total of Subclasses per class
*                      Total Attributes per class
*                      Total Methods per class
*                      Total Parameters per method
*
*  Dependencies..: SimpleMetrics_util.ump
*  Changes affect: Generator_CodeSimpleMetrics.ump
*  Compilation...: It's library, compile it by compiling Generator_CodeSimpleMetrics.ump        
*  Execution.....: It's library. Not Executable
*  Initiated.....: July-2013
***************************************************************************************************/

/***************************************************************************************************
* 
* CLASS USED TO COUNT MEASURE STATE MACHINES
* 
*
* B U G S   K N O W N (If this considerations are accepted, write it down on google code bugs controlling):        
*
**************************************************************************************************/

namespace cruise.umple.compiler;
use SimpleMetrics_Util.ump;

class ClassMetrics{
	depend java.util.*;
    depend java.text.*;
	isA SimpleMetricsGenerator;
	StringBuilder code = null;
	UmpleModel model=null;
	
	void calculate(){
	  CountClass cc = new CountClass();	
      int smCount = 0;
      int classCount = 0;
	  boolean FirstTime= true;

      code.append( "\n\n\n");
      code.append(Format.repeat("*",150) + "\n" );
      code.append(Format.repeat(" ",20)+" C L A S S   M E A S U R E S "+"\n");
      code.append(Format.repeat("*",150)+"\n");
   
	  // CALCULATE SOME CLASS METRICS
      // create a map in order to have several metric objects about the same class
      Set<String> allUmpFiles = new HashSet<String>();
      String fn = null;
      // Iterate through all the classes in the system, gathering statistics
      for (UmpleClass uClass : model.getUmpleClasses()) {   	      
        // Loop through all the places where parts of this class were
        // found in the code, gathering all the files
        for (Position p : uClass.getPositions()) {
          fn=p.getFilename();
          allUmpFiles.add(fn); // allUmpFiles is a set, so duplicates are removed
         }
      }
      
	  List<String>title = new ArrayList<String>();
      title.add(" Class Name                   ");
      title.add(" #State Machines ");
      title.add(" #Associations ");
      title.add(" #Subclasses ");
	  title.add(" #Deepest Subclasses ");
      title.add(" #Attributes ");
      title.add(" #Methods ");
      title.add(" #Method Parameters ");
      code.append(Format.repeat("-",150)+"\n");
      for (int i=0;i<title.size();i++){ code.append("|"+title.get(i));  }
      code.append(" |\n");
      code.append(Format.repeat("-",150)+"\n");
	  
	  DecimalFormat df = new DecimalFormat( "###,##0.0###");
	  classCount=0;
      smCount=0;
	  // calculate class metrics for each Umple Class
	  for ( UmpleClass uClass : model.getUmpleClasses() ) {
        cc.countDataClass( uClass ); 
  
        classCount++;         
        code.append( "| " +uClass.getName()+ Format.repeat(" ", title.get(0).length()-(""+uClass.getName()).length()-1 ) );
        code.append( "| " +Format.repeat(" ", title.get(1).length()-(""+cc.getCountStateMachines()).length()-1 )+ cc.getCountStateMachines() );
        smCount += cc.getCountStateMachines();
        code.append( "| " +Format.repeat(" ", title.get(2).length()-(""+cc.getCountAssociations()).length()-1 )+ cc.getCountAssociations() );
        code.append( "| " +Format.repeat(" ", title.get(3).length()-(""+cc.getCountSubclasses()).length()-1 )+ cc.getCountSubclasses() );
		code.append( "| " +Format.repeat(" ", title.get(4).length()-(""+cc.getCountDeepestSubclass()).length()-1 )+ cc.getCountDeepestSubclass() );
        code.append( "| " +Format.repeat(" ", title.get(5).length()-(""+cc.getCountAttributes()).length()-1 )+ cc.getCountAttributes() );
        code.append( "| " +Format.repeat(" ", title.get(6).length()-(""+cc.getCountMethods()).length()-1 )+ cc.getCountMethods() );
        code.append( "| " +Format.repeat(" ", title.get(7).length()-(""+cc.getCountParameters()).length()-1 )+ cc.getCountParameters() );
        code.append( " |\n" ); // closing the record. One record one line.
        code.append(Format.repeat("-",150)+"\n");
		
		if (FirstTime){
		  cc.setMinMax();
		  FirstTime= false;
		}
		cc.incTotal();
		cc.calcMinMax();
		cc.reset();
     } 
      // TOTAL OF CLASSES, STATE MACHINES, SOURCE FILES 
      code.append( "| TOTAL" + Format.repeat(" ", title.get(0).length()-("| TOTAL").length()+1 ) );
      code.append( "| " +Format.repeat(" ", title.get(1).length()-(""+cc.getCountTotalStateMachines()).length()-1 )+ cc.getCountTotalStateMachines() );
      code.append( "| " +Format.repeat(" ", title.get(2).length()-(""+cc.getCountTotalAssociations()).length()-1 )+ cc.getCountTotalAssociations() );
      code.append( "| " +Format.repeat(" ", title.get(3).length()-(""+cc.getCountTotalSubclasses()).length()-1 )+ cc.getCountTotalSubclasses() );
	  code.append( "| " +Format.repeat(" ", title.get(4).length()-(" -X-X-").length()-1 )+ " -X-X-" );
      code.append( "| " +Format.repeat(" ", title.get(5).length()-(""+cc.getCountTotalAttributes()).length()-1 )+ cc.getCountTotalAttributes() );
      code.append( "| " +Format.repeat(" ", title.get(6).length()-(""+cc.getCountTotalMethods()).length()-1 )+ cc.getCountTotalMethods() );
      code.append( "| " +Format.repeat(" ", title.get(7).length()-(""+cc.getCountTotalParameters()).length()-1 )+ cc.getCountTotalParameters() );
      code.append( " |\n" ); // closing the record. One record one line.
      code.append(Format.repeat("-",150)+"\n");
	  
	  
	  // Print Averages
	  String res;
      code.append( "| AVERAGE" + Format.repeat(" ", title.get(0).length()-("| AVERAGE").length()+1 ) );
	  res =  df.format((double)cc.getCountTotalStateMachines()/classCount);
      code.append( "| " +Format.repeat(" ", title.get(1).length()-(""+res).length()-1 )+ res );
	  res =  df.format((double)cc.getCountTotalAssociations()/classCount);
      code.append( "| " +Format.repeat(" ", title.get(2).length()-(""+res).length()-1 )+ res );
	  res =  df.format((double)cc.getCountTotalSubclasses()/classCount);
      code.append( "| " +Format.repeat(" ", title.get(3).length()-(""+res).length()-1 )+ res );
	  res =  " -X-X-";
	  code.append( "| " +Format.repeat(" ", title.get(4).length()-(""+res).length()-1 )+ res );
	  res =  df.format((double)cc.getCountTotalAttributes()/classCount);
      code.append( "| " +Format.repeat(" ", title.get(5).length()-(""+res).length()-1 )+ res );
	  res =  df.format((double)cc.getCountTotalMethods()/classCount);
      code.append( "| " +Format.repeat(" ", title.get(6).length()-(""+res).length()-1 )+ res );
	  res =  df.format((double)cc.getCountTotalParameters()/classCount);
      code.append( "| " +Format.repeat(" ", title.get(7).length()-(""+res).length()-1 )+ res );
      code.append( " |\n" ); // closing the record. One record one line.
      code.append(Format.repeat("-",150)+"\n");	  
	  
	  
	  // Print MAXs
	  code.append( "| MAX" + Format.repeat(" ", title.get(0).length()-("| MAX").length()+1 ) );
      code.append( "| " +Format.repeat(" ", title.get(1).length()-(""+cc.getCountStateMachinesMax()).length()-1 )+ cc.getCountStateMachinesMax() );
      code.append( "| " +Format.repeat(" ", title.get(2).length()-(""+cc.getCountAssociationsMax()).length()-1 )+ cc.getCountAssociationsMax() );
      code.append( "| " +Format.repeat(" ", title.get(3).length()-(""+cc.getCountSubclassesMax()).length()-1 )+ cc.getCountSubclassesMax() );
	  code.append( "| " +Format.repeat(" ", title.get(4).length()-(""+cc.getCountDeepestSubclassMax()).length()-1 )+ cc.getCountDeepestSubclassMax() );
      code.append( "| " +Format.repeat(" ", title.get(5).length()-(""+cc.getCountAttributesMax()).length()-1 )+ cc.getCountAttributesMax() );
      code.append( "| " +Format.repeat(" ", title.get(6).length()-(""+cc.getCountMethodsMax()).length()-1 )+ cc.getCountMethodsMax() );
      code.append( "| " +Format.repeat(" ", title.get(7).length()-(""+cc.getCountParametersMax()).length()-1 )+ cc.getCountParametersMax() );
      code.append( " |\n" ); // closing the record. One record one line.
      code.append(Format.repeat("-",150)+"\n");	  
	  
	  // Print MINs
	  code.append( "| MIN" + Format.repeat(" ", title.get(0).length()-("| MIN").length()+1 ) );
      code.append( "| " +Format.repeat(" ", title.get(1).length()-(""+cc.getCountStateMachinesMin()).length()-1 )+ cc.getCountStateMachinesMin() );
      code.append( "| " +Format.repeat(" ", title.get(2).length()-(""+cc.getCountAssociationsMin()).length()-1 )+ cc.getCountAssociationsMin() );
      code.append( "| " +Format.repeat(" ", title.get(3).length()-(""+cc.getCountSubclassesMin()).length()-1 )+ cc.getCountSubclassesMin() );
	  code.append( "| " +Format.repeat(" ", title.get(4).length()-(""+cc.getCountDeepestSubclassMin()).length()-1 )+ cc.getCountDeepestSubclassMin() );
      code.append( "| " +Format.repeat(" ", title.get(5).length()-(""+cc.getCountAttributesMin()).length()-1 )+ cc.getCountAttributesMin() );
      code.append( "| " +Format.repeat(" ", title.get(6).length()-(""+cc.getCountMethodsMin()).length()-1 )+ cc.getCountMethodsMin() );
      code.append( "| " +Format.repeat(" ", title.get(7).length()-(""+cc.getCountParametersMin()).length()-1 )+ cc.getCountParametersMin() );
      code.append( " |\n" ); // closing the record. One record one line.
      code.append(Format.repeat("-",150)+"\n");	
	  
	  // Print Legend
	  code.append("Legend of Class Metrics:\n");
	  code.append("   #State Machines - Total of SM per class.\n");
	  code.append("   #Associations - Total of associaions per class.\n");
	  code.append("   #Subclasses - Total of subclasses conected directly per class.\n");
	  code.append("   #Deepth Subclasses - Amount of classes up to deepest subclasse.\n");
	  code.append("   #Attributes - Total of attributes per class, disregarding attribute modifiers.\n");
	  code.append("   #Methods - Total of methods per class, disregarding class modifiers. \n");
	  code.append("   #Method Parameters - Total of parameters in the class. \n");
	  
	  
	  super.setCode(code);
	  return;
	}// end of method
	
}// end of class ClassMetrics


class CountClass {
	depend java.util.*;
    int countStateMachines =0;
    int countAssociations =0;
    int countSubclasses =0;
	int countDeepestSubclass =0;
    int countAttributes =0;
    int countMethods =0;
    int countParameters =0;
	
	// attributes to store total values
	int countTotalStateMachines =0;
    int countTotalAssociations =0;
    int countTotalSubclasses =0;
    int countTotalAttributes =0;
    int countTotalMethods =0;
    int countTotalParameters =0;
	
	// attributes to store MAX
    int countStateMachinesMax =0;
    int countAssociationsMax =0;
	int countSubclassesMax =0;
	int countDeepestSubclassMax =0;
    int countAttributesMax =0;
    int countMethodsMax =0;
    int countParametersMax =0;

	// attributes to store MIN
    int countStateMachinesMin =0;
    int countAssociationsMin =0;
	int countSubclassesMin =0;
	int countDeepestSubclassMin =0;
    int countAttributesMin =0;
    int countMethodsMin =0;
    int countParametersMin =0;
	
	void countDataClass(UmpleClass uClass){
	  int classCount=0;
      
      Attribute attribute = null;
      Method method = null;
      MethodParameter parameter = null;
      Association vassociation = null;     
    
        if (uClass!=null){

          //Look for State Machines
          for (StateMachine sm : uClass.getStateMachines()) {
            this.incStateMachines(1);
          }   
        
          // Look for subclasses connected directly
          this.calcAmountSubclasses(uClass);
                  
		  // look for all subclasses regarding indirectly connected subclasses
		  this.calcMaxDeepth(uClass);

          // Look for Associations
          Association[] associationlist = uClass.getAssociations();
          for( int i = 0; i < associationlist.length; i++ )
          {
            vassociation = associationlist[i];
            this.incCountAssociations(1);
          }
        
          // Look for Attributes
          List attributelist = uClass.getAttributes();
          if (attributelist != null){
            Iterator it = attributelist.iterator();
  
            while ( it.hasNext() ) {
              attribute = (Attribute)it.next();
              this.incCountAttributes(1);
            }
          }

          // Look for Methods
          List methodlist = uClass.getMethods();
          if (methodlist != null){
            Iterator it1 = methodlist.iterator();
                    
            while ( it1.hasNext() ) {
              method = (Method)it1.next();
              this.incCountMethods(1);
              
              // Look for Parameters
              List parameterlist = method.getMethodParameters();
              if (parameterlist != null){
                Iterator it3 = parameterlist.iterator();
                      
                while ( it3.hasNext() ) {
				  this.incCountMethods(1);
                  parameter = (MethodParameter)it3.next();
                }
              }
            }
          }
        }
	} // end of method
	
  int calcAmountSubclasses(UmpleClass Uclass){
     if (Uclass==null) return 0;
	 this.setCountSubclasses(Uclass.getSubclasses().size());
     return this.getCountSubclasses();
  }
  
  void calcMaxDeepth(UmpleClass Uclass){
     int level =0;
	 if (Uclass==null) return;
	 level+=1;
	 for( UmpleClass iclass: Uclass.getSubclasses() ){
		   this.searchDeepestSubclass(iclass, level);
	 }
  }
  
  void searchDeepestSubclass(UmpleClass Uclass, int level){
     if (Uclass==null) return;
	 level+=1;
	 if (level > this.getCountDeepestSubclass()) {
	    this.setCountDeepestSubclass(level);
	 }
	 for( UmpleClass iclass: Uclass.getSubclasses() ){
		this.searchDeepestSubclass(iclass, level);
	 }
  }
  
  void incTotal(){
    this.incCountTotalStateMachines(this.getCountStateMachines());
    this.incCountTotalAssociations(this.getCountAssociations());
    this.incCountTotalSubclasses(this.getCountSubclasses());
    this.incCountTotalAttributes(this.getCountAttributes());
    this.incCountTotalMethods(this.getCountMethods());
    this.incCountTotalParameters(this.getCountParameters());
  }
  
  void reset(){
    this.setCountStateMachines(0);
    this.setCountAssociations(0);
    this.setCountSubclasses(0);
	this.setCountDeepestSubclass(0);
    this.setCountAttributes(0);
    this.setCountMethods(0);
    this.setCountParameters(0);
  }
  
  void setMinMax(){
    // Setting MAX
	this.setCountStateMachinesMax(this.getCountStateMachines());
	this.setCountAssociationsMax(this.getCountAssociations());
	this.setCountSubclassesMax(this.getCountSubclasses());
	this.setCountDeepestSubclassMax(this.getCountDeepestSubclass());
	this.setCountAttributesMax(this.getCountAttributes());
	this.setCountMethodsMax(this.getCountMethods());
	this.setCountParametersMax(this.getCountParameters());
	
    // Setting MIN
    this.setCountStateMachinesMin(this.getCountStateMachines());
	this.setCountAssociationsMin(this.getCountAssociations());
	this.setCountSubclassesMin(this.getCountSubclasses());
	this.setCountDeepestSubclassMin(this.getCountDeepestSubclass());
	this.setCountAttributesMin(this.getCountAttributes());
	this.setCountMethodsMin(this.getCountMethods());
	this.setCountParametersMin(this.getCountParameters());
  }
  
  
  void calcMinMax(){
    // calculating MAX
    if( this.getCountStateMachines()>this.getCountStateMachinesMax()){
	  this.setCountStateMachinesMax(this.getCountStateMachines());
	}
    if( this.getCountAssociations()>this.getCountAssociationsMax()){
	  this.setCountAssociationsMax(this.getCountAssociations());
	}
    if( this.getCountSubclasses()>this.getCountSubclassesMax()){
	  this.setCountSubclassesMax(this.getCountSubclasses());
	}
	if( this.getCountDeepestSubclass()>this.getCountDeepestSubclassMax()){
	  this.setCountDeepestSubclassMax(this.getCountDeepestSubclass());
	}
    if( this.getCountAttributes()>this.getCountAttributesMax()){
	  this.setCountAttributesMax(this.getCountAttributes());
	}
    if( this.getCountMethods()>this.getCountMethodsMax()){
	  this.setCountMethodsMax(this.getCountMethods());
	}
    if( this.getCountParameters()>this.getCountParametersMax()){
	  this.setCountParametersMax(this.getCountParameters());
	}
  
    // calculating MIN 
    if( this.getCountStateMachines()<this.getCountStateMachinesMin()){
	  this.setCountStateMachinesMin(this.getCountStateMachines());
	}
    if( this.getCountAssociations()<this.getCountAssociationsMin()){
	  this.setCountAssociationsMin(this.getCountAssociations());
	}
    if( this.getCountSubclasses()<this.getCountSubclassesMin()){
	  this.setCountSubclassesMin(this.getCountSubclasses());
	}
	if( this.getCountDeepestSubclass()<this.getCountDeepestSubclassMin()){
	  this.setCountDeepestSubclassMin(this.getCountDeepestSubclass());
	}
    if( this.getCountAttributes()<this.getCountAttributesMin()){
	  this.setCountAttributesMin(this.getCountAttributes());
	}
    if( this.getCountMethods()<this.getCountMethodsMin()){
	  this.setCountMethodsMin(this.getCountMethods());
	}
    if( this.getCountParameters()<this.getCountParametersMin()){
	  this.setCountParametersMin(this.getCountParameters());
	}
  
  }
  
  void incCountDeepestSubclass(int a){
     this.countDeepestSubclass+=a;
  }
  void incStateMachines(int a){
    this.countStateMachines+=a;
  }
  void incCountAssociations(int a){
    this.countAssociations+=a;
  }  
  void incCountSubclasses(int a) {
    this.countSubclasses+=a;
  }  
  void incCountAttributes(int a){
    this.countAttributes+=a;
  }
  void incCountMethods(int a){
    this.countMethods+=a;
  }
  void incCountParameters(int a){
    this.countParameters+=a;
  } 
  
  void incCountTotalStateMachines(int a){
    this.countTotalStateMachines+=a;
  }
  void incCountTotalAssociations(int a){
    this.countTotalAssociations+=a;
  }  
  void incCountTotalSubclasses(int a) {
    this.countTotalSubclasses+=a;
  }  
  void incCountTotalAttributes(int a){
    this.countTotalAttributes+=a;
  }
  void incCountTotalMethods(int a){
    this.countTotalMethods+=a;
  }
  void incCountTotalParameters(int a){
    this.countTotalParameters+=a;
  } 
} 