namespace cruise.umple.alloy;

class Signature {
  depend cruise.umple.compiler.*;
 	
  name;
  extendsName;
  boolean isBounded;
  
  1 -> 1 Utility utility;
  1 -> * Function function;
	
  public Signature(UmpleClass uClass,String cname){
	  
	instantiateDataMembers(cname,uClass);
	Set<Association> processedAssociations = new HashSet<Association>();
	for(Association assoc : uClass.getAssociations()){
	  if(processedAssociations.contains(assoc)) continue;
	  processedAssociations.add(assoc);	
	    
	  Association uAssoc = reComposeAssociation(assoc,uClass);
	  Function funct = new Function(uAssoc);
	  AssociationEnd beginEnd = uAssoc.getEnd(0), endToOutput = uAssoc.getEnd(1); 
			
	  //Reflexive association case 
      if(endToOutput.getClassName().equals(beginEnd.getClassName())){
        funct = new Function(uAssoc,endToOutput.getClassName());	
      }
	  isBounded = addFunction(funct);
	}
  }
	
  private void instantiateDataMembers(String cname,UmpleClass uClass){
	utility = new Utility();
	extendsName = cname;
	function = new ArrayList<Function>();
	name = uClass.getName();
  }
	
  private Association reComposeAssociation(Association assoc, UmpleClass uClass){
	  
	Multiplicity mult = new Multiplicity();
	isBounded = mult.setBound("1");
	AssociationEnd endToOutput = new AssociationEnd(null,null,null,null,mult);
	AssociationEnd beginEnd = new AssociationEnd(null,null,null,null,mult);
			
	if(utility.getRightEndName(assoc).equals(uClass.getName())) {
      endToOutput = utility.getLeftEnd(assoc);
      beginEnd = utility.getRightEnd(assoc);
    }
    else {
      endToOutput = utility.getRightEnd(assoc);  
      beginEnd = utility.getLeftEnd(assoc); 
    }
    return utility.convertEndsToAssociation(beginEnd,endToOutput); 
  }
	
  private String comment(){
  	return utility.addStartDottedLine()+ 
  	  "--The following defines a signature for class "+name+"\n"+utility.addEndDottedLine();
  }
  	
  private String funPart(){
    return "sig "+name+" extends "+extendsName+" {";
  }
	
  public String printSignature(){ 
	return comment()+print();
  }

  private String compute(int size){
  	if(size == 0) return "";
  	if(size == 1) return function.get(0).printFunction();
  	return compute(size-1)+",\n"+function.get(size-1).printFunction(); 
  }

  private String print(){
	return funPart()+"\n"+compute(function.size())+"\n}\n";
  }
}