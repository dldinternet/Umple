/*Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This generates simple metrics from Umple
  generate SimpleMetrics;
in your umple file, or the command line option
  -g SimpleMetrics
*/

namespace cruise.umple.compiler;

use SimpleMetrics_Class.ump;
use SimpleMetrics_SM.ump;
use SimpleMetrics_CodeLines.ump;

class SimpleMetricsGenerator {
  StringBuilder code = new StringBuilder();
  
  public void generate (){ 
  	
  	// Output basic file header
    code.append("      M E T R I C S    G E N E R A T E D    B Y    U M P L E    F R O M   <"+model.getUmpleFile().getSimpleFileName()+".ump>\n\n");
  
	// GET DATA ABOUT LINES (CODE, BLANKS, COMMENTS)
  	CodeMetrics codemetrics = new CodeMetrics();
  	codemetrics.setModel(model);
  	codemetrics.setCode(code);
    codemetrics.calculate(); 
  	
  	// GET DATA FROM CLASSES
  	ClassMetrics classmetrics = new ClassMetrics();
  	classmetrics.setModel(model);
  	classmetrics.setCode(codemetrics.getCode());
    classmetrics.calculate(); 
    
    // GET DATA FROM STATE MACHINES
  	StateMachineMetrics SMMeasure = new StateMachineMetrics();  	
  	SMMeasure.setModel(model);
  	SMMeasure.setCode(classmetrics.getCode());
  	SMMeasure.calculate();
  	
  	model.setCode(code.toString());
    writeModel();
    return;
  }
  
  // Output the metrics to a file 
  void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".metrics";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating simple metrics." + e, e);
    }
  } 
     
} // END CLASS


class B{

  sm{
     v1 {
	   e1->v1;
	   e2->v2;
       //do { System.out.println(); }
	 }
	 
	 v2{
	   e1->v1;
	   e2->v3;
	   exit / { System.out.println(); }
	 }
	 
	 v3{
	   entry / { System.out.println(); }
	   exit / { System.out.println(); }
	   e1->v1;
	 } 
  }
  
  
 /************************************************************************************
 *
 * Expected results SM of class B
 * --------------------------------------------------------------------------------------------------------------------------------------------------
 * | Class Name     | #State Machines | #States | #Transitions | #Different Transitions | #Events | #Actions | #Nested SM | #Cycles | #Self Cycles  |
 * --------------------------------------------------------------------------------------------------------------------------------------------------
 * | B              |                0|        3|             5|                       0|        2|         3|           0|        5|             1 |
 * --------------------------------------------------------------------------------------------------------------------------------------------------
 *
 **************************************************************************************/
 
}

class A {
  int x=0;
  int y=1;
  boolean go=true;
  es{
    a{
	  a[go] -> b;
	}
	
	b{
	  b[x>y] -> a;
	}
  }
  sm {  
     s1 {  
        e1 -> s2;  
        e2 -> s2b; 
        e3 -> s1;		
     }  
     s2 {  
		e1 -> s1;  
        s2a {
          e1 -> s2b; 
		  e2 -> s1;
          s2aa{
          	e1 -> s2ab;
          	e2 -> s2ac;
          }
          s2ab{
          	e1 -> s2ab;
          	e2 -> s2ac;
			e3 -> s2ab;
          }
          s2ac{
          	e1 -> s2ab;
          	e2 -> s2ac;
          } 
        }  
        s2b {  
          e3 -> s2a;
		  e4 -> s2b;
        }  
     } 
	 
  } 
  
 /************************************************************************************
 *
 * Expected results SM of class A
 * --------------------------------------------------------------------------------------------------------------------------------------------------
 * | Class Name     | #State Machines | #States | #Transitions | #Different Transitions | #Events | #Actions | #Nested SM | #Cycles | #Self Cycles  |
 * --------------------------------------------------------------------------------------------------------------------------------------------------
 * | A              |                2|        9|            17|                      17|       17|         0|           2|       15|             5 |
 * --------------------------------------------------------------------------------------------------------------------------------------------------
 *
 **************************************************************************************/  
}

 // conection between state machines
class C{
  int x=3;
  state_machine{
     sm1{
       
          e1{
                event1[x>10 && x<20] -> e2;
            } 
       
         e2{
               event2 -> e2;
               event3 -> sm2;
               event4 -> e4;
           }
     }
  
    sm2{
    
       e3{
             event1 -> e4;   
           }
       e4{
             event3 -> e5;
           }  
     }
    
  }// fim da state_machine
  
  
}