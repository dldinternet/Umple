namespace cruise.umple.nusmv;

use NuSMVMetamodel.ump;

class NuSMVCoordinator
{
  depend cruise.umple.compiler.*;
  depend java.util.*;
  
  public String changeNameCase(String str)
  {
    char[] stringArray = str.trim().toCharArray();
    stringArray[0] = Character.toUpperCase(stringArray[0]);
    str = new String(stringArray);
    return str;
  }
  
  public NuSMVModule generateSimpleModule(StateMachine sm)
  {
    NuSMVModule module = new NuSMVModule(changeNameCase(sm.getFullName()), 
    		sm.getStartState().getName()); 
  	module.setDeclarationPart(generateVariables(sm));
  	module.setAssignPart(generateAssign(sm));
  	module.setTransitionPart(genTransition(sm));	
  	return module;
  }
  
space <<!

!>>
  output <<!-- This file is generated from <<=model.getUmpleFile().getFileName()>> --!>>
  emit commentModel(UmpleModel model)(output,space); 
 
  public DeclarationPart generateVariables(StateMachine sm)
  {
  	EnumerationElement temp = new EnumerationElement("");
  	EnumerationStatement decTransition = new EnumerationStatement("event", temp);
  		
  	//Creates events (transitions) list
  	for(Event e : sm.getAllEvents())
  	{
  		EnumerationElement transitionElement = new EnumerationElement(e.getName());
  		if(e.getName().contains("__autotransition"))
  		  continue;
  		decTransition.addEnumerationElement(transitionElement);
  	}
  	decTransition.removeEnumerationElement(temp);
  	DeclarationPart dPart = new DeclarationPart("", genStateVariables(sm), decTransition);
  	
  	/*for(String st : guardList(sm))
  	{
  	  VarDeclarationStatement varStmt = new VarDeclarationStatement("","boolean",st);
  	  dPart.addDeclarationStatement(varStmt);
  	}*/
  	return dPart;
  }
  
  /*public ArrayDeque<String> getParentList(StateMachine sm)
  {
    int i = 0; 
    ArrayDeque<String> temp = new ArrayDeque<String>();
    if(sm.getNestedStateMachines().size() > 0)
    {
      for(State stt : sm.getStates())
      {
      	if(! stt.hasNestedStateMachines())
      	  continue;
      	i++;
      	temp.push(stt.getStateMachine().getName());
      	getParentList(stt.getNestedStateMachine(i));
      }
    }
    return temp;
  }
  
  public void printStateAncestors(StateMachine sm)
  {
    ArrayDeque<String> temp = new ArrayDeque<String>();
    //for(State st : sm.getStates())
    //{
      temp = getParentList(sm);
      String str = "";
      while(temp.size() != 0)
        str += temp.pop()+".";
      System.out.println(str);
    //}
  }*/
  
  public List<String> guardList(StateMachine sm)
  {
    String temp = "";
  	List<String> str = new ArrayList();
    for(Transition trans : sm.getAllTransitions())
    {
  
      //temp = (new JavaGenerator()).translate("Plain", trans.getGuard());
      //(new JavaGenerator()).translate("Plain", transition.getGuard());
      if(!(trans.getGuard() == null & checkDuplicate(temp,str)))
      {
      	str.add(temp);
      }
    }
    return str;
  }
  
  private boolean checkDuplicate(String temp,List<String> str)
  {
    for(String st : str)
    {
      if(st.equals(temp))
        return true;
    }
    return false;
  }
  
  public EnumerationStatement genStateVariables(StateMachine sm)
  {
  	EnumerationElement temp = new EnumerationElement("");
  	EnumerationStatement decState = new EnumerationStatement("state",temp);
  	EnumerationStatement decTransition = new EnumerationStatement("event",temp);
  	EnumerationStatement decState2 = new EnumerationStatement("state",temp);
  	//Creates states list  			
  	for(State st : sm.getStates())
  	{
  		EnumerationElement stateElement = new EnumerationElement(st.getName());
  		decState.addEnumerationElement(stateElement);
  		if(st.hasNestedStateMachines())
  		{
  			for(StateMachine nsm : st.getNestedStateMachines())
  			{
  				decState2 = genStateVariables(nsm);
  			}
  			for(EnumerationElement de : decState2.getEnumerationElements())
  				decState.addEnumerationElement(de);
  		}	
  	}
  	decState.removeEnumerationElement(temp);
  	return decState;
  }
  	
  public AssignPart generateAssign(StateMachine sm)
  {
  		AssignPart apart = new AssignPart("",sm.getStartState().getName());	
  		return apart;
  }
  	
  public TransitionPart genTransition(StateMachine sm)
  {
  	TransitionPart tpart = new TransitionPart("TRANS");
    SimpleTransition temp = new SimpleTransition("","","");
  	SimpleTransition temp1 = new SimpleTransition("","","");
  	//SimpleTransition [] tempArray = new SimpleTransition[]{temp,temp1};
  		
  	for(State st : sm.getStates())
  	{
  		if(st.numberOfTransitions() > 1)
  		{
  			ComplexTransition ctrans = new ComplexTransition("","","",temp1,temp);
  			for(Transition tr : st.getTransitions())
  			{
  				SimpleTransition smt = new 
  				SimpleTransition( tr.getFromState().getName(), tr.getNextState().getName(),	tr.getEvent().getName()	);
  					ctrans.addSimpleTransition(smt);
  			}
  			ctrans.removeSimpleTransition(temp);
  			ctrans.removeSimpleTransition(temp1);
  			tpart.addComplexTransition(ctrans);	
  		}
  		if(st.numberOfTransitions() == 1)
  		{
  			Transition tr = st.getTransition(0);
  			SimpleTransition strans = new SimpleTransition(	tr.getFromState().getName(), tr.getNextState().getName(), tr.getEvent().getName() );
  			tpart.addSimpleTransition(strans);
  		}
  	}
  	return tpart;
  }
}