namespace cruise.umple.alloy;

class Fact {
  depend cruise.umple.compiler.*; 
  
  protected Utility utility;
  protected String factName;
  protected String firstClassName;
  protected String secondClassName;
  protected String rName1;
  protected String rName2;
  
  abstract;
  //This constructor builds a fact from a given name and an association
  public Fact(Association assoc){
	utility = new Utility();
	factName = null;
	firstClassName = utility.getLeftEndName(assoc);
	secondClassName = utility.getRightEndName(assoc);
	rName1 = utility.getLeftRoleName(assoc);
	rName2 = utility.getRightRoleName(assoc);
  }
  
  //This method generates the header for any given fact
  protected String factHeader(){  	
  	return "fact "+factName+" {\n  ";
  }
 
  protected String makeVarName(String name,Integer num){
  	return name.toLowerCase()+"_"+num;
  }
  
  //This method handles variable declaration for a given object
  protected String makeVarDeclaration(String cName, int num){
	if(num == 1) return varDec(cName,1)+" : "+cName;	 		
	return varDec(cName,num)+" : "+cName;
  }
  
  private String varDec(String cName, int num){
  	if(num == 1) return makeVarName(cName,1);
  	return varDec(cName,num-1)+", "+makeVarName(cName,num); 
  }
}

class NoExtendedRule {
  depend java.lang.StringBuilder;
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public NoExtendedRule(Association assoc){
  	super(assoc);
  	factName = "NoExtendedRelation";
  }
  
  private String commentNoExtendedFact(){
  	return utility.addStartDottedLine()+"--The following defines no extended relation rule for class "+
  		firstClassName+"\n"+utility.addEndDottedLine();
  }
  
  //This method prints no extended relation fact
  private String printNoExtendedRelationFact(){
  	return factHeader()+"no disj "+makeVarDeclaration(firstClassName,3)+" |"+
  	  noExtRelContent()+"\n}";
  }
    
  //This method generates content no extended relation
  private String noExtRelContent(){
  	return "\n    "+makeVarName(firstClassName,1)+" in "+
  		rName2+"["+makeVarName(firstClassName,2)+"] && "+makeVarName(firstClassName,1)
  		+" in "+rName2+"["+makeVarName(firstClassName,3)+"]";
  }
  public String print(){
  	return commentNoExtendedFact()+ printNoExtendedRelationFact();
  }
}

class NoSelfRelation {
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public NoSelfRelation(Association assoc){
  	super(assoc);
  	factName = "NoSelfRelation";
  }
  
  private String commentNoSelfRelation(){
  	return utility.addStartDottedLine()+"--The following defines no self relation rule for class "+
  		firstClassName+"\n"+utility.addEndDottedLine();
  }
  
  private String decPart(){
  	return "no "+makeVarDeclaration(firstClassName,1)+" |\n";
  }
  
  //This method prints no extended relation fact
  private String printNoSelfRelationFact(){
  	return factHeader()+decPart()+"    "+noSelfRelContent()+"\n}";
  }
  
  //This method generates content no extended relation
  private String noSelfRelContent(){
  	return makeVarName(firstClassName,1)+" in "+
  		makeVarName(firstClassName,1)+".^"+rName2;
  }
  
  public String print(){
  	return commentNoSelfRelation()+printNoSelfRelationFact();
  }
}

class BidirectionRule {
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public BidirectionRule(Association assoc){
  	super(assoc);
  	factName = "BidirectionalityRule";
  }
  
  //This methods comments bidirectionality rule
  private String commentBidirectionality(){
  	return utility.addStartDottedLine()+"--The following defines bidirectionality rule between class "+
  		firstClassName+" and class "+secondClassName+"\n"+utility.addEndDottedLine();
  }
  
  //This method computes the content of a bidirectionality rule
  private String bidirectionalContent(){
  	return "\n    "+makeVarName(firstClassName,1)+" in "+rName1+"["+
  		makeVarName(secondClassName,1)+"] <=> "+makeVarName(secondClassName,1)+" in "+rName2+
  			"["+makeVarName(firstClassName,1)+"]";
  }
  //This method is responsible for printing bidirectionality fact
  private String printBidirectionFact(){
  	return factHeader()+"all "+makeVarDeclaration(firstClassName,1)+", "+
  		makeVarDeclaration(secondClassName,1)+" |"+ bidirectionalContent()+"\n}";
  }
  
  public String print(){
  	return commentBidirectionality()+printBidirectionFact();
  }
}