namespace cruise.umple.alloy;

class Fact {
  depend cruise.umple.compiler.*; 
  
  protected Utility utility;
  protected String factName;
  protected String firstClassName;
  protected String secondClassName;
  protected String rName1;
  protected String rName2;
  
  abstract;
  //This constructor builds a fact from a given name and an association
  public Fact(Association assoc){
	utility = new Utility();
	factName = null;
	firstClassName = utility.getLeftEndName(assoc);
	secondClassName = utility.getRightEndName(assoc);
	rName1 = utility.getLeftRoleName(assoc);
	rName2 = utility.getRightRoleName(assoc);
  }
  
  private String getEndName(AssociationEnd end){
  	return end.getClassName();
  }
  
  private String getEndRoleName(AssociationEnd end){
  	return end.getRoleName();
  }
  
  protected String newMe(){ return " |\n    "; }
  
  //This method generates the header for any given fact
  protected String factHeader(){  	
  	return "fact "+factName+" {\n  ";
  }
 
  protected String makeVarName(String name,Integer num){
  	return name.toLowerCase()+"_"+num;
  }
  
  private String temp(String cName){
    return " : "+cName;
  }
  
  //This method handles variable declaration for a given object
  protected String makeVarDeclaration(String cName, int num){
	if(num == 1) return varDec(cName,1)+temp(cName);	 		
	return varDec(cName,num)+temp(cName);
  }
  
  private String varDec(String cName, int num){
  	if(num == 1) return makeVarName(cName,1);
  	return varDec(cName,num-1)+", "+makeVarName(cName,num); 
  }
}

class NoExtendedFact {
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public NoExtendedFact(Association assoc){
  	super(assoc);
  	factName = "NoExtendedRelation";
  }
  
  private String commentNoExtendedFact(){
  	return utility.addStartDottedLine()+"--The following defines no extended relation rule for class "+
  		firstClassName+"\n"+utility.addEndDottedLine();
  }
  
  //This method prints no extended relation fact
  private String printNoExtendedRelationFact(){
  	return factHeader()+"no disj "+makeVarDeclaration(firstClassName,3)+
  	  newMe()+noExtRelContent()+"\n}";
  }
    
  //This method generates content no extended relation
  private String noExtRelContent(){
  	return makeVarName(firstClassName,1)+" in "+
  		rName2+"["+makeVarName(firstClassName,2)+"] && "+makeVarName(firstClassName,1)
  		+" in "+rName2+"["+makeVarName(firstClassName,3)+"]";
  }
  public String print(){
  	return commentNoExtendedFact()+ printNoExtendedRelationFact();
  }
}

class NoSelfRelationFact {
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public NoSelfRelationFact(Association assoc){
  	super(assoc);
  	factName = "NoSelfRelation";
  }
  
  private String commentNoSelfRelation(){
  	return utility.addStartDottedLine()+"--The following defines no self relation rule for class "+
  		firstClassName+"\n"+utility.addEndDottedLine();
  }
  
  private String decPart(){
  	return "no "+makeVarDeclaration(firstClassName,1);
  }
  
  //This method prints no extended relation fact
  private String printNoSelfRelationFact(){
  	return factHeader()+decPart()+newMe()+noSelfRelContent()+"\n}";
  }
  
  //This method generates content no extended relation
  private String noSelfRelContent(){
  	return makeVarName(firstClassName,1)+" in "+
  		makeVarName(firstClassName,1)+".^"+rName2;
  }
  
  public String print(){
  	return commentNoSelfRelation()+printNoSelfRelationFact();
  }
}

class BidirectionFact {
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public BidirectionFact(Association assoc){
  	super(assoc);
  	factName = "BidirectionalityRule";
  }
  
  //This methods comments bidirectionality rule
  private String commentBidirectionality(){
  	return utility.addStartDottedLine()+"--The following defines bidirectionality rule between class "+
  		firstClassName+" and class "+secondClassName+"\n"+utility.addEndDottedLine();
  }
  
  //This method computes the content of a bidirectionality rule
  private String bidirectionalContent(){
  	return makeVarName(firstClassName,1)+" in "+rName1+"["+
  	  makeVarName(secondClassName,1)+"] <=> "+makeVarName(secondClassName,1)+" in "+rName2+
  		"["+makeVarName(firstClassName,1)+"]";
  }
  //This method is responsible for printing bidirectionality fact
  private String printBidirectionFact(){
  	return factHeader()+"all "+makeVarDeclaration(firstClassName,1)+", "+
  		makeVarDeclaration(secondClassName,1)+ newMe() +bidirectionalContent()+"\n}";
  }
  
  public String print(){
  	return commentBidirectionality()+printBidirectionFact();
  }
}

class NonReflexiveFact{
  depend cruise.umple.compiler.*; 
  isA Fact;
  
  public NonReflexiveFact(Association assoc){
  	super(assoc);
  	factName = "NonReflexiveRule";
  }  
  
  private String content(){
  	return makeVarName(secondClassName,1)+" in "+
  	  rName2+"["+makeVarName(secondClassName,1)+"]\n}";
  }
  
  //This methods comments non reflexive rule
  private String comment(){
  	return utility.addStartDottedLine()+"-- The following defines non-reflexive rule for class "+
  	  secondClassName+"\n"+utility.addEndDottedLine();
  }
  
  private String declaration(){
    return "no "+makeVarDeclaration(secondClassName,1);
  }
  
  public String print(){
  	return comment()+factHeader()+declaration()+newMe()+content();
  }
} 

class SymmetricFact {
  
  depend cruise.umple.compiler.*;
  isA Fact;
  
  public SymmetricFact(Association assoc){
    super(assoc);
    factName = "SymmetricRelation";
  }
  
  private String declaration(){
    return "all "+makeVarDeclaration(secondClassName,2)+newMe();
  }
  
  private String comment(){
    return utility.addStartDottedLine()+"-- The following defines symmetric rule for class "+
  	  secondClassName+"\n"+utility.addEndDottedLine();
  }
  
  private String content(){
    return makeVarName(secondClassName,1)+" in "+
  	  rName2+"["+makeVarName(secondClassName,2)+"] <=> "+makeVarName(secondClassName,2)+" in "+
  	  rName2+"["+makeVarName(secondClassName,1)+"]\n}";
  }
  
  public String print(){
    return comment()+factHeader()+declaration()+content();
  }
}


class NumericBoundFact {
  isA Fact;
  depend cruise.umple.compiler.*;
  
  String className;
  String rName;
  Multiplicity mult;
  Integer index;
  
  after constructor
  {
    factName = "NumericBoundFact";
  }
  
  public NumericBoundFact(Association assoc,int endIndex)
  {
    super(assoc);
    factName = "NumericBoundFact";
    index = endIndex;
    mult = assoc.getEnd(index).getMultiplicity();
    initializeExtraVar();
  }
  
  private void initializeExtraVar()
  {
    if(index == 0)
    {
      className = secondClassName;
      rName = rName1;
    }
    else 
    {
      className = firstClassName;
      rName = rName2;
    }
  }
  
  private Integer analyzeEndMult()
  { 
    int m = mult.getUpperBound(), n = mult.getLowerBound();
    if(m == n && m != 1) return 1;
    if(n == 0 && m != 1 && m != -1) return 3;
    if(m != n && m != -1 && n != -1 && m != 1) return 2; 
    return 0;
  }
  
  private String declaration()
  {
    return "no "+makeVarDeclaration(className,1)+newMe();
  }
  
  private String temp()
  {
    return "#"+makeVarName(className,1)+"."+rName;
  }
  
  private String content()
  {
    if(analyzeEndMult() == 1)
      return temp()+" != "+mult.getUpperBound()+"\n}";
    if(analyzeEndMult() == 2)
      return temp()+" < "+mult.getLowerBound()+" || "+
        temp()+" > "+mult.getUpperBound()+"\n}";
    if(analyzeEndMult() == 3)
      return temp()+" > "+mult.getUpperBound()+"\n}";
    return "";
  }
  
  private String comment()
  {
  	return utility.addStartDottedLine()+"-- The following defines numeric bound rule for class "+
  	  className+"\n"+utility.addEndDottedLine();
  }
  
  public String print()
  {
    if(content() != "")
      return comment()+factHeader()+declaration()+content();
    return "";
  } 
}