namespace cruise.umple.alloy;

class Fact {
  depend java.lang.StringBuilder;
  depend cruise.umple.compiler.*; 
  
  Utility utility;
  factName;
  firstClassName;
  secondClassName;
  rName1;
  rName2;
  
  //This constructor builds a fact from a given name and an association
  public Fact(String nam, Association assoc){
	utility = new Utility();
	factName = nam;
	firstClassName = utility.getLeftEndName(assoc);
	secondClassName = utility.getRightEndName(assoc);
	rName1 = utility.getLeftRoleName(assoc);
	rName2 = utility.getRightRoleName(assoc);
  }
  
  //This method is responsible for printing bidirectionality fact
  private void printBidirectionFact(StringBuilder sb){
  	genFactHead(sb);
  	utility.addNewLine(sb,1);
  	utility.addTab(sb,2);
  	utility.addString(sb,"all ");
  	utility.addString(sb,makeVarDeclaration(firstClassName,1));
  	utility.addString(sb,", ");
  	utility.addString(sb,makeVarDeclaration(secondClassName,1));
  	utility.addString(sb," |");
  	bidirectionalContent(sb);
  	utility.addNewLine(sb,1);
  	utility.addCurlyBracket(sb,2);
  }
  
  //This method generates the header for any given fact
  private void genFactHead(StringBuilder code){
  	utility.addString(code,"fact");
  	utility.addTab(code,1);
  	utility.addString(code,factName);
  	utility.addTab(code,1);
  	utility.addCurlyBracket(code,1);
  }
  
  //This method computes the content of a bidirectionality rule
  private void bidirectionalContent(StringBuilder sb){
  	utility.addNewLine(sb,1);
  	utility.addTab(sb,4);
  	utility.addString(sb,makeVarName(firstClassName,1)+" in "+rName1+"["+
  		makeVarName(secondClassName,1)+"] <=> "+makeVarName(secondClassName,1)+" in "+rName2+
  			"["+makeVarName(firstClassName,1)+"]");
  }
  
  //This methods comments bidirectionality rule
  private void commentBidirectionality(StringBuilder sb){
  	utility.addNewLine(sb,2);
  	utility.addStartDottedLine(sb);
  	utility.addString(sb,"--The following defines bidirectionality rule between class "+
  		firstClassName+" and class "+secondClassName+"\n");
  	utility.addEndDottedLine(sb);
  }
  
  private String makeVarName(String name,Integer num){
  	return name.toLowerCase()+"_"+num;
  }
  
  //This method handles variable declaration for a given object
  private String makeVarDeclaration(String cName, int num){
	String tempName = cName.toLowerCase(),
			out = "";
	if(num == 1){
		return makeVarName(cName,1)+" : "+cName;	 		
	}
	if(num > 1){
		int i = 1;
		while(i < num){
			out += out+makeVarName(cName,num)+",";
			i++;
		}
	 		out += out+makeVarName(cName,1)+" : "+cName;
	}
	return out;
  }
 
  //This method prints a typical fact information in a nicely formatted manner
  public void print(StringBuilder sb){
  	switch(factName){
  		case "BidirectionalityRule" : commentBidirectionality(sb); 
  					printBidirectionFact(sb);
  		default: ;
  	}
  } 
}