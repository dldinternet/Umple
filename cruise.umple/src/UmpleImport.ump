/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Model for importing XMI and generating Umple code

*/

namespace cruise.umple.compiler;

/* 
 * SAX, streamed-base push JAXP API
 */
external DefaultHandler{}

/* 
 * Parse ECore by extend SAX handler callbacks
 */
class EcoreImportHandler
{	
	depend java.io.File;
	depend java.io.IOException;
	depend java.nio.file.Paths;
	depend javax.xml.parsers.ParserConfigurationException;
	depend javax.xml.parsers.SAXParser;
	depend javax.xml.parsers.SAXParserFactory;
	depend org.xml.sax.Attributes;
	depend org.xml.sax.SAXException;
	depend org.xml.sax.SAXParseException;
	depend org.xml.sax.helpers.DefaultHandler;
	isA DefaultHandler;
}

/* 
 * Defines import prototype for package, class, interface 
 * and associations
 */ 
class UmpleImportElement
{
	abstract;
	
	//identifier from xmi
	id;
	//name attribute from xmi
	name;
	StringBuilder umpleBuilder = new StringBuilder();
	
	abstract String generateUmple();
}

/* 
 * integration of all importElements as a model
 */ 
class UmpleImportModel
{   
	depend cruise.umple.util.SampleFileWriter;
	
	0..1 -> * UmpleImportElement;
	
	currentPackageName;	
}

class UmpleImportPackage
{
	isA UmpleImportElement;
}

class UmpleImportClass
{
	isA UmpleImportElement;
	
	0..1 -> * UmpleImportAttribute;
	0..1 -> * UmpleImportAssociation;
	
	packageName;
	Boolean isAbstract;
	Boolean isInterface;
	String[] superTypes;
}

class UmpleImportAttribute
{
	isA UmpleImportElement;
	
	className;
	dataType;
	//primitive type as default
	lazy Integer lowerBound;
	//primitive type as default
	Integer upperBound=1;
}

class UmpleImportAssociation
{
	depend cruise.umple.util.StringFormatter;
	
	isA UmpleImportElement;
	
	//root class
	startClass;
	//eType
	endClass;
	//eOpposite
	endClassName;
    lazy Integer lowerBound;
	Integer upperBound = 1;
	lazy Integer otherLowerBound;
	Integer otherUpperBound = 1;
}

class UmpleImportConstants
{
	singleton;
	
	const XMI_TYPE="xsi:type";
	const XMI_NAME="name";
	const XMI_PACKAGENAME="nsURI";
	const XMI_INTERFACE="interface";
	const XMI_ABSTRACT="abstract";
	const XMI_SUPERTYPE="eSuperTypes";
	const XMI_UPPER = "upperBound";
	const ECORE_PACKAGE = "ecore:EPackage";
	const ECORE_CLASS = "ecore:EClass";
	const ECORE_ATTRIBUTE = "ecore:EAttribute";
	const ECORE_TYPE = "eType";
	const ECORE_DATATYPE = "ecore:EDataType";
	const ECORE_REFERENCE = "ecore:EReference";
}

use UmpleImport_CodeHandlers.ump;
use UmpleImport_CodeModels.ump;
