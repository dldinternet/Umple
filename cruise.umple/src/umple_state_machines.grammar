// The master of this part of the Umple grammar is available at
// [*http://code.google.com/p/umple/source/browse/trunk/cruise.umple/src/umple_state_machines.grammar*]

// Copyright: All contributors to the Umple Project
// This file is made available subject to the open source license found at:
// [*http://umple.org/license*]

// State machine elements in Umple. See user manual page: [*BasicStateMachines*]
stateMachineDefinition : statemachine [=queued]? [name] { [[state]]* }
stateMachine : [[enum]] | [[inlineStateMachine]] | [[referencedStateMachine]] | [[activeDefinition]] 

activeDefinition : [=active] [name]? { [**code] }

inlineStateMachine : [=queued]? [name] { ( [[comment]] | [[state]] | [[trace]] | [=-||] )* }
referencedStateMachine : [name] as [definitionName] ; | [name] as [definitionName] { [[extendedStateMachine]] }

extendedStateMachine : ( [[comment]] | [=changeType:+|-|*]? [[state]] )*

// An enum is a state machine that has no events
// 	stateName is prefixed with ~ to match alphanumeric names only.
// 	This is needed to solve issue 399, which is cause when a terminating } is parsed as part of the statename. 
enum : [name] { } | [name] { [~stateName] (, [~stateName])* }

state : [=final]? [stateName] { [[stateInternal]]* } 
stateInternal- : [[comment]] | [=changeType:+|-|*]? [[stateEntity]]
stateEntity- : [=-||] | [[entryOrExitAction]] | [[autoTransition]] | [[transition]] | [[activity]] | [[state]] | [[trace]] | ;

autoTransition : [[autoTransitionBlock]] | [[activity]] [[autoTransitionBlock]]


// Autotransitions have no event. The transition is immediately taken
// or taken after the do activity ends
// The action can come before or after the arrow
autoTransitionBlock- : [[guard]]? -> [[action]]? [stateName] ; |  [[guard]]? [[action]]? -> [stateName] ;

// A transition guard can come before or after the arrow
// The order of guard and event definition can also be interchanged
transition : [[guard]]? [[eventDefinition]]? -> [[action]]? [stateName] ; | [[guard]]? [[eventDefinition]]? [[action]]? -> [stateName] ; | [[eventDefinition]]? [[guard]]? -> [[action]]? [stateName] ; | [[eventDefinition]]? [[guard]]? [[action]]? -> [stateName] ; 

eventDefinition- : [[afterEveryEvent]] | [[afterEvent]] | [~event] ( [[parameterList]] )?
afterEveryEvent- : afterEvery -( [timer] -)
afterEvent- : after -( [timer] -)
parameterList : OPEN_ROUND_BRACKET [[parameter]] ( , [[parameter]] )* CLOSE_ROUND_BRACKET 
parameter : ([=list:[]] [name] | [type] [=list:[]] [name] | [type,name>1,0])

// An action can be executed on a transition, or on entry or exit
action : / ([[codeLang]] [[codeLangs]])? { [**code] } ( [[moreCode]] )*
entryOrExitAction : [=type:entry|exit] / ([[codeLang]] [[codeLangs]])? { [**code] } ( [[moreCode]] )*

// A do activity is long-lasting and can be interrupted
activity : do ([[codeLang]] [[codeLangs]])? { [**code] } ( [[moreCode]] )*

guard : [ [[constraint]] ]
