/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file analyze class related umple meta model tokens such class declarations,
associations and attributes and populates the umple meta model.

Please refer to UmpleInternalParser.ump for more detailsub.

 */

namespace cruise.umple.compiler;

class UmpleInternalParser
{  

  private void analyzePrecondition (Token preconditionToken, UmpleClass aClass, Method method)
  {
    List<ConstraintVariable> cvs = analyzeConstraint(preconditionToken, aClass); //adds all identifiers to constraints
    Precondition precondition = new Precondition(method);
    
    for(ConstraintVariable cv: cvs)
    {
    	precondition.addExpression(cv);
    }  
    aClass.addPrecondition(precondition);
  }
    
  /*
   * Analyzes a token recognized as a constraint
   * 
   * @param invariantToken The token containting the constraintsub.
   * @param aClass The Umple class for which an attribute is being constrained.
   */
  private void analyzeInvariant (Token invariantToken, UmpleClass aClass)
  {
    List<ConstraintVariable> cvs = analyzeConstraint(invariantToken, aClass); //adds all identifiers to constraints
    Constraint constraint = new Constraint();
    
    for(ConstraintVariable cv: cvs)
    {
    	constraint.addExpression(cv);
    }  
    aClass.addConstraint(constraint);
  }
  
   //This recursive function parses the expression. It's very broken down to allow new features to be added easily.
  private List<ConstraintVariable> analyzeConstraint(Token invariantToken, UmpleClass aClass)
  {
    List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
    List<Token> subs = invariantToken.getSubTokens();
    for (Token sub : subs)
    {
      if (sub.is("brace"))
      {
        rawLine.add(new ConstraintVariable("SYNTAX",sub.getValue()));
      }
      if (!sub.getValue().equals("STATIC"))
      { 
        if (sub.is("genExpr"))
        {
          rawLine.addAll(analyzeGeneralConstraintExpression(sub,aClass));  
        }        
        else if (sub.is("boolExpr"))
        {
          rawLine.addAll(analyzeBooleanConstraintExpression(sub,aClass));
        } 
        else if (sub.is("stringExpr"))
        {
          rawLine.addAll(analyzeStringConstraintExpression(sub,aClass));
        }
        else if (sub.is("numExpr"))
        {
          rawLine.addAll(analyzeNumberConstraintExpression(sub,aClass));
        }
        else if (sub.is("numExpr2"))
        {
          rawLine.addAll(analyzeNumberConstraintExpression(sub,aClass));
        }
        else if (sub.is("associationExpr"))
        {
          rawLine.addAll(analyzeAssociationConstraintExpression(sub,aClass));
        }
        else if(sub.is("loneBoolean"))
        {
          rawLine.add(analyzeConstraintName(sub.getSubToken(0),aClass,true));
        }
        else if (sub.is("linkingOp")){
        	rawLine.addAll(analyzeLinkingOpExpression(sub,aClass));
        }
        else if (sub.is("negativeConstraint")){
        	rawLine.addAll(analyzeNegativeConstraint(sub, aClass));
        }
        else
        {
          rawLine.addAll(analyzeConstraint(sub,aClass));
        }
      } 
    }
  return rawLine;
  }
  
  private List<ConstraintVariable> analyzeNegativeConstraint(Token negativeConstraintToken, UmpleClass aClass){
	  List<Token> negativeConstraintSubtokens = negativeConstraintToken.getSubTokens();
	  List<Token> subtokensCopy = new ArrayList<Token> ();
	  subtokensCopy.addAll(negativeConstraintSubtokens);
	  
	  List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
	 
	  rawLine.add(new ConstraintVariable("OPERATOR","!"));
	 
	  for (Token s :subtokensCopy){
		   String name = s.getName();
	      	if (name.equals("!")|name.equals("not")|name.equals("~")){
	      		negativeConstraintToken.removeSubToken(s);	
	      	}
	      }
	  
	  rawLine.addAll(analyzeConstraint(negativeConstraintToken, aClass)); 
	  

	  return rawLine; //rawLine = !(constraintBodystuff)
  }
  
  private List<ConstraintVariable> analyzeLinkingOpExpression(Token linkingOpExpressionToken , UmpleClass aClass)
  {
	  List<Token> LinkingOpExpressionSubtokens = linkingOpExpressionToken.getSubTokens();
	  List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
	  
	  Token subOp = LinkingOpExpressionSubtokens.get(0); //the linking Expr (ie) &&, ||
	  
	
      if (subOp.is("||")||subOp.is("orOp"))
	  {
		  rawLine.add(new ConstraintVariable("OPERATOR","||"));
	  } 
	  else if (subOp.is("andOp"))
	  {
		  rawLine.add(new ConstraintVariable("OPERATOR","&&"));
	  }
	  rawLine.addAll(analyzeConstraint(linkingOpExpressionToken.getSubToken(1), aClass)); 

	  return rawLine;

  }
  private List<ConstraintVariable> analyzeGeneralConstraintExpression(Token generalExpressionToken, UmpleClass aClass)
  {
	List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
	List<Token> generalExpressionSubtokens = generalExpressionToken.getSubTokens();
    for(Token sub : generalExpressionSubtokens)
    {
      if (sub.getValue().equals("STATIC"))
      {
        if(!sub.getName().equals("}")&&!sub.getName().equals("{")&&!sub.getName().equals("[")&&!sub.getName().equals("]")&&!sub.getName().equals("\'")&&!sub.getName().equals("\""))
          rawLine.add(new ConstraintVariable("SYNTAX",sub.getName()));
      } 
      else if(sub.is("constraintName"))
      {
        rawLine.add(analyzeConstraintName(sub,aClass,true));
      }
      else if(sub.is("equalsOp"))
      {
		ConstraintVariable cv = new ConstraintVariable("OPERATOR","==");
        cv.setIsPrimitive(false);
        rawLine.add(cv); 
      }
      else if(sub.is("notequalsOp"))
      {
        ConstraintVariable cv = new ConstraintVariable("OPERATOR","==");
        cv.setIsPrimitive(false);
        rawLine.add(cv); 
      }
    }
    return rawLine;
  }
  
  private List<ConstraintVariable> analyzeBooleanConstraintExpression(Token booleanExpressionToken , UmpleClass aClass)
  {
  	List<Token> BooleanExpressionSubtokens = booleanExpressionToken.getSubTokens();
  	List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
  	for(Token sub : BooleanExpressionSubtokens)
    {
      if (sub.getValue().equals("STATIC"))
      {
        if(!sub.getName().equals("}")&&!sub.getName().equals("{")&&!sub.getName().equals("[")&&!sub.getName().equals("]")&&!sub.getName().equals("\'")&&!sub.getName().equals("\""))
          rawLine.add(new ConstraintVariable("SYNTAX",sub.getName()));
      }
      else if (sub.getValue().equals("true"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR","true"));
      } 
      else if (sub.getValue().equals("false"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR","false"));
      }
      else if(sub.is("constraintName"))
      {
        rawLine.add(analyzeConstraintName(sub,aClass,true,"boolean"));
      }
      else if(sub.is("equalsOp"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR","=="));
      }
      else if(sub.is("notequalsOp"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR","!="));
      }           
    }
    return rawLine;
  }
  
  /*
  cardinal && all : not doable
  cardinal && !all : for each number in the list, size == that number ||, if assLit/name then size == number of elements in the list
  !cardinal && all : for each number or name have a contains() &&, not currently implemented for a list of lists
  !cardinal && !all : for each number or name have a contains() ||, not currently implemented for a list of lists
  */
  private List<ConstraintVariable> analyzeAssociationLiteralConstraintExpression(Token literalToken, UmpleClass aClass, boolean cardinal, boolean all, boolean firstName, List<ConstraintVariable> subject, ConstraintVariable operator)
  {
    List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
    for(Token sub:literalToken.getSubTokens())
    {
      if(sub.is("associationLit"))
      {
        rawLine.addAll(analyzeAssociationLiteralConstraintExpression(sub, aClass, cardinal, all, firstName, subject, operator));
        firstName = false;
      }
      else if(sub.is("constraintName"))
      {
        if(!firstName)
        {
          if(all&&!cardinal)
          {
            rawLine.add(new ConstraintVariable("OPERATOR","&&"));
          }
          else 
          {
            rawLine.add(new ConstraintVariable("OPERATOR","||"));
          }          
        }
        else
        {
          firstName = false;
        }
        rawLine.addAll(subject);
        rawLine.add(operator);
        rawLine.add(analyzeConstraintName(sub,aClass,true));
      }
      else if(sub.is("elements"))
      {
        if(!cardinal)
        {
          operator.setValue("cardinality==");
        }
      }
      else if(sub.is("number"))
      {
        if(!firstName)
        {
          if(all&&!cardinal)
          {
            rawLine.add(new ConstraintVariable("OPERATOR","&&"));
          }
          else 
          {
            rawLine.add(new ConstraintVariable("OPERATOR","||"));
          }          
        }
        else
        {
          firstName = false;
        }
        rawLine.addAll(subject);
        rawLine.add(operator);
        rawLine.add(analyzeConstraintNumber(sub));
        firstName = false;
      }
    }
    return rawLine;
  }
  
  private List<ConstraintVariable> analyzeAssociationConstraintExpression(Token associationExpressionToken , UmpleClass aClass)
  {
  	List<Token> associationExpressionSubtokens = associationExpressionToken.getSubTokens();
  	List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
  	List<ConstraintVariable> subject = new ArrayList<ConstraintVariable>();
  	boolean card = associationExpressionToken.getValue("firstOp").equals("cardinality");
  	boolean all = false;
  	ConstraintVariable operator = new ConstraintVariable("OPERATOR",associationExpressionToken.getValue("firstOp"));
  	operator.setIsPrimitive(false);
  	for(Token sub : associationExpressionSubtokens)
    {
      if(sub.is("constraintName"))
      {
        subject.add(analyzeConstraintName(sub,aClass,true));
      }
      else if(sub.is("associationLit"))
      {
        rawLine.addAll(analyzeAssociationLiteralConstraintExpression(sub,aClass,card,all,true,subject,operator));
      }
      else if(sub.is("all"))
      {
        if(!card)
        {
          operator.setValue("hasAll");
          all = true;
        }
        else
        {
          //warning that cardinality all is not supported
        }
      }
      else if(sub.is("moreOp"))
      {        
        if(!card)
        {
          card = true;
        }
        operator.setValue("cardinality>");
      }
      else if(sub.is("smallerOp"))
      {        
        if(!card)
        {
          card = true;
        }
        operator.setValue("cardinality<");
      }
      else if(sub.is("greaterOp"))
      {        
        if(!card)
        {
          card = true;
        }
        operator.setValue("cardinality>=");
      }
      else if(sub.is("lessOp"))
      {        
        if(!card)
        {
          card = true;
        }
        operator.setValue("cardinality<=");
      }
      else if(sub.is("equalsOp"))
      {        
        if(!card)
        {
          card = true;
        }
        operator.setValue("cardinality==");
      }
      else if(sub.is("notequalsOp"))
      {        
        if(!card)
        {
          card = true;
        }
        operator.setValue("cardinality!=");
      }
    }
    return rawLine;
  }
  
  private List<ConstraintVariable> analyzeStringConstraintExpression(Token stringExpressionToken , UmpleClass aClass)
  {
  	List<Token> stringExpressionSubtokens = stringExpressionToken.getSubTokens();
  	List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
  	for(Token sub : stringExpressionSubtokens)
    {
      if (sub.getValue().equals("STATIC"))
      {
        if(!sub.getName().equals("}")&&!sub.getName().equals("{")&&!sub.getName().equals("[")&&!sub.getName().equals("]")&&!sub.getName().equals("\'")&&!sub.getName().equals("\""))
          rawLine.add(new ConstraintVariable("SYNTAX",sub.getName()));
      }
      else if (sub.is("quote"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR","\""+sub.getValue()+"\""));
      }
      else if(sub.is("constraintName"))
      {
        rawLine.add(analyzeConstraintName(sub,aClass,true,"string"));
      }
      else if(sub.is("equalsOp"))
      {
        ConstraintVariable cv = new ConstraintVariable("OPERATOR","==");
        cv.setIsPrimitive(false);
        rawLine.add(cv);        
      }
      else if(sub.is("notequalsOp"))
      {
        ConstraintVariable cv = new ConstraintVariable("OPERATOR","!=");
        cv.setIsPrimitive(false);
        rawLine.add(cv); 
      }           
    }
    return rawLine;
  }
  
  private List<ConstraintVariable> analyzeNumberConstraintExpression(Token numberExpressionToken, UmpleClass aClass)
  {
	List<ConstraintVariable> rawLine = new ArrayList<ConstraintVariable>();
	List<Token> numberExpressionSubtokens = numberExpressionToken.getSubTokens();
    for(Token sub : numberExpressionSubtokens)
    {
      if (sub.getValue().equals("STATIC"))
      {
      	if(!sub.is("}")&&!sub.is("{")&&!sub.is("[")&&!sub.is("]")&&!sub.is("\'")&&!sub.is("\""))
          rawLine.add(new ConstraintVariable("SYNTAX",sub.getName()));
      } 
      else if(sub.is("constraintName"))
      {
        rawLine.add(analyzeConstraintName(sub,aClass,true,"integer","float","double"));
      }
      else if(sub.is("number"))
      {
        rawLine.add(analyzeConstraintNumber(sub));
      }
      else if(sub.is("moreOp"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR",">"));
      }
      else if(sub.is("smallerOp"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR","<"));
      }
      else if(sub.is("greaterOp"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR",">="));
      }
      else if(sub.is("lessOp"))
      {
        rawLine.add(new ConstraintVariable("OPERATOR","<="));
      }
      else if(sub.is("equalsOp"))
      {
        ConstraintVariable cv = new ConstraintVariable("OPERATOR","==");
        rawLine.add(cv);        
      }
      else if(sub.is("notequalsOp"))
      {
        ConstraintVariable cv = new ConstraintVariable("OPERATOR","!=");
        rawLine.add(cv); 
      } 
    }
    return rawLine;
  }
  
  boolean mustWarn = true;
  private ConstraintVariable analyzeConstraintName(Token nameToken, UmpleClass aClass, boolean mustBeInClass, String... type)
  {
  	Token grandparentToken = nameToken.getParentToken().getParentToken();
  	ConstraintVariable cv = new ConstraintVariable("NAME","");
  	cv.setSubConstraint(new Constraint());
  	boolean isNew = false;
  	boolean isComplex = nameToken.numberOfSubTokens()>1;
  	for(Token sub:nameToken.getSubTokens())
  	{
  	  if(sub.is("constraintParameterList"))
  	  {
  	    for(Token param: sub.getSubTokens())
  	    {
  	      if(param.is("constraintParameter"))
  	      {
  	        Token value = param.getSubToken(0);
  	        if(value.is("boolLit"))
  	        {
  	          cv.getSubConstraint().addExpression(new ConstraintVariable("SYNTAX",sub.getValue()));
  	        }
  	        else if(value.is("quote"))
  	        {
  	          cv.getSubConstraint().addExpression(new ConstraintVariable("OPERATOR","\""+sub.getValue()+"\""));
  	        }
  	        else if(value.is("number"))
  	        {
  	          cv.getSubConstraint().addExpression(analyzeConstraintNumber(value));
  	        }
  	        else if(value.is("constraintName")){
  	          cv.getSubConstraint().addExpression(analyzeConstraintName(value,aClass,false));
  	        }
  	      }
  	      else
  	      {
  	        cv.getSubConstraint().addExpression(new ConstraintVariable("SYNTAX",param.getName()));
  	      }
  	    }
  	  }
  	  else if(sub.is("index"))
  	  {  	    
        analyzeConstraintIndex(sub,cv);
  	  }
  	  else if(sub.is("new"))
  	  {  	    
  	    isNew = true;
        cv.getSubConstraint().addExpression(new ConstraintVariable("OPERATOR","initialise").isNotPrimitive());
  	  }
  	  else if(sub.is("constraintScopeOperator"))
  	  {
  	    ConstraintVariable dot = new ConstraintVariable("OPERATOR",".");
  	    dot.setIsPrimitive(false);
  	    cv.getSubConstraint().addExpression(dot);
  	    mustWarn = false;
  	    for(Token subsub:sub.getSubTokens()){
  	      if(subsub.is("constraintName"))
  	      {
  	        cv.getSubConstraint().addExpression(analyzeConstraintName(subsub,aClass,true));
  	      }
  	    }  	    
  	    mustWarn = false;
  	  }
  	  else if(sub.is("name"))
  	  {
  	    cv.setValue(sub.getValue());
  	    cv.getAttribute(aClass);
  	    ConstraintVariable name = new ConstraintVariable("",sub.getValue());
  	    cv.getSubConstraint().addExpression(name);
  	    if("this".equals(name.getValue()))
  	    {
  	      continue;
  	    }
  	    UmpleVariable attribute;
        if(mustBeInClass)
        {
          attribute = name.getAttribute(aClass);
          
          if(attribute!=null||isNew)
          {
      	    if(type!=null&&type.length!=0)
      	    {
      	      boolean isType = false;
      	      String typesFailed = "";
      	      for(String t: type)
      	      {
      	        if((isNew?sub.getValue():attribute.getType()).toLowerCase().equals(t))
                {
                  isType = true;
                }          
                else
                {
                  typesFailed += t+",";
                }
              }
              if(!isType)
              {
          	    setFailedPosition(sub.getPosition(), 29, sub.getValue(), typesFailed);
              }
            }
            name.setType(isNew?sub.getValue():attribute.getType());
          }
          else if (grandparentToken.getName().equals("precondition"))
          { //if it was a precondition, check if it matches any of the method arguments
    	    Token concreteMethod = grandparentToken.getParentToken();
    	    ArrayList<MethodParameter> methodparams = new ArrayList<MethodParameter>();
    	    for (Token t : concreteMethod.getSubTokens())
    	    {
              if (t.getName().equals("methodDeclarator"))
              {
    		    for (Token st : t.getSubTokens())
    		    {
    	          if (st.getName().equals("parameterList"))
    	          {
    			    for (Token sst : st.getSubTokens())
    		        {
    			      if(sst.getName().equals("parameter"))
    			      {
    				    String paramName = null;
    				    String paramType = null;
    				    for (Token ssst: sst.getSubTokens())
    				    {
    				      if (ssst.getName().equals("type"))
    				      {
    					    paramType = ssst.getValue();
    				      }
    				      if (ssst.getName().equals("name"))
    				      {
    				        paramName = ssst.getValue();
    				      }
    				    }
    				    MethodParameter mp = new MethodParameter(paramName, paramType, null, null, false);
    			        methodparams.add(mp);
    			      }
    			    }
    	          }
    		    }
    	      }
    	      boolean matchesAnyMethodParams = false;
    	      for (MethodParameter mp : methodparams)
    	      { 
    	 	    if (mp.getName().equals(sub.getValue()))
    		    {
    	          matchesAnyMethodParams = true; 
    		      cv.setType(mp.getType());
    		    }
    	      }
            }
          }
          else if(attribute==null)
          {
            if(!isComplex&&mustWarn&&aClass!=null){
              setFailedPosition(sub.getPosition(), 28, sub.getValue(), aClass.getName());
            }      
          }          
        }
      }
    }
    mustWarn = true;
    return cv;
  }
  private ConstraintVariable analyzeConstraintNumber(Token numberToken)
  {
    return new ConstraintVariable("OPERATOR",numberToken.getValue());
  }
  private void analyzeConstraintIndex(Token indexToken, ConstraintVariable cv)
  {
  	Token sub = indexToken;
  	try {
      int i = Integer.parseInt(sub.getValue());
      if(cv.getIsAssociation())
      {
        cv.setIndex(i);
      }
      else
      {
        setFailedPosition(sub.getPosition(), 29, cv.getValue(), "association or list");
      }
    } catch (NumberFormatException e) {
      setFailedPosition(sub.getPosition(), 29, sub.getValue(), "integer");
    } 
  	   
  }   
}
