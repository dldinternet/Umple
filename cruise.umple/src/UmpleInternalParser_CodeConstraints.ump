/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file analyze class related umple meta model tokens such class declarations,
associations and attributes and populates the umple meta model.

Please refer to UmpleInternalParser.ump for more detailsub.

 */

namespace cruise.umple.compiler;

class UmpleInternalParser
{
  private void analyzePrecondition (Token preconditionToken, UmpleClassifier uClassifier, Method method)
  {
    if(((PreconditionAnalyzer)model.getAnalyzer("precondition"))!=null){
      ((PreconditionAnalyzer)model.getAnalyzer("precondition")).setUClassifier(uClassifier);
      ((PreconditionAnalyzer)model.getAnalyzer("precondition")).setMethod(method);
      model.getAnalyzer("precondition").analyzeToken(preconditionToken);
    }
    
  }

  private void analyzePostcondition (Token postconditionToken, UmpleClassifier uClassifier, Method method)
  {
    if(((PostconditionAnalyzer)model.getAnalyzer("postcondition"))!=null){
      ((PostconditionAnalyzer)model.getAnalyzer("postcondition")).setUClassifier(uClassifier);
      ((PostconditionAnalyzer)model.getAnalyzer("postcondition")).setMethod(method);
      model.getAnalyzer("postcondition").analyzeToken(postconditionToken);
    }
  }
    
  /*
   * Analyzes a token recognized as a constraint
   * 
   * @param invariantToken The token containing the constraint.
   * @param aClass The Umple class for which an attribute is being constrained.
   */
  private void analyzeInvariant (Token invariantToken, UmpleClassifier uClassifier)
  {
    if(((InvariantAnalyzer)model.getAnalyzer("invariant"))!=null){
      
      ((InvariantAnalyzer)model.getAnalyzer("invariant")).setUClassifier(uClassifier);
      model.getAnalyzer("invariant").analyzeToken(invariantToken);
    }
  }
     
/*
 * Analyzes a token recognized as a model contraint.
 *
 * @param modelConstraintToken The token containing the constraint.
 */
  private void analyzeModelConstraint(Token modelConstraintToken, UmpleClassifier uClassifier)
  {
    if(((ModelConstraintBodyAnalyzer)model.getAnalyzer("modelConstraintBody"))!=null){
      model.getAnalyzer("modelConstraintBody").analyzeToken(modelConstraintToken);
      uClassifier.addModelConstraint(((ModelConstraintBodyAnalyzer)model.getAnalyzer("modelConstraintBody")).getModelConstraint());
      ((ModelConstraintBodyAnalyzer)model.getAnalyzer("modelConstraintBody")).reset();
    }
  }
}
