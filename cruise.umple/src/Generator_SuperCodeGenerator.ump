class SuperCodeGenerator {
  after constructor {
    UmpleToPrimitiveMap = new HashMap<String, String>();
    TraceLookupMap = new HashMap<String,String>();	
    ConstraintLookupMap = new HashMap<String,String>();
    initializeLangaugeBasedVariables();
  }

  protected Map<String,String> UmpleToPrimitiveMap = new HashMap<String,String>();
  protected Map<String,String> TraceLookupMap = new HashMap<String,String>();
  protected Map<String,String> ConstraintLookupMap = new HashMap<String,String>();

  public abstract void initializeLangaugeBasedVariables();

  public String getType(UmpleVariable av) {
    String myType = av.getType();
    if (myType == null || myType.length() == 0)
    {
      return UmpleToPrimitiveMap.get("String");
    }
    else if (UmpleToPrimitiveMap.containsKey(myType))
    {
      return UmpleToPrimitiveMap.get(myType);
    }
    else
    {
      return myType;
    }
  }
  	
  public String translate(String keyName, TraceItem ti)
  {
    if (keyName.length()>5&&"trace".equals(keyName.substring(0,5)))
    {
      return TraceLookupMap.get(keyName.substring(5).toLowerCase());
    }
    else 
    {
      return "INVALID KEYNAME IN TRANSLATE";
    }
  }
  
  public String umpleCVarToLanguagePrimitive(String name, ConstraintVariable expr)
  {
    return name;
  }
  	
  public String translate(String format, Constraint constraint)
  {
    if(constraint==null)
    {
      return "{0}";
    }
    String expression = "";
    boolean insertNext = false;
    boolean strictNext = format.contains("$strict$");
    boolean plain = format.contains("Plain");
    int mode = format.contains("allParameterOne")?0:format.contains("$constructor$")?1:2;
    List<String> names = Arrays.asList(format.split(":")[0].split(","));
    String previousName = "";
    for(int i=0;i<constraint.numberOfExpressions();i++)
    {
      ConstraintVariable expr = constraint.getExpression(i);
      if( expr.getType().equals("NAME"))
      {
        if(insertNext)
        {
          String name = //(!plain?ConstraintLookupMap.get("accessor"):"")+
        		                      translate(format+":Plain"+(strictNext?"$strict$":""),expr.getSubConstraint());
          expression = StringFormatter.format(expression,name,previousName);
          name = umpleCVarToLanguagePrimitive(name, expr);
          previousName = name;
          insertNext = false;
        }
        else
        {
          String name = //(!plain?ConstraintLookupMap.get("accessor"):"")+
        		                      translate(format+":Plain"+(strictNext?"$strict$":""),expr.getSubConstraint());
          name = umpleCVarToLanguagePrimitive(name, expr);
          expression+=name;
          previousName = name;
        }
      }
      else if(expr.getType().equals("STATE"))
      {
        String value = translate("stateOne",(expr).getState());
        if(insertNext){
          expression = StringFormatter.format(expression,value,previousName);
          insertNext = false;
        }
        else {
          expression += value;
        }
      } 
      else if(expr.getType().equals("STATEMACHINE"))
      {
        
        String value = translate("getFullMethod",(expr).getStateMachine());
        if(insertNext){
          expression = StringFormatter.format(expression,value,previousName);
          insertNext = false;
        }
        else {
          expression += value;
        }
      }
      else if( expr.getIsAttribute() )
      {
        String value;
        if(mode==0&&!strictNext)
        {
          value = (ConstraintLookupMap.get("paramaccessor"))+getParameterFromConstraint(expr,plain);
        }
        else if(mode==2&&names.contains(expr.getValue())&&!strictNext)
        {
          value = (ConstraintLookupMap.get("paramaccessor"))+getParameterFromConstraint(expr,plain);
        }
        else if(mode==1&&!strictNext)
        {
          if(expr.getFoundAttribute()!=null&&(expr.getFoundAttribute().getValue()==null||"".equals(expr.getFoundAttribute().getValue())))
          {
            value = (ConstraintLookupMap.get("paramaccessor"))+getParameterFromConstraint(expr,plain);
          }
          else
          {
            value = (ConstraintLookupMap.get("accessor"))+expr.getValue();
          }
        }
        else 
        {
          value = (strictNext?"":ConstraintLookupMap.get("accessor"))+expr.getValue();
          strictNext=false;
        }
        if(insertNext)
        {
          expression = StringFormatter.format(expression,value,previousName);
          insertNext = false;
        }
        else
        {
          expression += value;
        }
      }      
      else // STATIC OR OPERATOR
      { 
        if(expr.getValue().equals("."))
        {
          strictNext=true;
        }
        if(expr.getIsOperator()) //Operator
        {
          String opValue = expr.getValue();
          if(!expr.getIsPrimitive()&&ConstraintLookupMap.containsKey(opValue))
          {
            if(insertNext)
            {
              expression = StringFormatter.format(expression,ConstraintLookupMap.get(opValue));
              insertNext = true;
            }
            else 
            {
              expression += ConstraintLookupMap.get(opValue);
              insertNext = true;
            }
          }
          else //Static
          {
            if(insertNext)
            {
              expression = StringFormatter.format(expression,opValue,previousName);
              insertNext = false;
            }
            else 
            {
              expression += opValue;
            }
          }
        }
        else
        {
          if(insertNext)
          {
            expression = StringFormatter.format(expression,expr.getValue());
            insertNext = false;
          }
          else
          {
            expression += expr.getValue();
          }
        }
      }
    }
    if(plain)
    {
      return expression;
    }
    else if(format.contains("Not"))
    {
      expression = " !("+expression+")";
    }
    if(format.contains("Closed"))
    {
      return StringFormatter.format(ConstraintLookupMap.get("ifstatement")+"\n  {1}\n"+ConstraintLookupMap.get("end"),expression, "{0}");
    }
    else if(format.contains("Open"))
    {
      return StringFormatter.format(ConstraintLookupMap.get("ifstatement"),expression, "{0}");
    }
    return StringFormatter.format(ConstraintLookupMap.get("ifstatement")+"\n  {1}\n"+ConstraintLookupMap.get("end"),expression, "{0}");
  }
  
  public String getParameterFromConstraint(ConstraintVariable expr, Boolean plain)
  {
    if(expr.getFoundAttribute()==null)
    {
      return expr.getValue();
    }
    String value = "";
    if(!expr.getIsAssociation())
    {
      value = translate("parameterOne",(Attribute)expr.getFoundAttribute());
    }
    else 
    {
      if(expr.getIndex()==-1 )
      {
         value = translate("associationMany",(AssociationVariable)expr.getFoundAttribute());
      }
      else 
      {
        value = translate("associationMany",(AssociationVariable)expr.getFoundAttribute());
        value = StringFormatter.format(ConstraintLookupMap.get("[]"),""+expr.getIndex(), value);
      }
    }
    return value;
  }
  
  public void prepareConstraints(UmpleClass aClass)
  {
    Constraint constraint = new Constraint();
    constraint.setNegated(true);
    constraint.setFormat("$constructor$Closed");
    constraint.setInject("");
    constraint.setGen(this);
    
    Map<String,Constraint> setters = new HashMap<String,Constraint>();
    for (Constraint ac : aClass.getConstraints())
    {      
      List<ConstraintVariable> alreadyDone = new ArrayList<ConstraintVariable>();
      boolean isAssociation = false;
      CodeInjection before;
      for (ConstraintVariable cur : ac.getExpressions())
      {
        if(cur.getIsAssociation())
          isAssociation = true;
        if(!cur.getIsAttribute()  || alreadyDone.contains(cur))
          continue;
        if(cur.getSubConstraint()!=null&&cur.getSubConstraint().getExpression(0).getValue().equals("initialise"))
          continue;
        alreadyDone.add(cur);
        
        String setMethod_code = StringFormatter.format(translate(cur.getValue()+":Open",ac),"");
        
        if(cur.getIsAssociation())
        {
          String methodName = "";
          String addName = "";
          if(cur.getFoundAttribute()==null)
          {
            methodName = "set"+cur.getValue();
            addName = "add"+cur.getValue();
          }
          else
          {
            methodName = translate("setMethod", (AssociationVariable)cur.getFoundAttribute());
            addName = translate("addMethod", (AssociationVariable)cur.getFoundAttribute());
          }
          if(!setters.containsKey(methodName))
          {
            Constraint tempConstraint = new Constraint();
            tempConstraint.setFormat(cur.getValue()+":Open");
            tempConstraint.setInject("");
            tempConstraint.setGen(this);
            setters.put(methodName,tempConstraint);
            setters.put(addName, tempConstraint);
          }
          setters.get(methodName).mergeWith(ac);
          setters.get(addName).mergeWith(ac);
        }
        else 
        {
          String methodName = "";
          if(cur.getFoundAttribute()==null)
          {
            methodName = "set"+cur.getValue();
          }
          else
          {
            methodName = translate("setMethod", (Attribute)cur.getFoundAttribute());
          }
          if(!setters.containsKey(methodName))
          {
            Constraint tempConstraint = new Constraint();
            tempConstraint.setFormat(cur.getValue()+":Open");
            tempConstraint.setInject("");
            tempConstraint.setGen(this);
            setters.put(methodName,tempConstraint);
          }
          setters.get(methodName).mergeWith(ac);
        }
      }
      constraint.mergeWith(ac);
    }

    for(String methodName:setters.keySet())
    {
      CodeInjection before = new CodeInjection("before", methodName, setters.get(methodName), aClass);
      CodeInjection after = new CodeInjection("after", methodName, ConstraintLookupMap.get("end"), aClass);
      before.setIsInternal(true);
      after.setIsInternal(true);
      aClass.addCodeInjection(before);
      aClass.addCodeInjection(after);
    }
    if(constraint.numberOfExpressions()>0)
    {
      constraint.setInject(StringFormatter.format(ConstraintLookupMap.get("exception"),constraint.toString()));
      CodeInjection constructor = new CodeInjection("after",  "constructor", constraint, aClass);  
      constructor.setIsInternal(true);
      aClass.addCodeInjection(constructor);
    }
    
    for (Precondition pc : aClass.getPreconditions())
    { 
      String methodName = pc.getMethod().getName();
      pc.setNegated(true);
      pc.setGen(this);
      pc.setFormat(pc.toString().replace(" ", "").replace("and", "")+":Closed");
      pc.setInject(StringFormatter.format(ConstraintLookupMap.get("exception"),pc.toString()));
      CodeInjection before = new CodeInjection("before", methodName+"Precondition", pc, aClass);         
      before.setIsInternal(true);
      aClass.addCodeInjection(before);    
    }
    
    for (Postcondition pc : aClass.getPostconditions())
    { 
      String methodName = pc.getMethod().getName();
      pc.setNegated(true);
      pc.setGen(this);
      pc.setFormat(pc.toString().replace(" ", "").replace("and", "")+":Closed");
      pc.setInject(StringFormatter.format(ConstraintLookupMap.get("exception"),pc.toString()));
      CodeInjection before = new CodeInjection("before", methodName+"Postcondition", pc, aClass);         
      before.setIsInternal(true);
      aClass.addCodeInjection(before);    
    }
  }
}
