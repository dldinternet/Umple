class SuperCodeGenerator {
  after constructor {
    UmpleToPrimitiveMap = new HashMap<String, String>();
    TraceLookupMap = new HashMap<String,String>();	
    ConstraintLookupMap = new HashMap<String,String>();
    initializeLangaugeBasedVariables();
  }

  protected Map<String,String> UmpleToPrimitiveMap = new HashMap<String,String>();
  protected Map<String,String> TraceLookupMap = new HashMap<String,String>();
  protected Map<String,String> ConstraintLookupMap = new HashMap<String,String>();

  public abstract void initializeLangaugeBasedVariables();

  parameterConstraintName = "";
  Boolean dontDisplayNextAccessor = false;
  Boolean constraintWithinConstructor = false;

  public String getType(UmpleVariable av) {
    String myType = av.getType();
    if (myType == null || myType.length() == 0)
    {
      return UmpleToPrimitiveMap.get("String");
    }
    else if (UmpleToPrimitiveMap.containsKey(myType))
    {
      return UmpleToPrimitiveMap.get(myType);
    }
    else
    {
      return myType;
    }
  }
  	
  public String translate(String keyName, TraceItem ti)
  {
    if (keyName.length()>5&&"trace".equals(keyName.substring(0,5)))
    {
      return TraceLookupMap.get(keyName.substring(5).toLowerCase());
    }
    else 
    {
      return "INVALID KEYNAME IN TRANSLATE";
    }
  }

  private boolean testForPrimitiveInConstraint(ConstraintVariable variable)
  {
    if((variable instanceof ConstraintAttribute)&&(UmpleToPrimitiveMap.containsValue(((ConstraintAttribute)variable).getAttribute().getType())))
    {
        return !"String".equals(((ConstraintAttribute)variable).getAttribute().getType());
    }
    else if(variable instanceof ConstraintOperator)
    {
      return testForPrimitiveInConstraint(((ConstraintOperator)variable).getLeft())||testForPrimitiveInConstraint(((ConstraintOperator)variable).getRight());
    }
    else if(variable instanceof ConstraintTree)
    {
      return testForPrimitiveInConstraint(((ConstraintTree)variable).getRoot());
    }
    return false;
  }

  public String translate(String id, ConstraintVariable cv)
  {
    if("operatorOne".equals(id))
    {
      ConstraintVariable left = ((ConstraintOperator)cv).getLeft();
      if(testForPrimitiveInConstraint(left))
      {
        ((ConstraintOperator)cv).correctForPrimitive();
      }
      String leftString = (left instanceof ConstraintOperator)?translate(left.getType(),left):translate(left.getType(),left,true);
      return StringFormatter.format(translate(id,cv,true),leftString);
    }
    else if("operatorTwo".equals(id))
    {
      ConstraintVariable left = ((ConstraintOperator)cv).getLeft();
      ConstraintVariable right = ((ConstraintOperator)cv).getRight();
      if(testForPrimitiveInConstraint(left)||testForPrimitiveInConstraint(right))
      {
        ((ConstraintOperator)cv).correctForPrimitive();
      }
      String leftString = (left instanceof ConstraintOperator)?translate(left.getType(),left):translate(left.getType(),left,true);
      String rightString = (right instanceof ConstraintOperator)?translate(right.getType(),right):translate(right.getType(),right,true);
      String value = translate(id,cv,true);
      return StringFormatter.format(value,leftString,rightString);
    }
    else return translate(id,cv,true);
  }

  private String translate(String id, ConstraintVariable cv, boolean returnAll)
  {
    if("operatorTwo".equals(id)||"operatorOne".equals(id))
    {
      String value = ConstraintLookupMap.get(((ConstraintOperator)cv).getValue());
      String left = ("operatorTwo".equals(id)?"{0}":"");
      String exact = ((ConstraintOperator)cv).getValue();
      String right = ("operatorTwo".equals(id)?"{1}":"{0}");
      return value!=null?value:(left+exact+right);
    }
    else if("attribute".equals(id))
    {
      ConstraintAttribute attribute = ((ConstraintAttribute)cv);
      String methodName = "getMethod";
      String suffix = "("+(attribute.getIndex()!=-1?(""+attribute.getIndex()):"")+")";
      String prefix = ConstraintLookupMap.get("accessor");
      if(constraintWithinConstructor||attribute.getName().equals(parameterConstraintName))
      {
        methodName = "parameterOne";
        suffix = "";
        prefix = ConstraintLookupMap.get("paramaccessor");
      }
      if(dontDisplayNextAccessor)
      {
        prefix = "";
        dontDisplayNextAccessor = false;
      }
      String name = translate(methodName,attribute.getAttribute());
      return umpleCVarToLanguagePrimitive(prefix+name+suffix,cv);
    }
    else if("associationGet".equals(id))
    {
      return ConstraintLookupMap.get("accessor")+translate("getMethod",((ConstraintAssociation)cv).getAssociation())+"("+((ConstraintAssociation)cv).getIndex()+")";
    }
    else if("associationList".equals(id))
    {
      return ConstraintLookupMap.get("accessor")+translate("getManyMethod",((ConstraintAssociation)cv).getAssociation())+"()";
    }
    else if("associationNumberOf".equals(id))
    {
      return ConstraintLookupMap.get("accessor")+translate("numberOfMethod",((ConstraintAssociation)cv).getAssociation())+"()";
    }
    else if("method parameter".equals(id))
    {
      return ConstraintLookupMap.get("accessor")+((ConstraintMethodParameter)cv).getParameter().getName();
    }
    else if("state".equals(id))
    {
      return translate("stateOne", ((ConstraintState)cv).getState());
    }
    else if("statemachine".equals(id))
    {
      return translate("getFullMethod",((ConstraintStateMachine)cv).getStateMachine())+"()";
    }
    else if("literal".equals(id))
    {
      return ((ConstraintLiteral)cv).getValue();
    }
    else if("name".equals(id))
    {
      String name = "NAME NOT SET BY SUPERGENERATOR";
      if(cv instanceof ConstraintUnassignedName)
      {
        name = ((ConstraintUnassignedName)cv).getValue();
      }
      else if(cv instanceof ConstraintAttribute)
      {
        name = ((ConstraintAttribute)cv).getName();
      }
      if("".equals(name)||dontDisplayNextAccessor)
      {
        dontDisplayNextAccessor = false;
        return name;
      }
      else if("this".equals(name))
      {
        dontDisplayNextAccessor = true;
        return ConstraintLookupMap.get("paramaccessor")+name;
      }
      else 
      {
        return ConstraintLookupMap.get("accessor")+name;
      }
    }
    else if("complex".equals(id))
    {
      ConstraintTree tree = (ConstraintTree)cv;
      if(tree.getRoot()==null)return "";
      StringBuilder builder = new StringBuilder();
      if(tree.getDisplayNegation())
      {
        builder.append("!");
      }
      if(tree.getDisplayBrackets())
      {
        builder.append("(");
      }
      builder.append(tree.getRoot().getValue(this));
      if(tree.getDisplayBrackets())
      {
        builder.append(")");
      }
      return builder.toString();
    }
    return "INVALID CONSTRAINT VARIABLE";
  }
  
  public String umpleCVarToLanguagePrimitive(String name, ConstraintVariable expr)
  {
    return name;
  }
  	
  public String translate(String format, ConstraintTree constraint)
  {
    if(constraint==null)
    {
      return "{0}";
    }
    String expression = constraint.getRoot().getValue(this);
    if(format.contains("Plain"))
    {
      return expression;
    }
    if(format.contains("Closed"))
    {
      return StringFormatter.format(ConstraintLookupMap.get("ifstatement")+"\n  {1}\n"+ConstraintLookupMap.get("end"),expression, "{0}");
    }
    else if(format.contains("Open"))
    {
      return StringFormatter.format(ConstraintLookupMap.get("ifstatement"),expression, "{0}");
    }
    return StringFormatter.format(ConstraintLookupMap.get("ifstatement")+"\n  {1}\n"+ConstraintLookupMap.get("end"),expression, "{0}");
  }
  
  public void prepareConstraint(ConstraintVariable cur, ConstraintTree ac, ConstraintTree head, Map<String, ConstraintTree> setters, Map<String, UmpleClassifier> uClassifiers)
  {
    if(cur == null)return;
    if(cur instanceof ConstraintAssociation)
    {
      ConstraintAssociation association = ((ConstraintAssociation)cur);

      String methodName = translate("setMethod", association.getAssociation());
      String addName = translate("addMethod", association.getAssociation());

      if(!setters.containsKey(association.getAssociation().getName()+":"+methodName))
      {
        ConstraintTree tempConstraint = new ConstraintTree();
        setters.put(association.getName()+":"+methodName,tempConstraint);
        setters.put(association.getName()+":"+addName, tempConstraint);
        UmpleClassifier uClassifier = association.retrieveClassifier();
        if(uClassifier!=null)
        {
          uClassifiers.put(association.getName(),uClassifier);
        }
      }
      setters.get(association.getName()+":"+methodName).addElementAll(head);
      setters.get(association.getName()+":"+addName).addElementAll(head);
    }
    else if(cur instanceof ConstraintAttribute)
    {
      ConstraintAttribute attribute = (ConstraintAttribute)cur;
      String methodName = translate("setMethod", attribute.getAttribute());
      if(!setters.containsKey(attribute.getName()+":"+methodName))
      {
        ConstraintTree tempConstraint = new ConstraintTree();
        setters.put(attribute.getName()+":"+methodName,tempConstraint);
        UmpleClassifier uClassifier = attribute.retrieveClassifier();
        if(uClassifier!=null)
        {
          uClassifiers.put(attribute.getName(),uClassifier);
        }
      }
      setters.get(attribute.getName()+":"+methodName).addElementAll(head);
    }
    else if(cur instanceof ConstraintTree)
    {
      prepareConstraint(((ConstraintTree)cur).getRoot(),(ConstraintTree)cur,head,setters,uClassifiers);
    }
    else if(cur instanceof ConstraintOperator)
    {
      prepareConstraint(((ConstraintOperator)cur).getLeft(),ac,head,setters,uClassifiers);
      prepareConstraint(((ConstraintOperator)cur).getRight(),ac,head,setters,uClassifiers);
    }
  }

  public void prepareConstraints(UmpleClass aClass)
  {
    ConstraintTree constructor = new ConstraintTree();
    constraintWithinConstructor = false;
    Map<String,ConstraintTree> setters = new HashMap<String,ConstraintTree>();
    Map<String,UmpleClassifier> uClassifiers = new HashMap<String, UmpleClassifier>();
    for (ConstraintTree ac : aClass.getConstraintTrees())
    {
      CodeInjection before;
      prepareConstraint(ac.getRoot(),ac,ac,setters,uClassifiers);
      constructor.addElementAll(ac);
    }

    for(String name:setters.keySet())
    {
      int index = name.indexOf(':');
      parameterConstraintName = name.substring(0,index);
      String methodName = name.substring(index+1);
      CodeInjection before = new CodeInjection("before", methodName, translate("Open",setters.get(name)), aClass);
      CodeInjection after = new CodeInjection("after", methodName, ConstraintLookupMap.get("end"), aClass);
      before.setIsInternal(true);
      after.setIsInternal(true);
      UmpleClassifier classifier = uClassifiers.get(parameterConstraintName);
      aClass.addCodeInjection(before);
      aClass.addCodeInjection(after);
    }
    if(constructor.getNumberOfElements()>0)
    {
      constraintWithinConstructor = true;
      constructor.negate();
      String inject = StringFormatter.format(ConstraintLookupMap.get("exception"),constructor.getNamedNames());
      String ifstatement = translate("Closed",constructor);
      String complete = StringFormatter.format(ifstatement,inject);
      CodeInjection cons = new CodeInjection("after",  "constructor", complete, aClass);  
      cons.setIsInternal(true);
      aClass.addCodeInjection(cons);
    }

    for (Precondition pc : aClass.getPreconditions())
    { 
      String methodName = pc.getMethod().getName();
      pc.negate();
      String inject = "  "+StringFormatter.format(ConstraintLookupMap.get("exception"),pc.getNamedNames());
      String ifstatement = translate("Closed",pc);
      String complete = StringFormatter.format(ifstatement,inject);
      CodeInjection before = new CodeInjection("before", methodName+"Precondition", complete, aClass);         
      before.setIsInternal(true);
      aClass.addCodeInjection(before);    
    }

    for (Postcondition pc : aClass.getPostconditions())
    { 
      String methodName = pc.getMethod().getName();
      pc.negate();
      String inject = "  "+StringFormatter.format(ConstraintLookupMap.get("exception"),pc.getNamedNames());
      String ifstatement = translate("Closed",pc);
      String complete = StringFormatter.format(ifstatement,inject);
      CodeInjection before = new CodeInjection("before", methodName+"Postcondition", complete, aClass);         
      before.setIsInternal(true);
      aClass.addCodeInjection(before);    
    }
  }
}
