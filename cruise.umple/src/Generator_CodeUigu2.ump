/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace cruise.umple.compiler.uigu2;

class Uigu2ElementGenerator
{
  depend java.util.*;
  depend cruise.umple.compiler.*;
  depend cruise.umple.compiler.exceptions.*;

  const String nl = System.getProperty("line.separator");
  //keeps track of elements whose codes have already been generated
  internal List<UmpleElement> generatedElements = new ArrayList<UmpleElement>();

  /**
   * Returns the generated code specific to an UmpleElement.
   */
  public String getCode(UmpleModel model, UmpleElement uElement) {

    if(this.generatedElements.contains(uElement)){
      return "";
    }
    StringBuilder code = new StringBuilder();
    String name = uElement.getName();

    if(uElement instanceof UmpleClass){
      UmpleClass aClass = (UmpleClass) uElement;
      code.append("$ELEMENTS['" + name + "']['name'] = '"+name+"';").append(nl);
      code.append("$ELEMENTS['" + name + "']['element_kind'] = 'Class';").append(nl);

      if(aClass.getIsAbstract()){
        code.append("$ELEMENTS['" + name + "']['abstract'] = 1;").append(nl);
      }
      this.appendAttributesCode(code, aClass);
      this.appendAssociationsCode(code, aClass);
      this.appendConstructorCode(code, aClass);
      this.generatedElements.add(uElement);

      if(aClass.isRoot()){
        return code.toString();

      }else {
        UmpleClass parent = aClass.getExtendsClass();
        code.append("$ELEMENTS['" + name + "']['parent'] = '" + parent.getName() + "';").append(nl);
        return this.getCode(model, parent) + code.toString();
      }
    //TODO else if(uElement instanceof UmpleInterface){
    }else {
      return "";
    }
  }

  private void appendAttributesCode(StringBuilder code, UmpleClass uClass) {
    List<Attribute> attributes = this.getAttributesSuperClasses(uClass);
    if(attributes.size() > 0){
      code.append("$attributes = array();").append(nl);
      String name, value, type;
      for (Attribute att : attributes){
        name = att.getName();
        value = att.getValue();
        type = att.getType();
        code.append("$a_attribute = array();").append(nl);
        code.append("$a_attribute['name'] = '" + name + "';").append(nl);
        code.append("$a_attribute['type'] = '" + type + "';").append(nl);
        if(value != null){
          value = value.replaceAll("\"", "");
          code.append("$a_attribute['value'] = '" + value + "';").append(nl);
        }
        code.append("$attributes['" + name + "'] = $a_attribute;").append(nl);
      }
      code.append("$ELEMENTS['" + uClass.getName() + "']['attributes'] = $attributes;").append(nl);
    }
  }

  /*
  * Returns attributes from uClass and from all the classes above it in the inheritance hierarchy.
  * eg. if A is subclass of B, and B is subclass of C. Calling the method for A will return all
  * the attributes of A, B and C
  */
  private List<Attribute> getAttributesSuperClasses(UmpleClass uClass){
    List<Attribute> attributes = new ArrayList<Attribute>();
    attributes.addAll(uClass.getAttributes());
    if(!uClass.isRoot()){
      UmpleClass parent = uClass.getExtendsClass();
      attributes.addAll(this.getAttributesSuperClasses(parent));
    }
    return attributes;
  }

  private void appendAssociationsCode(StringBuilder code, UmpleClass uClass) {
    String className = uClass.getName();
    List<AssociationVariable> avs = this.getAssociationsSuperClasses(uClass);
    if(avs.size() > 0){
      code.append("$associations = array();").append(nl);
      for(AssociationVariable av : avs){
        String name = av.getName();
        String type = av.getType();
        code.append("$a_association = array();").append(nl);
        code.append("$a_association['name'] = '" + name + "';").append(nl);
        code.append("$a_association['type'] = '" + type + "';").append(nl);
        code.append("$associations['" + name + "'] = $a_association;").append(nl);
      }
      code.append("$ELEMENTS['" + className + "']['associations'] = $associations;").append(nl);
    }
  }

  //similar to method getAttributesSuperClasses above
  private List<AssociationVariable> getAssociationsSuperClasses(UmpleClass uClass){
    List<AssociationVariable> avs = new ArrayList<AssociationVariable>();
    avs.addAll(uClass.getAssociationVariables());

    if(!uClass.isRoot()){
      UmpleClass parent = uClass.getExtendsClass();
      avs.addAll(this.getAssociationsSuperClasses(parent));
    }
    return avs;
  }

  private void appendConstructorCode(StringBuilder code, UmpleClass uClass){
    String className = uClass.getName();
    GeneratedClass gc = uClass.getGeneratedClass();
    String constructorSignature = gc.getLookup("constructorSignature");
    code.append("$constructor_params = array();").append(nl);

    if(!constructorSignature.equals("")){
      String[] constructorParams = constructorSignature.split(", ");
      for(int i = 0; i < constructorParams.length; i++){
        //"$aAttributeName" => "attributeName"
        String param = constructorParams[i];
        param = Character.toLowerCase(param.charAt(2)) + param.substring(3); 
        code.append("$constructor_params[] = '" + param + "';").append(nl);
      }
    }
    code.append("$ELEMENTS['" + className + "']['constructor_params'] = $constructor_params;").append(nl);
  }

}

namespace cruise.umple.compiler;

class Uigu2Generator
{
  depend cruise.umple.compiler.uigu2.Uigu2ElementGenerator;
  depend java.nio.file.StandardCopyOption;

  const String packageFilesPath = "/cruise/umple/compiler/uigu2/files/";
  const Charset charset = StandardCharsets.UTF_8;
  const String nl = System.getProperty("line.separator");

  internal Uigu2ElementGenerator generator = new Uigu2ElementGenerator();
  lazy internal List<UmpleElement> elements;

  /*
  * Absolute path where the PhpGenerator will place the domain classes
  */
  lazy Path outputPath;

  /*
  * Absolute path to output of uigu files that can be shared among different execution instances (clients).
  * If not provided, all files are placed in the directory specified by outputPath
  */
  lazy Path sharedFilesPath;

  /* Default files that can be shared between different clients. Maps filename of files to be copied 
  * (from "cruise.umple.compiler.uigu2.files" package) to its destination pathname and new filename - 
  * relative to sharedFilesPath whenever possible
  */
  Map<String,String> sharedFilesToCopy = new HashMap<String,String>();

  after constructor{
    this.sharedFilesToCopy.put("kissmvc_core.php", "app/kissmvc_core.php");
    this.sharedFilesToCopy.put("kissmvc_uigu2.php", "app/kissmvc_uigu2.php");
    this.sharedFilesToCopy.put("layout.php", "app/views/layout.php");
    this.sharedFilesToCopy.put("views_main_index.php", "app/views/main/index.php");
    this.sharedFilesToCopy.put("views_main_show_element.php", "app/views/main/show_element.php");
    this.sharedFilesToCopy.put("controllers_main_index.php", "app/controllers/main/index.php");
    this.sharedFilesToCopy.put("controllers_main_clear.php", "app/controllers/main/clear.php");
    this.sharedFilesToCopy.put("controllers_main_show_element.php", "app/controllers/main/show_element.php");
    this.sharedFilesToCopy.put("controllers_main_new_instance.php", "app/controllers/main/new_instance.php");
    this.sharedFilesToCopy.put("css_layout.css", "app/css/layout.css");
  }

  @Override
  public void generate() {
    //use default PHP generator to create the domain classes
    super.generate();
    
    this.setOutputPath(super.getModel().getUmpleFile().getPath());
    this.elements = super.getModel().getUmpleElements();

    try {
      this.copySharedFiles();
      this.copyNonSharedFiles();
      this.generateIndexFile();
      this.generateSetupFile();
      this.generateInitializationFile();
      
    } catch (Exception e) {
      throw new UmpleCompilerException("There was a problem with Uigu2 code generation: " + e, e);
    }
  }

  /**
   * Copies default libraries and other necessary files - that are not meant to be
   * modified - to the destination folder, as indicated by the attribute Map sharedFilesToCopy.
   * Files are only copied when they dont already exist in the destination path
   */
  private void copySharedFiles() throws IOException{
    Iterator<Map.Entry<String, String>> iterator = this.sharedFilesToCopy.entrySet().iterator();
    String fileName = "";
    Path rootPath = getPreferredSharedFilesPath();
    Path writePath = null;

    while (iterator.hasNext()) {
      Map.Entry<String,String> entry = iterator.next();
      fileName = entry.getKey();
      writePath = rootPath.resolve(Paths.get(entry.getValue()));
      if(!writePath.toFile().exists()){
        copyFileFromPackage(fileName, writePath);
      }
    }
  }

  /**
  * Copies default files that are always put in outputPath Path
  */
  private void copyNonSharedFiles() throws IOException{
    Path writePath = this.outputPath.resolve(Paths.get(".htaccess"));
    copyFileFromPackage("mod_rewrite_file", writePath); 
  }

  private void copyFileFromPackage(String fileName, Path destinationPath) throws IOException{
    //File is obtained as a Resource from the Classpath, not as Path or File
    InputStream from = this.getClass().getResourceAsStream(this.packageFilesPath + fileName);
    Files.createDirectories(destinationPath.getParent());
    Files.copy(from, destinationPath, StandardCopyOption.REPLACE_EXISTING);
  }

  /*
  * Generates index.php to outputPath
  */
  private void generateIndexFile() throws IOException{
    Path writePath = this.outputPath.resolve(Paths.get("index.php"));
    Path setupFilePath = getPreferredSharedFilesPath().resolve(Paths.get("setup.php")); 

    String indexFile = "<?php" + nl + nl
        + "ini_set('display_errors','On');" + nl
        + "error_reporting(E_ALL);" + nl
        + "require_once('" + setupFilePath + "');" + nl
        + "define('WEB_DOMAIN', WEB_DOMAIN_ROOT . basename(dirname(__FILE__)));" + nl
        + "define('WEB_FOLDER', WEB_FOLDER_ROOT . basename(dirname(__FILE__)) . '/');" + nl
        + "require_once(APP_PATH.'kissmvc_uigu2.php');" + nl
        + "session_start();" + nl + nl
        + "function __autoload($classname) {" + nl
        + "\t$filename = $classname.'.php';" + nl
        + "\tif(file_exists($filename)){" + nl
        + "\t\trequire_once($classname.'.php');" + nl
        + "\t}" + nl
        + "}" + nl
        + "new Uigu2_Controller(CONTROLLER_PATH,WEB_FOLDER,'main','index');";
    writeStringToFile(indexFile, writePath);
  }

  /*
  * Generates setup.php to the sharedFilesPath (if set), or outputPath.
  */
  private void generateSetupFile() throws IOException{
    Path sharedFilesPath = getPreferredSharedFilesPath(); 
    Path writePath = sharedFilesPath.resolve(Paths.get("setup.php"));

    //setup.php carries user configurations and should change - so keep it if present
    if(!writePath.toFile().exists()){
      Path appPath = sharedFilesPath.resolve(Paths.get("app/"));
      String setupFile = "<?php" + nl + nl
          + "/*EDIT BELOW: parent URL of the folder where index.php is located" + nl
          + " *eg. to access 'http://a/b/c/index.php', use 'http://a/b/' (with trailing slash) */" + nl
          + "define('WEB_DOMAIN_ROOT','http://default/');" + nl + nl

          + "/*EDIT BELOW: parent path of the folder where index.php is located," + nl
          + " *relative to the <DocumentRoot> element of the apache config file " + nl
          + " *eg.  if <DocumentRoot> is '/var/www/' and the full path is '/var/www/a/b/index.php'" + nl
          + " *use '/a/' (with trailing slash) */" + nl 
          + "define('WEB_FOLDER_ROOT','/');" + nl + nl

          + "define('APP_PATH','" + appPath.toString() + "/');" + nl
          + "define('VIEW_PATH',APP_PATH.'views/');" + nl
          + "define('CONTROLLER_PATH',APP_PATH.'controllers/');" + nl;

      writeStringToFile(setupFile, writePath);
    }
  }

  /*
   * Generates initialize_model.php file with UmpleModel information accessible to all controllers.
   */
  private void generateInitializationFile() throws IOException{
    //this file is never shared
    Path path = this.outputPath.resolve(Paths.get("initialize_model.php"));

    StringBuilder initFile = new StringBuilder("<?php" + nl + nl
            + "function initialize_model(){" + nl
            + "$UMPLE_MODEL = array();" + nl
            + "$UMPLE_MODEL['execution_id'] = '_'.basename(dirname(__FILE__));" + nl);

    //$ELEMENTS associative array with info from each UmpleElement
    if (this.elements.size() > 0) {
      for (UmpleElement e : this.elements) {
        initFile.append(this.generator.getCode(super.getModel(), e));
      }
      initFile.append("$UMPLE_MODEL['ELEMENTS'] = $ELEMENTS;").append(nl);
    }

    initFile.append("return $UMPLE_MODEL;").append(nl).append("}");
    writeStringToFile(initFile.toString(), path);
  }

  /**
   * @param text content of text file to be written
   * @param filePath Absolute path in the FileSystem to file to be written
   */
  private void writeStringToFile(String text, Path filePath) throws IOException {
    Files.createDirectories(filePath.getParent());
    BufferedWriter bw = null;
    try {
      //Replaces existing files
      bw = Files.newBufferedWriter(filePath, charset);
      bw.write(text);
    }finally{
      if(bw != null){
        bw.close();
      }
    }
  }

  /*
  * Returns the appropriate path for shared files - the sharedFilesPath when
  * available, or the outputPath when not
  */
  public Path getPreferredSharedFilesPath(){
    return this.sharedFilesPath == null ?
      this.outputPath : this.sharedFilesPath;
  }

  public void setSharedFilesPath(String pathname){
    if(pathname != null){
      this.sharedFilesPath = Paths.get(pathname).toAbsolutePath();
    }
  }

  public void setOutputPath(String pathname){
    if(pathname != null){
      this.outputPath = Paths.get(pathname).toAbsolutePath();
    }
  }

}
