/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace cruise.umple.compiler.uigu2;

//This was not compiled with Jet, but compatibility was maintained
class Uigu2ElementGenerator
{
  depend java.util.*;
  depend cruise.umple.compiler.*;
  depend cruise.umple.compiler.exceptions.*;

  const String nl = System.getProperty("line.separator");

  /**
   * Returns the generated code specific to an UmpleElement.
   */
  public String getCode(UmpleModel model, UmpleElement uElement) {
    StringBuilder code = new StringBuilder();
    String name = uElement.getName();
    String elementKind = null;

    //keys of $ELEMENTS are already the names, but this may be needed
    this.appendToElementsArray(code,name,"name","'"+name+"'");

    if(uElement instanceof UmpleClass){
      UmpleClass aClass = (UmpleClass)uElement;
      
      //TODO
      Association[] associations = aClass.getAssociations();
      if(associations.length > 0){
        throw new UmpleCompilerException("Support for Associations is currently under development.",
          new UnsupportedOperationException());
      }
      //TODO
      UmpleClass parentClass = aClass.getExtendsClass();
      if(parentClass != null){
        throw new UmpleCompilerException("Support for Inherited Classes is currently under development.",
          new UnsupportedOperationException());
      }

      elementKind = "Class";
      this.appendAttributesCode(code, aClass);
      if(aClass.getIsAbstract()){
        this.appendToElementsArray(code,aClass.getName(),"abstract","1");
      }
    }else if(uElement instanceof UmpleInterface){
      elementKind = "Interface";
    }
    this.appendToElementsArray(code,name,"element_kind","'"+elementKind+"'");
    return code.toString();
  }

  /**
   * Adds to the $ELEMENTS php array (where information about UmpleElements are passed to
   * UIGU) the specified key and value, ie. "$ELEMENTS[name][key] = value;"
   */
  private void appendToElementsArray(StringBuilder code, String elementName, String key, String value) {
    code.append("$ELEMENTS['").append(elementName).append("']['").append(key).append("']");
    code.append(" = ").append(value).append(";").append(nl);
  }

  /**
   * Adds to the StringBuilder being built php code that deals with attributes.
   */
  private void appendAttributesCode(StringBuilder code, UmpleClass uClass) {
    List<Attribute> attributes = uClass.getAttributes();
    Attribute att;
    code.append("$attributes = array();").append(nl);    
    for (int i = 0, size = attributes.size(); i < size; i++) {
      att = attributes.get(i);
      code.append("$attributes[" + i +"]['name'] = '" + att.getName() + "';").append(nl);
      code.append("$attributes[" + i +"]['type'] = '" + att.getType() + "';").append(nl);
      String value = att.getValue();
      if(value != null){
        value = value.replaceAll("\"", "");
        code.append("$attributes[" + i +"]['value'] = '" + value + "';").append(nl);
      }
      if(att.getIsLazy()){
        code.append("$attributes[" + i +"]['lazy'] = '" + 1 + "';").append(nl);
      }else{
        //attribute must be initialized in constructor
        code.append("$attributes[" + i +"]['constructor_param'] = '" + 1 + "';").append(nl);
      }
    }
    this.appendToElementsArray(code,uClass.getName(),"attributes","$attributes");
  }
}

namespace cruise.umple.compiler;

class Uigu2Generator
{
  depend cruise.umple.compiler.uigu2.Uigu2ElementGenerator;

  const String packageFilesPath = "/cruise/umple/compiler/uigu2/files/";
  const Charset charset = StandardCharsets.UTF_8;
  internal Uigu2ElementGenerator generator = new Uigu2ElementGenerator();
  lazy internal List<UmpleElement> elements;

  /*
  * Absolute path where the PhpGenerator will place the domain classes
  */
  lazy Path outputPath;

  /*
  * Absolute path to output of uigu files that can be shared among different execution instances (clients).
  * If not provided, all files are placed in the directory specified by outputPath
  */
  lazy Path sharedFilesPath;

  /* Default files that can be shared between different clients. Maps filename of files to be copied 
  * (from "cruise.umple.compiler.uigu2.files" package) to its destination pathname and new filename - 
  * relative to sharedFilesPath whenever possible
  */
  Map<String,String> sharedFilesToCopy = new HashMap<String,String>();

  /* Maps filename of files to be dynamically generated
   * to destination pathname and new filename (always relative to outputPath).
   * Different than sharedFilesToCopy, this is used only to facilitate the change of the final output path / filename
   */
  Map<String,String> filesToGenerate = new HashMap<String,String>();

  after constructor{
    this.sharedFilesToCopy.put("kissmvc_core.php", "app/kissmvc_core.php");
    this.sharedFilesToCopy.put("kissmvc_uigu2.php", "app/kissmvc_uigu2.php");
    this.sharedFilesToCopy.put("layout.php", "app/views/layout.php");
    this.sharedFilesToCopy.put("views_main_index.php", "app/views/main/index.php");
    this.sharedFilesToCopy.put("views_main_show_element.php", "app/views/main/show_element.php");
    this.sharedFilesToCopy.put("controllers_main_index.php", "app/controllers/main/index.php");
    this.sharedFilesToCopy.put("controllers_main_clear.php", "app/controllers/main/clear.php");
    this.sharedFilesToCopy.put("controllers_main_show_element.php", "app/controllers/main/show_element.php");
    this.sharedFilesToCopy.put("controllers_main_new_instance.php", "app/controllers/main/new_instance.php");
    this.sharedFilesToCopy.put("css_layout.css", "app/css/layout.css");
    this.filesToGenerate.put("index.php", "index.php");
    this.filesToGenerate.put("setup.php", "setup.php");
    this.filesToGenerate.put("initialize_model.php", "initialize_model.php");
  }

  @Override
  public void generate() {
    //use default PHP generator to create the domain classes
    super.generate();
    
    this.setOutputPath(super.getModel().getUmpleFile().getPath());
    this.elements = super.getModel().getUmpleElements();

    try {
      this.copySharedFiles();
      this.copyNonSharedFiles();
      this.generateIndexFile();
      this.generateSetupFile();
      this.generateInitializationFile();
      
    } catch (Exception e) {
      throw new UmpleCompilerException("There was a problem with Uigu2 code generation: " + e, e);
    }
  }

  /*
  * Returns the appropriate path for shared files - the sharedFilesPath when
  * available, or the outputPath when not
  */
  public Path getPreferredSharedFilesPath(){
    return this.sharedFilesPath == null ?
      this.outputPath : this.sharedFilesPath;
  }

  public void setSharedFilesPath(String pathname){
    if(pathname != null){
      this.sharedFilesPath = Paths.get(pathname).toAbsolutePath();
    }
  }

  public void setOutputPath(String pathname){
    if(pathname != null){
      this.outputPath = Paths.get(pathname).toAbsolutePath();
    }
  }

  /**
   * Copies default libraries and other necessary files - that are not meant to be
   * modified - to the destination folder, as indicated by the attribute Map sharedFilesToCopy.
   * Files are only copied when they dont already exist in the destination path
   */
  private void copySharedFiles() throws IOException{
    Iterator<Map.Entry<String, String>> iterator = this.sharedFilesToCopy.entrySet().iterator();
    String fileName = "";
    Path rootPath = getPreferredSharedFilesPath();
    Path writePath = null;

    while (iterator.hasNext()) {
      Map.Entry<String,String> entry = iterator.next();
      fileName = entry.getKey();
      writePath = rootPath.resolve(Paths.get(entry.getValue()));
      if(!writePath.toFile().exists()){
        copyFileFromPackage(fileName, writePath);
      }
    }
  }

  /**
  * Copies default files that are always put in outputPath Path
  */
  private void copyNonSharedFiles() throws IOException{
    //if more default non shared files are needed, create a Map nonSharedFilesToCopy
    copyFileFromPackage("mod_rewrite_file", this.outputPath.resolve(Paths.get(".htaccess"))); 
  }

  private void copyFileFromPackage(String fileName, Path destinationPath) throws IOException{
    //File is obtained as a Resource from the Classpath, not as Path or File
    InputStream from = this.getClass().getResourceAsStream(this.packageFilesPath + fileName);
    Files.createDirectories(destinationPath.getParent());
    Files.copy(from, destinationPath);
  }

  /*
  * Generates index.php to outputPath
  */
  private void generateIndexFile() throws IOException{
    String nl = System.getProperty("line.separator");
    Path writePath = this.outputPath.resolve(Paths.get(this.filesToGenerate.get("index.php")));
    Path setupFilePath = getPreferredSharedFilesPath().resolve(Paths.get(this.filesToGenerate.get("setup.php"))); 

    StringBuilder indexFile = new StringBuilder();
    indexFile.append("<?php").append(nl);
    indexFile.append("ini_set('display_errors','On');").append(nl);
    indexFile.append("error_reporting(E_ALL);").append(nl);
    indexFile.append("require_once('").append(setupFilePath).append("');").append(nl);
    indexFile.append("define('WEB_DOMAIN', WEB_DOMAIN_ROOT . basename(__DIR__));").append(nl);
    indexFile.append("define('WEB_FOLDER', WEB_FOLDER_ROOT . basename(__DIR__) . '/');").append(nl);
    indexFile.append("require_once(APP_PATH.'kissmvc_uigu2.php');").append(nl);
    indexFile.append("session_start();").append(nl);
    indexFile.append("function __autoload($classname) {").append(nl);
    indexFile.append("$filename = $classname.'.php';").append(nl);
    indexFile.append("if(file_exists($filename)){").append(nl);
    indexFile.append("require_once($classname.'.php');}}").append(nl);
    indexFile.append("new Uigu2_Controller(CONTROLLER_PATH,WEB_FOLDER,'main','index');").append(nl);
    writeStringToFile(indexFile.toString(), writePath);
  }

  private void generateSetupFile() throws IOException{
    String nl = System.getProperty("line.separator");
    Path sharedFilesPath = getPreferredSharedFilesPath(); 
    Path writePath = sharedFilesPath.resolve(Paths.get(this.filesToGenerate.get("setup.php")));
    Path appPath = sharedFilesPath.resolve(Paths.get("app/"));
    StringBuilder setupFile = new StringBuilder("<?php").append(nl);

    setupFile.append("define('WEB_DOMAIN_ROOT','http://cruise.local');").append(nl);
    setupFile.append("define('WEB_FOLDER_ROOT','/');").append(nl);
    setupFile.append("define('APP_PATH','").append(appPath.toString()).append("/").append("');").append(nl);
    setupFile.append("define('VIEW_PATH',APP_PATH.'views/');").append(nl);
    setupFile.append("define('CONTROLLER_PATH',APP_PATH.'controllers/');").append(nl);
    writeStringToFile(setupFile.toString(), writePath);
  }

  /*
   * Generates initialize_model.php file with UmpleModel information accessible to all controllers.
   */
  private void generateInitializationFile() throws IOException{
    String nl = System.getProperty("line.separator");
    StringBuilder initFile = new StringBuilder("<?php" + nl
            + "function init(){" + nl
            + "$UMPLE_MODEL = array();" + nl);
    //this file is never shared
    Path path = this.outputPath.resolve(Paths.get(this.filesToGenerate.get("initialize_model.php")));

    if (this.elements.size() > 0) { //$ELEMENTS associative array with info from each UmpleElement
      for (UmpleElement e : this.elements) {
        initFile.append(this.generator.getCode(super.getModel(), e));
      }
      initFile.append("$UMPLE_MODEL['ELEMENTS'] = $ELEMENTS;").append(nl);
    }
    
    initFile.append("return $UMPLE_MODEL; }");
    writeStringToFile(initFile.toString(), path);
  }

  /**
   * @param text content of text file to be written
   * @param filePath Absolute path in the FileSystem to file to be written
   */
  private void writeStringToFile(String text, Path filePath) throws IOException {
    Files.createDirectories(filePath.getParent());
    BufferedWriter bw = null;
    try {
      bw = Files.newBufferedWriter(filePath, charset);
      bw.write(text);
    }finally{
      if(bw != null){
        bw.close();
      }
    }
  }
}
