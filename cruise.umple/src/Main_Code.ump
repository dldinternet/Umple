/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Command line tools: To compile Umple files, or to do diffs

*/

namespace cruise.umple;

/*
 * Main program for the command line Umple compiler
 * Run java -jar umple.jar --help for details 
 * Takes an umple file as an argument, which can in turn use (include) other
 */
class UmpleConsoleMain
{
  depend cruise.umple.compiler.*;
  depend cruise.umple.compiler.exceptions.*;
  depend java.util.List;
  depend java.util.Arrays;
  depend joptsimple.*;
  depend java.io.IOException;
  depend java.io.*;

  public static void main(String[] args)
  {
    OptionParser optparser = initializeOptionParser();
    OptionSet optset = optParse(optparser, args);
    if (preModelOptionProcess(optparser, optset))
    {
      return;
    }
    
    List<String> nonOpt = optset.nonOptionArguments();

    if (nonOpt.isEmpty())
    {
      System.out.println("Please specify <umple_file> to process");
      printUsage(optparser);
      return;
    }

    String filename = nonOpt.get(0);
    System.out.println(filename);
    UmpleFile umpleFile = new UmpleFile(filename);
    //this loop is used to add command-based linked umple files and to show names of them.
    for (int i=1;i<nonOpt.size(); i++)
    {
      if (new File(nonOpt.get(i)).exists())
      {
        umpleFile.addLinkedFiles(nonOpt.get(i));
        System.out.println(nonOpt.get(i)); 		
      } else
      {
        System.out.println("The file "+nonOpt.get(i)+" doesn't exist."); 		
      }
    }

    UmpleModel model = new UmpleModel(umpleFile);

    if (postModelOptionProcess(optset, model))
    {
      return;
    }

    try
    {
      try
      {
        model.run();
      }
      catch(UmpleCompilerException e)
      {
        System.err.print(e.getMessage());
        if (!model.isShouldGenerate())
        {
          System.exit(-1);
        }
      }

      // Compile success means the output was generated
      boolean compileSuccess = model.getLastResult().getWasSuccess();

      // The "c" option causes an attempt to compile the resulting base language
      // code. Not completely tested at current time.
      if (compileSuccess && optset.has("c"))
      {
        CodeCompiler compiler = new CodeCompiler();
        compileSuccess = compiler.compile(model, (String)optset.valueOf("c"));
      }

      String successWord = compileSuccess ? "Success! " : "";
      for (int i=0;i<nonOpt.size(); i++)
      {
        if (new File(nonOpt.get(i)).exists())
        {
          System.out.println(successWord + "Processed "+ nonOpt.get(i) +".");
        }
      }
      if (compileSuccess)
      {
        return;
      }
      System.exit(compileSuccess ? 0 : 1); 
    }
    catch(Exception ex)
    {
      System.err.println("Umple compiler error. Stack trace follows");
      cruise.umple.util.ExceptionDumper.dumpCompilerError(ex);
      System.exit(-1);
    }
    System.exit(0);
  }

  private static void printUsage(OptionParser optparser)
  {
    System.out.println("Usage: java -jar umple.jar [options] <umple_file>\nExample: java -jar umple.jar airline.ump");
      try
      {
        optparser.printHelpOn(System.out);
      } 
      catch (IOException e)
      {
        e.printStackTrace();
      }
    }
    
  private static void generateUmple(String xmi)
  {
    boolean isSuccess = false;
    try
    {
      EcoreImportHandler handler = new EcoreImportHandler();
      UmpleImportModel umple = handler.readDataFromXML(xmi);
      isSuccess = umple.generateUmpleFile(xmi+".ump");
    }
    catch (Exception e)
    {
      System.err.print(e.getMessage());
    } 
    if (isSuccess)
    {
      System.out.println("Success! Processed "+ xmi + ".");
    }
    else
    {
      System.err.print("No file generated, parsing error.");
    }
  }

  /**
    * optionProcess: process the option arguments which does not require UmpleModel
    * Argument: optSet - set of the options and corresponding arguments
    * Return: boolean - If application should terminate immediately after return
    */
  private static boolean preModelOptionProcess(OptionParser optparser, OptionSet optSet)
  {
    if (optSet == null)
    {
      
    }
    else if (optSet.has("version"))
    {
      System.out.println("Version: " + UmpleModel.versionNumber);
    }
    else if (optSet.has("help"))
    {
      printUsage(optparser);
    }
    else if (optSet.has("import"))
    {
      String xmi = (String)optSet.valueOf("import");
      generateUmple(xmi);
    }
    else
    {
      return false;
    }
    return true;
  }

  private static boolean postModelOptionProcess(OptionSet optset, UmpleModel model)
  {
    if (optset.has("generate"))
    {
      boolean override=false;
      String path = "";
      if (optset.has("override"))
      {
        override = true;
      }
      if (optset.has("path"))
      {
        path = (String)optset.valueOf("path");
      }
      String lang = (String)optset.valueOf("generate");
      GenerateTarget gt = new GenerateTarget(lang, path);
      gt.setOverrideAll(override);
      if (optset.has("s"))
      {
        for (Object s : optset.valuesOf("s"))
        {
          gt.addSuboption((String) s); 
        }
      }
      model.addGenerate(Arrays.asList(gt));
    }
    return false;
  }
  
  private static OptionParser initializeOptionParser()
  {
    OptionParser optparser = new OptionParser();
    
    optparser.acceptsAll(Arrays.asList("version", "v"), "Print out the current Umple version number");
    optparser.acceptsAll(Arrays.asList("help"), "Display the help message");
    optparser.acceptsAll(Arrays.asList("g", "generate"), "Specify the output language: Java,Cpp,RTCpp,SimpleCpp,Php,Ruby,SQL,Ruby,Json,Ecore,TextUml,GvStateDiagram,GvClassDiagram,Alloy,Yuml,SimpleMetrics,Uigu2").withRequiredArg().ofType(String.class);
    optparser.acceptsAll(Arrays.asList("override"), "If a output language <lang> is specified using option -g, output will only generate language <lang>");
    optparser.acceptsAll(Arrays.asList("path"), "If a output language is specified using option -g, output source code will be placed to path").withRequiredArg().ofType(String.class);
    optparser.acceptsAll(Arrays.asList("c","compile"), "Indicate to the entry class to compile, or with argument - to compile all outputfiles").withRequiredArg().ofType(String.class);
    optparser.acceptsAll(Arrays.asList("import","i"), "Indicate to read in XMI model and generate ump files").withRequiredArg().ofType(String. class);
    optparser.acceptsAll(Arrays.asList("suboption","s"), "Indicate to generate files with suboptions").withRequiredArg().ofType(String.class);
    
    return optparser;
  }
  
  private static OptionSet optParse(OptionParser optparser, String[] args)
  {
    OptionSet optSet = null;

    try
    {
      optSet = optparser.parse(args);
    } 
    catch (joptsimple.OptionException e)
    {
      System.out.println("Option:" + e.getMessage());
      printUsage(optparser);
    }

    return optSet;
  }
}

/*
 * Main program for a jar that can inject calls to Umple at runtime
 */
class UmpleRunMain
{

  depend cruise.umple.compiler.*;
  depend cruise.umple.compiler.exceptions.*;
  depend cruise.umple.builder.*;
  depend cruise.umple.util.*;
  depend java.net.*;
  depend java.io.*;

  public static void main(String[] args)
  {
    if (args.length < 2)
    {
      System.out.println("Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd");
      return;
    }

    String filename = args[0];
    String cmdFilename = args[1];
    UmpleFile umpleFile = new UmpleFile(filename);
    UmpleModel model = new UmpleModel(umpleFile);
    boolean shouldDebug = args.length >= 3 && args[2].equals("--debug");
    boolean shouldCompile = !shouldDebug;

    try
    {
      if (shouldCompile)
      {
        System.out.print("Compiling "+ filename +"... ");
        model.run();
        System.out.println("success.");
      }
      else
      {
        System.out.print("Skipping compilation, entering debug mode");
      }

      System.out.print("Building model... ");
      Builder b = new Builder();
      URL jarfile = b.compile(".",umpleFile.getSimpleFileName() + ".jar",umpleFile.getSimpleFileName(),"1.6");

      if (jarfile == null)
      {
        System.out.println("failed");
        return;
      }
      System.out.println("success.");

      System.out.print("Loading model into memory... ");
      URL urls [] = { jarfile };
      URLClassLoader cl = new URLClassLoader(urls);
      System.out.println("success.");

      Command cmd = new Command(cl);

      System.out.println("Running commands:");
      boolean isFirst = true;
      for (String input : SampleFileWriter.readContent(new File(cmdFilename)).split("\n"))
      {
        if (isFirst)
        {
          cmd.addAttributes(input);
          isFirst = false;
          continue;
        }
        cmd.exec(input);
        for (String message : cmd.popMessages())
        {
          System.out.println("  " + message);
        }
      }

      System.out.println("Done.");
    }
    catch(Exception e)
    {
      System.out.println("failed.");
      System.err.print(e.getMessage());
    }
  }
}

/*
 * Main program for umplesync.jar which is used by umpleonline
 * when it wants to send changes to the diagram and have them applied to
 * the text and vice versa
 *
 * TODO: Code smell - rename?
 */
class PlaygroundMain 
{
  depend cruise.umple.sync.*;
  depend cruise.umple.compiler.*;
  depend cruise.umple.compiler.exceptions.*;
  depend cruise.umple.util.*;
  depend java.io.*;

  public static void main(String[] args)
  {
    String answer = "";

    if (args.length == 0)
    {
      System.out.print("Invalid format, please try again specifying:\n");
      System.out.print("-classList <filename>\n");
      System.out.print("-interfaceList <filename>\n");
      System.out.print("-source <filename>\n");
      System.out.print("-generate <Ecore|Papyrus|TextUml|GvStateDiagram|GvClassDiagram|Alloy|Violet|Umlet> <filename>\n");
      System.out.print("<action> <deltaCode> <filename>\n");
      return;
    }

    if (args.length >= 3 && !"-generate".equals(args[0]))
    {
      String actionType = args[0];
      String deltaCode = args[1];
      String filename = args[2];
      String umpleCode = SampleFileWriter.readContent(new File(filename));

      SynchronizationAction action = action(actionType,deltaCode,umpleCode);
      if (action != null)
      {
        action.go();
        System.out.print(action.getUmpleCode());
        return;
      }
    }

    UmpleFile umpleFile = null;
    UmpleModel model = null;

    // Valid values include Json, Yuml, Xmi, Ecore, Papyrus, TextUml,
    // GvStateDiagram, GvClassDiagram, Alloy
    if ("-generate".equals(args[0]) && args.length >= 2)
    {
      String filename = args[2];
      GenerateTarget target = new GenerateTarget(args[1], ""); // output path goes here
      // Add any suboptions specified as -s blah -s blah
      for (int argno = 3; argno <= args.length-2; argno += 2)
      {
        if (args[argno].equals("-s"))
        {
          target.addSuboption(args[argno+1]);
        }
      }
      
      umpleFile = new UmpleFile(filename);
      model = new UmpleModel(umpleFile);
      target.setOverrideAll(true);
      model.addGenerate(target);
    }
    else
    {
      String filename = args[1];
      umpleFile = new UmpleFile(filename);
      model = new UmpleModel(umpleFile);
    }

    try
    {
      model.run();
    }
    catch(UmpleCompilerException e)
    {
      System.err.print(model.getLastResult().toJSON());
    }

    if ("-classList".equals(args[0]))
    {
      for (UmpleClass aClass : model.getUmpleClasses())
      {
        if (answer.length() > 0)
        {
          answer += ",";
        }
        answer += aClass.getName();
      }
    }
    if ("-interfaceList".equals(args[0]))
    {
      for (UmpleInterface aInterface : model.getUmpleInterfaces()) {
        if (answer.length() > 0)
        {
          answer += ",";
        }
        answer += aInterface.getName();
      }
    }
    else if ("-source".equals(args[0]))
    {
      for (String generatedCode : model.getGeneratedCode().values()) {
        if (answer.length() > 0)
        {
          answer += "\n\n\n\n";
        }
        answer += generatedCode;
      }
    }
    else if ("-generate".equals(args[0]))
    {
      answer = model.getCode();
    }

    System.out.print(answer);
  }

  private static SynchronizationAction action(String type, String deltaCode, String umpleCode)
  {
    if ("-addClass".equals(type))
    {
      return new NewAction(deltaCode,umpleCode);
    }
    else if ("-addInterface".equals(type))
    {
      return new NewAction(deltaCode,umpleCode);
    }
    else if ("-removeClass".equals(type))
    {
      return new DeleteAction(deltaCode,umpleCode);
    }
    else if ("-editClass".equals(type))
    {
      return new EditAction(deltaCode,umpleCode);
    }
    else if ("-removeInterface".equals(type))
    {
      return new DeleteAction(deltaCode,umpleCode);
    }
    else if ("-editInterface".equals(type))
    {
      return new EditAction(deltaCode,umpleCode);
    }
    else if ("-addAssociation".equals(type))
    {
      return new NewAssociationAction(deltaCode,umpleCode);
    }
    else if ("-editAssociation".equals(type))
    {
      return new EditAssociationAction(deltaCode,umpleCode);
    }
    else if ("-removeAssociation".equals(type))
    {
      return new DeleteAssociationAction(deltaCode,umpleCode);
    }
    else if ("-addGeneralization".equals(type))
    {
      return new NewGeneralizationAction(deltaCode,umpleCode);
    }
    else if ("-removeGeneralization".equals(type))
    {
      return new DeleteGeneralizationAction(deltaCode,umpleCode);
    }
    else if ("-addPositioning".equals(type))
    {
      return new UpdatePositioningAction(deltaCode,umpleCode);
    }
    else
    {
      return null;
    }
  }
}

use Compiler.ump;
