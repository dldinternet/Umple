// The master of this part of the Umple grammar is available at
// [*http://code.google.com/p/umple/source/browse/trunk/cruise.umple/src/umple_traces.grammar*]

// Copyright: All contributors to the Umple Project
// This file is made available subject to the open source license found at:
// [*http://umple.org/license*]

// Trace capabilities of the MOTL sublanguage of Umple.
// See user manual page: [*ModelOrientedTracingLanguage(MOTL)*]

// The tool to output the trace: [*Tracers*]
traceType : tracer [=tracerType:Console|File|String|Visual|log4j] ( , [=tracerType:Console|File|String|Visual|log4j] )* [[log4jConfig]]* ([[tracerOptions]])* ;
//traceType : tracer [=tracerType:Console|File|String|Visual] ( , [=tracerType:Console|File|String|Visual] )* ( [=onoff:on|off] : [[tracerOptions]] ( , [[tracerOptions]] )* )* ( [=verbisty:verbose] )? ( [tracerArgument] )* ;
tracerOptions- : [[tracerOn]]? [=option:Time|time|Thread|thread|File|file|Line|line|Trace|trace|Trigger|trigger|TraceFile|tracefile|TraceLine|traceline|TriggerLine|triggerline|TriggerFile|triggerfile|Class|class|Object|object|Operation|operation|Name|name|Value|value] [=option:Time|time|Thread|thread|File|file|Line|line|Trace|trace|Trigger|trigger|TraceFile|tracefile|TraceLine|traceline|TriggerLine|triggerline|TriggerFile|triggerfile|Class|class|Object|object|Operation|operation|Name|name|Value|value]*
tracerOn : on:|off:
log4jConfig : (OPEN_ROUND_BRACKET) [log4jLevel] ( , [log4jLevel] )* (CLOSE_ROUND_BRACKET) = (OPEN_ROUND_BRACKET) [log4jAppender] ( , [log4jAppender] )* (CLOSE_ROUND_BRACKET)

trace : [[traceDirective]] | [[traceCase]]

traceDirective : trace [[traceItem]] ( [[executeClause]]|[[traceWhen]]|[[traceFor]]|[[tracePeriod]]|[[traceDuring]]|[[traceCaseActivation]]|[[traceRecord]]|[[traceLevel]]|[[log4jLevel]] )* ;

traceItem- : [[traceEntity]] | [[PreOrPostCondition]]
traceEntity- : ( [[traceOptions]] )?  [trace_entity] (OPEN_ROUND_BRACKET)? (CLOSE_ROUND_BRACKET)? ( , [trace_entity] (OPEN_ROUND_BRACKET)? (CLOSE_ROUND_BRACKET)? )*
traceOptions : [[traceOption]] ( , [[traceOption]] )*
traceOption : [=option:set|get|in|out|entry|exit|cardinality|transition|add|remove]
PreOrPostCondition- : (giving | where)? [[traceCondition]]

executeClause- : execute { [**trace_execute] }
traceWhen :  [=conditionType:where|until|after|giving]? [ [[constraintToken]] ]

traceFor- : for [trace_for]
traceLevel- : level [trace_level]
tracePeriod- : period [trace_period]
traceDuring- : during [trace_duration]
traceRecord- : record [[recordEntity]]
recordEntity- : ( only )? ( " [**trace_record_string] " | [trace_record] ) ( , [trace_record] )*
log4jLevel-  : logLevel [=logLevel:trace|debug|info|warn|error|fatal|all] ( , [=logLevel:trace|debug|info|warn|error|fatal] )*

traceCondition- : [LHS] [[conditionRHS]]
conditionRHS- : [comparison_operator] [RHS]

traceCase : [[traceCaseDef]] | [[traceCaseActivation]] | [[traceCaseDeactivation]]
traceCaseDef- : tracecase [tracecase_name] { [[traceDirective]]* }
traceCaseActivation- : activate [tracecase_act_name] (onAllObjects | onThisThreadOnly)? ;
traceCaseDeactivation- : deactivate [tracecase_deact_name] onThisObject [[deActivateFor]]? ;
deActivateFor- : for [deactivate_for]