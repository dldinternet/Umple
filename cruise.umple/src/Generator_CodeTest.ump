/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

 */

namespace cruise.umple.compiler;

class TestGenerator
{

  public void generate()
  {
    StringBuilder code = new StringBuilder();
    StringBuilder subCode;
    String packageName;
    List<String> allTypes = new ArrayList<String>();
    List<String> interfacesProcessed = new ArrayList<String>();

    code.append("/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF Umple xUnit Model */\n");
    code.append("/*PLEASE DO NOT EDIT THIS CODE*/\n");
    code.append("/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/\n\n");

    boolean isFirst = true;
    for (UmpleClass uClass : model.getUmpleClasses())
    {
      subCode = new StringBuilder();
      if (isFirst)
      {
        isFirst = false;
        packageName = getTargetNamespaceName();
        //nsURI = model.getDefaultNamespace() != null ? model.getDefaultNamespace(): model.getUmpleFile().getSimpleFileName();
        //code.append(StringFormatter.format("",packageName, nsURI));
        code.append(StringFormatter.format(""));
      }

      String superStructureFlag = "";
      String interfaceFlag = "";
      String abstractFlag = "";
      if (uClass.getExtendsClass() != null)
      {
        //superStructureFlag = StringFormatter.format(" eSuperTypes=\"#//{0}\"",uClass.getExtendsClass().getName()); 
      }
      else if (uClass.hasParentInterface()){
        // add class element attributes
		/*List<UmpleInterface> uInterfaces = uClass.getParentInterface();
		StringBuilder interfacesToken = new StringBuilder();
		interfacesToken.append(" eSuperTypes=\"");
		for (UmpleInterface uInterface : uInterfaces) {
			if (interfacesToken.toString().contains("#//"))
				interfacesToken.append(" ");
			interfacesToken.append("#//" + uInterface.getName());
		}
		interfacesToken.append("\"");
		
		superStructureFlag = interfacesToken.toString();
		interfaceFlag = " interface=\"true\"";
		abstractFlag = "abstract=\"true\"";

		// add interfaces
		for (UmpleInterface uInterface : uInterfaces) {
			if (!(interfacesProcessed.contains(uInterface.getName()))) {
				interfacesProcessed.add(uInterface.getName());
				code.append(StringFormatter
						.format(" \n",
								uInterface.getName(), interfaceFlag,
								abstractFlag));
				code.append("");
			}
		}*/
      }

      code.append(StringFormatter.format(" class {0} : Test { \n",uClass.getName()));

      for(Attribute av : uClass.getAttributes())
      {
        String typeName = av.getType() == null ? "String" : av.getType();
        String upperBound = av.getIsList() ? " upperBound=\"-1\"" : "";
        String attrName = StringFormatter.toPascalCase(av.getName());
        
        
        code.append(StringFormatter.format("// tests for attribute: {0}\n", av.getName()));
        
        
        
        
        
        //test Set Attribute
        code.append(StringFormatter.format("\ttestCase{0}: testSet{0} { \n", attrName));
	      
        if (!av.isImmutable())
	      {
      	  //TODO:testGenerator test set assertion  [exception for Immutable] 
	    	  
	    	  
	    	  //set with some constraints
	    	  if (uClass.hasConstraintTrees())
	    	  {
	    		  for(ConstraintTree cs : uClass.getConstraintTrees())
	    		  {
	    			 if (cs.getNumberOfElements()>0)
	    			 {
                                    for(ConstraintVariable cv:cs.getExpressions())
                                    {
                                      if(!(cv instanceof ConstraintTree))
                                      {//FIXME constraints
                                        code.append(StringFormatter.format("a constraint test, fix me"));
                                        code.append(StringFormatter.format("AssertTrue: {0}={set{1} = }\n",uClass.getName() , attrName));
                                      }
                                    }
              			 }
	    		  }
	    	  }
	    	  
	    	  else 
	    	  {
	    	  		
	    	  	if(av.getType() == "String" || av.getType() == null)
	    	  {
	    		   code.append(StringFormatter.format("\t\tAssertTrue: {0}={set{1} = \"id123\"}\n",uClass.getName() , attrName));
	    	  }
	    	  
	    	  if(av.getType() == "Double" || av.getType() == "Integer")
	    	  {
	    		   code.append(StringFormatter.format("\t\tAssertTrue: {0}={set{1} = 123}\n",uClass.getName() , attrName));
	    		   //code.append(StringFormatter.format("\t\tAssertFalse: {0}={set{1} = 1.3}\n",uClass.getName() , attrName));
	    		   
	    	  }
	    	  
	    	  if(av.getType() == "Float")
	    	  {
	    		   code.append(StringFormatter.format("\t\tAssertTrue: {0}={set{1} = 1.2}\n",uClass.getName() , attrName));
	
	    	  }
	    	  

	    	  if(av.getType() == "Boolean") 
	    	  {
	    		   code.append(StringFormatter.format("\t\tAssertTrue: {0}={set{1} = true}\n",uClass.getName() , attrName));
	    	  }
	    		 
	    	  }
	    	  code.append(StringFormatter.format("\t}\n", attrName));
	      }
        
        
       //test get Attribute
      //test get attribute [ this is generated for all attribute without exception]
       code.append(StringFormatter.format("\ttestCase{0}: testGet{0} { \n", attrName));
      
	   code.append(StringFormatter.format("\t\tAssertTrue: {0}={get{1} = value}\n",uClass.getName() , attrName));
       
	   code.append(StringFormatter.format("\t} \n", attrName));
	   
	   
        //TODO: Abstract Assertions:
	      
        
        
          
	      
	      
	      
	      
	      
	      
	      
	      
	      if (av.isIsLazy())
	      {
	    	  //TODO: testGenerator,  add assertion for lazy, we want to see if the object has the lazy-specific LOC in the constructor, Note this is still abstrac ( not language oriented) 
	    	  //  AssertLOC : student={ method=Student(), LOC="name = null;"} 
	    	  if(av.getType() == "String" || av.getType() == null)
	    	  {
	    		  code.append(StringFormatter.format("AssertLOC: {0}={method={0}(), LOC=\"{1} = null\" }\n",uClass.getName() , attrName));
	    	  }
	    	  
	    	  if(av.getType() == "Double" || av.getType() == "Integer")
	    	  {
	    		  code.append(StringFormatter.format("AssertLOC: {0}={method={0}(), LOC=\"{1} = 0\" }\n",uClass.getName() , attrName));
	    	  }
	    	  
	    	  if(av.getType() == "Float")
	    	  {
	    		  code.append(StringFormatter.format("AssertLOC: {0}={method={0}(), LOC=\"{1} = 0.0\" }\n",uClass.getName() , attrName));
	
	    	  }
	    	  

	    	  if(av.getType() == "Boolean") 
	    	  {
	    		  code.append(StringFormatter.format("AssertLOC: {0}={method={0}(), LOC=\"{1} = false\" }\n",uClass.getName() , attrName));
	    	  }
	    	  
	    	  
	    	  
	    	  
	    	  
	    	  if (av.getType() == "")
	    	  {
	    		  code.append(StringFormatter.format(""));
	    	  }
	    	  
	    	  else{
	    		  
	    	  }
	      }
	      
	      if ( av.isImmutable())
	      {
	    	  //TODO:
	    	  code.append(StringFormatter.format("AssertFunc: {0}={set{1}()}\n",uClass.getName() , attrName));
	      }
	      
	      
	      
	      
	    //  code.append("\t}\n");
	      
	      
	      
	      
      }

      ArrayList<Association> internalAssociations = new ArrayList<Association>();
      for(Association as : uClass.getAssociations())
      {
        AssociationEnd myEnd = as.getIsRightNavigable()?as.getEnd(0):as.getEnd(1);
        AssociationEnd theirEnd = as.getIsRightNavigable()?as.getEnd(1):as.getEnd(0);
        

        if (internalAssociations.contains(as))
          continue;

        if (myEnd.getClassName().equals(theirEnd.getClassName())) 
        {
          internalAssociations.add(as);
          code.append(StringFormatter.format("",myEnd.getRoleName(),myEnd.getMultiplicity().getLowerBound(),myEnd.getMultiplicity().getUpperBound(),myEnd.getClassName(),myEnd.getClassName(),theirEnd.getRoleName()));
          code.append(StringFormatter.format("",theirEnd.getRoleName(),theirEnd.getMultiplicity().getLowerBound(),theirEnd.getMultiplicity().getUpperBound(),theirEnd.getClassName(),theirEnd.getClassName(),myEnd.getRoleName()));
        }
        else
        {
          boolean isBidirectional = as.getIsLeftNavigable()&&as.getIsRightNavigable();
          boolean isTheirEndClass = theirEnd.getClassName().equals(uClass.getName());
          //auto-link if bidirectional
          if (isTheirEndClass && isBidirectional)
          {
            myEnd = as.getEnd(1);
            theirEnd = as.getEnd(0);
          }
          //add
          if(isBidirectional)
        	  code.append(StringFormatter.format("",theirEnd.getRoleName(),theirEnd.getMultiplicity().getLowerBound(),theirEnd.getMultiplicity().getUpperBound(),theirEnd.getClassName(),theirEnd.getClassName(),myEnd.getRoleName()));
          else if(!isTheirEndClass)
        	  code.append(StringFormatter.format("",theirEnd.getRoleName(),theirEnd.getMultiplicity().getLowerBound(),theirEnd.getMultiplicity().getUpperBound(),theirEnd.getClassName()));
        }
      }

      for (StateMachine sm : uClass.getStateMachines())
      {
        if ("Simple".equals(sm.getType()))
        {
          String enumerationName = StringFormatter.toPascalCase(sm.getName());
          code.append(StringFormatter.format("",sm.getName(),enumerationName));          

          int index = 0;
          subCode.append(StringFormatter.format("",enumerationName));
          for (State s : sm.getStates())
          {
            subCode.append(StringFormatter.format("",s.getName(),index));
            index += 1;
          }
          subCode.append("");
        }
      }
		
	  	
      code.append("");
      code.append(subCode.toString());
      code.append(StringFormatter.format("}\n"));
      
    }

    if (!isFirst)
    {
      code.append("\n");
    }
    
    //code.append(StringFormatter.format("}"));


    model.setCode(code.toString());
    writeModel();
  }

  private String getFullyQualifiedName(String packageName, String className)
  {
    try
    {
      String fullName = packageName + "." + className;
      Class.forName(fullName);
      return fullName;
    }
    catch (Exception e) 
    {
      return null;  
    }
  }

  private String getTargetNamespaceName(){ 
    if (model.getDefaultNamespace() != null){
      if (model.getDefaultNamespace().length() > 0 )
      {
        String [] namespaces = model.getDefaultNamespace().split("\\.");	
        return namespaces[namespaces.length-1];
      }
    }
    return model.getUmpleFile().getSimpleFileName();
  }

static 
  {
    HashMap<String, String> UpperCaseSingularLookupMap = new HashMap<String, String>();
    UpperCaseSingularLookupMap.put("parameterOne", "a{0}");
    UpperCaseSingularLookupMap.put("removeParameterOne", "placeholder{0}");    
    UpperCaseSingularLookupMap.put("parameterNew", "new{0}");
    UpperCaseSingularLookupMap.put("parameterNext", "next{0}");
    UpperCaseSingularLookupMap.put("addMethod", "add{0}");
    UpperCaseSingularLookupMap.put("removeMethod", "remove{0}");
    UpperCaseSingularLookupMap.put("indexOfMethod", "indexOf{0}");
    UpperCaseSingularLookupMap.put("parameterOld", "old{0}");
    UpperCaseSingularLookupMap.put("parameterExisting", "existing{0}");
    UpperCaseSingularLookupMap.put("parameterIsNew", "isNew{0}");
    UpperCaseSingularLookupMap.put("associationNew", "new{0}");
    UpperCaseSingularLookupMap.put("canSetMethod", "canSet{0}");
    UpperCaseSingularLookupMap.put("parameterCurrent", "current{0}");
    UpperCaseSingularLookupMap.put("deleteMethod", "delete{0}");
    UpperCaseSingularLookupMap.put("setMethod", "set{0}");
    UpperCaseSingularLookupMap.put("enterMethod", "enter{0}");
    UpperCaseSingularLookupMap.put("exitMethod", "exit{0}");
    UpperCaseSingularLookupMap.put("resetMethod", "reset{0}");
    UpperCaseSingularLookupMap.put("getMethod", "get{0}");
    UpperCaseSingularLookupMap.put("getFullMethod", "get{0}FullName");
    UpperCaseSingularLookupMap.put("getStringMethod", "get{0}StringName");
    UpperCaseSingularLookupMap.put("isFinalMethod", "is{0}Final");    
    UpperCaseSingularLookupMap.put("getDefaultMethod", "getDefault{0}");
    UpperCaseSingularLookupMap.put("didAdd", "didAdd{0}");
    UpperCaseSingularLookupMap.put("hasMethod", "has{0}");
    UpperCaseSingularLookupMap.put("associationCanSetOne","canSet{0}");
    UpperCaseSingularLookupMap.put("attributeCanSetOne","canSet{0}");
    UpperCaseSingularLookupMap.put("eventStartMethod", "start{0}Handler");
    UpperCaseSingularLookupMap.put("eventStopMethod", "stop{0}Handler");    
    UpperCaseSingularLookupMap.put("stateNull", "Null");

    HashMap<String, String> UpperCasePluralLookupMap = new HashMap<String, String>();
    UpperCasePluralLookupMap.put("parameterMany", "new{0}");
    UpperCasePluralLookupMap.put("parameterAll", "all{0}");
    UpperCasePluralLookupMap.put("numberOfMethod", "numberOf{0}");
    UpperCasePluralLookupMap.put("minimumNumberOfMethod", "minimumNumberOf{0}");
    UpperCasePluralLookupMap.put("maximumNumberOfMethod", "maximumNumberOf{0}");
    UpperCasePluralLookupMap.put("isNumberOfValidMethod", "isNumberOf{0}Valid");
    UpperCasePluralLookupMap.put("parameterVerifiedMany", "verified{0}");
    UpperCasePluralLookupMap.put("parameterOldMany", "old{0}");
    UpperCasePluralLookupMap.put("parameterCheckNewMany", "checkNew{0}");
    UpperCasePluralLookupMap.put("parameterCopyOfMany", "copyOf{0}");
    UpperCasePluralLookupMap.put("getManyMethod", "get{0}");
    UpperCasePluralLookupMap.put("parameterMany", "new{0}");
    UpperCasePluralLookupMap.put("setManyMethod", "set{0}");
    UpperCasePluralLookupMap.put("didAddMany", "didAdd{0}");
    UpperCasePluralLookupMap.put("hasManyMethod", "has{0}");
    UpperCasePluralLookupMap.put("associationCanSetMany","canSet{0}");
    UpperCasePluralLookupMap.put("attributeCanSetMany","canSet{0}");
    UpperCasePluralLookupMap.put("requiredNumberOfMethod", "requiredNumberOf{0}");

    HashMap<String, String> AsIsSingularLookupMap = new HashMap<String, String>();
    AsIsSingularLookupMap.put("associationOne","{0}");
    AsIsSingularLookupMap.put("attributeOne","{0}");
    AsIsSingularLookupMap.put("stateMachineOne","{0}");
    AsIsSingularLookupMap.put("stateOne","{0}");
    AsIsSingularLookupMap.put("stateString","\"{0}\"");
    AsIsSingularLookupMap.put("eventMethod","{0}");
    AsIsSingularLookupMap.put("eventHandler", "{0}Handler");
        
    HashMap<String, String> AsIsPluralLookupMap = new HashMap<String, String>();
    AsIsPluralLookupMap.put("associationMany","{0}");
    AsIsPluralLookupMap.put("attributeMany","{0}");
    
    ArrayList<String> OneOrManyLookup = new ArrayList<String>();
    OneOrManyLookup.add("attribute");
    OneOrManyLookup.add("parameter");
    
    HashMap<String, String> TestingCredentialsLookUpMap = new HashMap<String, String>();
    TestingCredentialsLookUpMap.put("setAttString", "id123");
    TestingCredentialsLookUpMap.put("getAttString", "id123");
    TestingCredentialsLookUpMap.put("setAttInt", "123");
    TestingCredentialsLookUpMap.put("getAttInt", "123");
    TestingCredentialsLookUpMap.put("setAttInt", "");
    TestingCredentialsLookUpMap.put("setAttFloat", "");
    TestingCredentialsLookUpMap.put("setAttBoolean", "");
  }	

  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".txt";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating Xmi code." + e, e);
    }
  }
}


