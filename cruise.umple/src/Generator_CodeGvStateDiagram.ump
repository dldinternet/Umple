/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

 */

namespace cruise.umple.compiler;

class GvStateDiagramGenerator
{

  public void generate()
  {
    StringBuilder code = new StringBuilder();
    Boolean isFirstState = true;
    String className, smName, clSmName, sLabel, sName;


    code.append("// Code generated by Umple\n\n");
    code.append("digraph state {\n");
    code.append("  compound = true;\n");
    code.append("  size=\"10,10\"\n");
 
    for (UmpleClass uClass : model.getUmpleClasses())
    {
      className = uClass.getName();
      code.append("\n  // Class: "+className+"\n");
      
      for (StateMachine sm : uClass.getStateMachines())
      {
        smName = sm.getName();
        clSmName = className+"_"+smName;
        code.append("\n    // StateMachine: "+smName+"\n");        
        isFirstState = true;
      
        code.append("    // start state black circle\n");
        code.append("    node [shape = point, fillcolor=\"black\", width=0.2 ];\n");
        code.append("    start_"+clSmName+";\n\n");

        code.append("    // Format for normal states\n");
        code.append("    node [shape = rectangle, width=1,style=rounded];\n");      
 
        for (State s : sm.getStates())
        {
          sLabel=s.getName();
          sName=clSmName+"_"+sLabel;
          code.append("\n      // State: "+sLabel+"\n");   

          code.append("      "+sName+" [label = "+sLabel+"];\n");
          if(isFirstState) {
            isFirstState = false;
            code.append("      start_"+clSmName+" -> "+sName+";\n");
          }
          for (Transition t : s.getNextTransition()) {
            code.append("      "+getStateQualifiedName(t.getFromState()) +" -> "+getStateQualifiedName(t.getNextState())+" [ label = \""+t.getEvent().getName()+"\" ];\n");
          }
        }
      }
    }

    code.append("}\n");

    model.setCode(code.toString());
    writeModel();
  }
  
  private String getStateQualifiedName(State s) {
    StateMachine sm = s.getStateMachine();
    UmpleClass c = sm.getUmpleClass();
    return ""+c.getName()+"_"+sm.getName()+"_"+s.getName();
  }

  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".gv";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating GraphVis State Machine code." + e, e);
    }
  } 
}

