/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file generates NuSMV code
  generate NuSMV;
in your umple file, or the command line option
  -g NuSMV

 */

use NuSMVMetamodel.ump;
use NuSMVCoordinationUnit.ump;
namespace cruise.umple.compiler;

class NuSMVGenerator
{
  depend cruise.umple.nusmv.*;
    
  public void generate(){
  	
  	NuSMVCoordinator coord = new NuSMVCoordinator();
    StringBuilder code = new StringBuilder(); 
    NuSMVModule module = new NuSMVModule("","");
    for(UmpleClass uClass : model.getUmpleClasses())
    {
  		for(StateMachine sm : uClass.getStateMachines())
  		{  			
  			module = new NuSMVModule(coord.changeNameCase(sm.getFullName()), sm.getStartState().getName()); 
  			module.setDeclarationPart(coord.generateVariables(sm));
  			module.setAssignPart(coord.generateAssign(sm));
  			module.setTransitionPart(coord.genTransition(sm));	
  		}
  	}
  	
    //This writes the generated code.
    code.append(coord.commentModel(model));
    code.append(module.print());
    terminateCode(code);
  }
  
  private void terminateCode(StringBuilder code) {
    model.setCode(code.toString());
    writeModel();
  }
  
  // Output the NuSMV file to a file with the .als suffix
  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".smv";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating NuSMV code." + e, e);
    }
  } 
}