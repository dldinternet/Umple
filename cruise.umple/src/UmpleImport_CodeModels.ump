/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Model for the subsystem used to syncronize elements in UmpleOnline

*/

namespace cruise.umple.compiler;

class UmpleImportModel
{
	internal StringBuilder umpleBuilder = new StringBuilder();
	
	String generateUmple() {
		umpleBuilder = new StringBuilder();
		for (UmpleImportElement umpleImportElement : umpleImportElements) {
			if(umpleImportElement.getId()!=UmpleImportConstants.ECORE_REFERENCE)
				umpleBuilder.append(umpleImportElement.generateUmple());
		}
		return umpleBuilder.toString();
	}
	
	//resolve assoications by global lookup
	UmpleImportAssociation checkIfOppositeExist(UmpleImportAssociation currEnd){
	  this.addUmpleImportElement(currEnd);
	  UmpleImportAssociation oppoEnd = null;
	  for (UmpleImportElement umpleImportElement : umpleImportElements) {
		  if(umpleImportElement.getId() == UmpleImportConstants.ECORE_REFERENCE){
			  UmpleImportAssociation tempEnd = (UmpleImportAssociation)umpleImportElement;
			  String oppoStartClass = tempEnd.getStartClass();
			  String oppoEndClass = tempEnd.getEndClass();
			  String currStartClass = currEnd.getStartClass();
			  String currEndClass = currEnd.getEndClass();
			  if(currStartClass.equals(oppoEndClass) && currEndClass.equals(oppoStartClass))
				  oppoEnd = tempEnd;
		  }
	  }
	  //update existing association with crrEnd info
	  if(oppoEnd!=null)
	  {
		  for (UmpleImportElement umpleImportElement : umpleImportElements) {
			  if(umpleImportElement.getName() == oppoEnd.getStartClass()){
				  UmpleImportClass umpleClass = (UmpleImportClass)umpleImportElement;
				  umpleClass.removeUmpleImportAssociation(oppoEnd);
				  oppoEnd.setOtherLowerBound(currEnd.getLowerBound());
				  oppoEnd.setOtherUpperBound(currEnd.getUpperBound());
				  umpleClass.addUmpleImportAssociation(oppoEnd);
			  }
		  }  
	  }
	  return oppoEnd;
	}
}

class UmpleImportPackage
{
	String generateUmple() {
		StringBuilder umpleBuilder = this.getUmpleBuilder();
		umpleBuilder.append("namespace " + this.getName() + ";");
		return umpleBuilder.toString();
	}
}

class UmpleImportClass
{
	String generateUmple() {
	    StringBuilder umpleBuilder = this.getUmpleBuilder();
		umpleBuilder.append("\n\n");
		if(isInterface){
			umpleBuilder.append("interface "+this.getName() +"\n{");
		}else{
			umpleBuilder.append("class "+ this.getName() +"\n{");
			if(superTypes.size()!=0){
				for (String superType : superTypes) {
				    if(!superType.isEmpty())
						umpleBuilder.append("\n  isA "+ superType+";");
				}
			}
		}
		for (UmpleImportAttribute umpleImportAttribute : umpleImportAttributes) {
			umpleBuilder.append(umpleImportAttribute.generateUmple());
		}
		//inline associations
		for (UmpleImportAssociation association : umpleImportAssociations) {
			umpleBuilder.append(association.generateUmple());
		}
		umpleBuilder.append("\n}");
		return umpleBuilder.toString();
	}
}

class UmpleImportAttribute
{
	String generateUmple() {
		StringBuilder builder = this.getUmpleBuilder();
    	String umpleType = getUmpleTypeFromEcoreType(this.dataType);
    	builder.append("\n\t" + umpleType + this.getName()+";");
    	return builder.toString();
    }
    
    private String getUmpleTypeFromEcoreType(String uType)
  	{
		String ret="";
		if(uType.equals("EInt"))
			ret = "Integer";
		else if(uType.equals("EDouble"))
			ret = "Double";
		else if(uType.equals("EDate"))
			ret = "Date";
		else if(uType.equals("EBoolean"))
			ret = "Boolean";
		else if(uType.equals("EString")){
			if(upperBound!=1)
				ret = "String";
		}
		else
			ret = uType;
		if(upperBound!=1)
    		ret +="[]";
		if(!ret.isEmpty())
			ret += " ";
		return ret;
  	}
}

class UmpleImportAssociation
{	
	String generateUmple() {
		StringBuilder builder = this.getUmpleBuilder();
    	builder.append("\n\t");
		boolean isUniDirection = this.getEndClassName() == null;
		if (isUniDirection)
			builder.append("0..1 -> ");
		else {
			builder.append(this.generateMultiplicityBound(
					this.getOtherLowerBound(), this.getOtherUpperBound())
					+ " " + this.getEndClassName() + " -- ");
		}
		builder.append(this.generateMultiplicityBound(this.getLowerBound(),
				this.getUpperBound()) + " " + this.getEndClass() + " " + this.getName() + ";");
    	return builder.toString();
    }
    
    private String generateMultiplicityBound(int lowerBound, int upperBound) {
		String rtn = "";
		if (upperBound == -1) {
			if (lowerBound == 0)
				rtn = "*";
			else
				rtn = StringFormatter.format("{0}..*", lowerBound);
		} else if (lowerBound == upperBound) {
			rtn = StringFormatter.format("{0}", lowerBound);
		} else {
			rtn = StringFormatter.format("{0}..{1}", lowerBound, upperBound);
		}
		return rtn;
	}
}
