// The master of this part of the Umple grammar is available at
// [*http://code.google.com/p/umple/source/browse/trunk/cruise.umple/src/umple_constraints.grammar*]

// Copyright: All contributors to the Umple Project
// This file is made available subject to the open source license found at:
// [*http://umple.org/license*]

// Constraints in Umple.
// This is currently under development. Constraint capability is being
// developed in agile increments. The first step, described below,
// allows limiting the values of attributes. Code generation is not currently enabled.
// Constraints may appear in classes (including association classes) 
// as well as in states.
precondition : [ [name]? pre: [[constraint]] ]
postcondition : [ [name]? post: [[constraint]] ]

invariant : [ ([name] :)? ([[constraint]]) ]

// A constraint is an expression optionally be surrounded in round brackets or negated
constraint- : OPEN_ROUND_BRACKET ([[constraintBody]]) CLOSE_ROUND_BRACKET |  [[constraintBody]]
negativeConstraint : ! [[constraint]] | not [[constraint]] | ~ [[constraint]]

// A constraint body is a constraint expression (possibly with a linking operator such as && or ||). 
constraintBody- : [[constraintExpr]] ([[linkingOp]])*
linkingOp : ( [=||] [[constraintExpr]]) | ( [=andOp:and|&&|&] [[constraintExpr]]) | ( [=orOp:or] [[constraintExpr]])  
constraintExpr- :  [[negativeConstraint]] | [[stringExpr]] | [[boolExpr]] | [[genExpr]] | [[numExpr]] | [loneBoolean] ( [ [index] ] )? 

compoundExpr- : [[stringExpr]]  | [[boolExpr]] | [[numExpr]] | [[genExpr]] 

//must be a boolean
boolExpr : [=literal:true|false] | [~name] [[equalityOp]] [=literal:true|false] | [=literal:true|false] [[equalityOp]] [~name] | [~name] [ [~index] ] [[equalityOp]] [=literal:true|false]

//must be string
stringExpr : [~name] [[equalityOp]] [[stringLit]] | [[stringLit]] [[equalityOp]] [~name] | [~name] [ [~index] ] [[equalityOp]] [[stringLit]]
stringLit- : " [**quote] " | ' [**quote] '

//basically the "other" catagory, contains everything that can be equal to something else
genExpr : [~name] ( [ [index] ] )? [[equalityOp]] [~name] ( [ [index] ] )?

//for floats, doubles and ints
numExpr : [~name] ( . [~tail]  )? ( [ [index] ] )? [[ordinalOp]] [~name] ( . [~tail]  )? ( [ [index] ] )?

equalityOp- :  [[equalsOp]] | [[notequalsOp]] 

equalsOp- : [=equalsOp:==|=|equals]
notequalsOp- : [=notequalsOp:!=|/=|=!|=/=]

ordinalOp- :  [[greaterOp]] | [[lessOp]] | [[moreOp]] | [[smallerOp]]

greaterOp- : [=greaterOp:greater|>=|=>]
lessOp- : [=lessOp:less|<=|=<]
moreOp- : [=moreOp:larger|>]
smallerOp- : [=smallerOp:smaller|<]

// assOps- : [=associationOp : larger | smaller | exact | hasAll]

//  constraintVal : [name]

//  constraintBody : [name]


// NOTE: Additional grammar parts deleted while testing is ongoing.
