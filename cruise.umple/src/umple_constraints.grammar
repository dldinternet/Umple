// The master of this part of the Umple grammar is available at
// [*http://code.google.com/p/umple/source/browse/trunk/cruise.umple/src/umple_constraints.grammar*]

// Copyright: All contributors to the Umple Project
// This file is made available subject to the open source license found at:
// [*http://umple.org/license*]

// Constraints in Umple.
// This is currently under development. Constraint capability is being
// developed in agile increments. The first step, described below,
// allows limiting the values of attributes. Code generation is not currently enabled.
// Constraints may appear in classes (including association classes) 
// as well as in states.
precondition : [ [name]? pre: [[constraint]] ]
postcondition : [ [name]? post: [[constraint]] ]

invariant : [ ([name] :)? ([[constraint]]) ]
constraintToken : [[constraint]]

// A constraint is an expression optionally be surrounded in round brackets or negated
constraint- :  [[constraintBody]] |  [[constraintExpr]] [[linkingOp]]?
negativeConstraint : ! [[constraint]] | not [[constraint]] | ~ [[constraint]]

// A constraint body is a constraint expression (possibly with a linking operator such as && or ||). 
constraintBody : OPEN_ROUND_BRACKET [[constraint]] CLOSE_ROUND_BRACKET
linkingOp- : ( [=andOp:and|&&|&] | [!orOp:OPEN_ROUND_BRACKETor|\Q||\ECLOSE_ROUND_BRACKET] ) [[constraint]]
constraintExpr- : [[negativeConstraint]] | [[statemachineExpr]] | [[stringExpr]] | [[boolExpr]] | [[numExpr]] | [[associationExpr]]  | [[genExpr]] | [[loneBoolean]] | { [!fakeContraint:[^\n]+] } 

loneBoolean : [[constraintName]]

//must be a boolean
boolExpr :  [[constraintName]] [[equalityOperator]] [[boolLiteral]] | [[boolLiteral]] [[equalityOperator]]  [[constraintName]] | [[boolLiteral]]
boolLiteral : [=literal:true|false]

//must be string
stringExpr : [[stringExprOperator]] | [[stringExprPlain]] 
stringExprPlain- : [[constraintName]] [[equalityOperator]] [[stringLiteral]] | [[stringLiteral]] [[equalityOperator]] [[constraintName]]
stringExprOperator- : [[stringComplexExpression]] [[equalityOperator]] [[stringComplexExpression]] | [[stringComplexExpression]] [[equalityOperator]] [[stringName]] | [[stringName]] [[equalityOperator]] [[stringComplexExpression]]
stringLiteral- : " [**quote] " | ' [**quote] '
stringName- : [[stringLiteral]] | [[constraintName]]
stringComplexExpression : [[stringPlusOperator]]
stringPlusOperator- : [[stringName]] ( [=concat:+] [[stringPlusOperator]] )?

//basically the "other" catagory, contains everything that can be equal to something else
genExpr : [[constraintName]] [[equalityOperator]] [[constraintName]]

//for floats, doubles and ints
numExpr : [[numberExpression1]] | [[numberExpression2]] | [[numberExpression3]] | [[numberExpression4]]
numberExpression1 -: ( [[arithmeticCall]] | [[numberName]] ) [[ordinalOp]] ( [[arithmeticCall]] | [[numberName]] )
numberExpression2 -: ( [[arithmeticCall]] | [[constraintName]] ) [[equalityOperator]] ( [[arithmeticCall]] | [[numberLiteral]] )
numberExpression3 -: ( [[arithmeticCall]] | [[numberLiteral]] ) [[equalityOperator]]    ( [[arithmeticCall]] | [[constraintName]] )
numberExpression4 -: ( [[arithmeticCall]] | [[numberLiteral]] ) [[equalityOperator]]    ( [[arithmeticCall]] | [[numberLiteral]] )
numberLiteral- : [!number:[0-9]+([\\.][0-9]+)?]
numberName- : [[numberLiteral]] | [[constraintName]]
arithmeticCall : [[lowArithmeticOperatorCall]] | [[highArithmeticOperatorCall]]
lowArithmeticOperatorCall- : ( [[highArithmeticOperatorCall]] | [[arithmeticResolve]] )? [=operator:+|-] ( [[arithmeticCall]] | [[arithmeticResolve]] ) 
highArithmeticOperatorCall- : [[arithmeticResolve]] [=operator:*|/|^] ( [[highArithmeticOperatorCall]] | [[arithmeticResolve]] ) 
arithmeticResolve -: -( [[arithmeticCall]] -) | [[numberName]]

equalityOperator- :  [=equalsOp:==|equals] | [=notequalsOp:!=|/=|=!|=/=]
ordinalOp- : [=greaterOp:greater|>=|=>|=>=] | [=lessOp:less|<=|=<|=<=] | [=moreOp:larger|>] | [=smallerOp:smaller|<]

associationExpr : [[constraintName]] [[associationOperators]] [[associationLiteral]]
associationOperators- : [=firstOp:cardinality|has] ( [[ordinalOp]] | [[equalityOperator]] | [=all] )?
associationLiteral : [[constraintParameter]] ( , [[associationLiteral]] )?

statemachineExpr : [[constraintName]] [[statemachineOperators]] [[statemachineLiteral]]
statemachineOperators- : [=isInOp:is|state] [=ignore:==|in] | [=isNotInOp:is|state] ( [=ignore:!=] | [=ignore:not] [=ignore:in] )
statemachineLiteral- : [=state]? [~stateName]

constraintName : [=new]? [!name:[a-zA-Z_][a-zA-Z0-9_-]*] [[constraintIndexOperator]]* [[constraintParameterList]]? [[constraintScopeOperator]]?
constraintIndexOperator- : [ [!index:[0-9]+] ]
constraintScopeOperator :  ( . | -> ) [[constraintName]]
constraintParameterList : OPEN_ROUND_BRACKET [[constraintParameter]]? ( [=comma:,] [[constraintParameter]] )* CLOSE_ROUND_BRACKET
constraintParameter : [=boolLit:true|false] | [[stringLiteral]] | [[constraintName]] | [[numberLiteral]]

// NOTE: Additional grammar parts deleted while testing is ongoing.
