class UmpleInternalParser {

   private void analyzeFIXML(Token t, int analysisStep){
    if (analysisStep != 2)
	    {
	      shouldProcessAgain = shouldProcessAgain || (analysisStep == 1);
	      return;
	    }
	    if (t.is("fixmlDefinition"))
	    {
	      analyzeFIXML(t);
	    }
  }

   private void analyzeFIXML(Token t){
    for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("fixmlContent")) {
				analyzeFIXMLContetnt(subToken);
			}
		}
  }

   private void analyzeFIXMLContetnt(Token t){
    for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("endContent")) {
				analyzeFIXMLEndContetnt(subToken);
			} else if (subToken.getName().equals("extendContent")) {
				analyzeFIXMLextendedContentContetnt(subToken);
			}
		}
  }


   private UmpleClass analyzeFIXMLEndContetnt(Token t){
	  UmpleClass uClass;
	  boolean available = getModel().getUmpleClass(t.getSubToken("name").getValue()) != null ? true : false;
	  if (available) {
		  uClass  = getModel().getUmpleClass(t.getSubToken("name").getValue());
	  } else {
		  uClass = new UmpleClass(t.getSubToken("name").getValue());
	  }
		for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("tagDefinition")) {
				analyzeFIXMLAttributes (subToken,uClass);
			}
		}
		if (! available)	getModel().addUmpleClass(uClass);
		return uClass;
  }


   private UmpleClass analyzeFIXMLextendedContentContetnt(Token t){
	  UmpleClass uClass;
	  boolean available = getModel().getUmpleClass(t.getSubToken("name").getValue()) != null ? true : false;
	  if (available) {
		  uClass  = getModel().getUmpleClass(t.getSubToken("name").getValue());
	  } else {
		  uClass = new UmpleClass(t.getSubToken("name").getValue());
	  }
		for (Token subToken : t.getSubTokens()) {
			if (subToken.getName().equals("tagDefinition")) {
				analyzeFIXMLAttributes (subToken,uClass);
			} else if (subToken.getName().equals("endContent")){
				UmpleClass rUClass = analyzeFIXMLEndContetnt(subToken);
				addAssociation(uClass, rUClass);
			} else if (subToken.getName().equals("extendContent")) {
				UmpleClass rUClass = analyzeFIXMLextendedContentContetnt(subToken);
				addAssociation(uClass, rUClass);
			}
		}
		if (! available)	getModel().addUmpleClass(uClass);
	  return uClass;
  }


   private void analyzeFIXMLAttributes(Token t, UmpleClass uClass){
    String name = t.getSubToken(0).getValue();
    boolean available = uClass.getAttribute(name) != null ? true : false;
    if (!available) {
		String value = "\""+t.getSubToken(3).getValue()+"\"";
		uClass.addAttribute(name, "String", "", value, false);    	
    }
  }


   private void addAssociation(UmpleClass uClass, UmpleClass rUClass){
	  	Multiplicity m = new Multiplicity();
		
		if (getModel().getAssociation(rUClass.getName()+"_Object") != null) {			
			Integer bound = Integer.parseInt(getModel().getAssociation(rUClass.getName()+"_Object").getEnd(1).getMultiplicity().getBound());
			bound++;
			m.setBound( bound.toString());
			getModel().getAssociation(rUClass.getName()+"_Object").getEnd(1).setMultiplicity(m);
			for (AssociationVariable yourAs : uClass.getAssociationVariables()) {
				if (yourAs.getName().equals(rUClass.getName()+"_Object")) {
					yourAs.setMultiplicity(m);
				}
			}
			
		} else {
			m.setBound("1");
			AssociationEnd leftEnd = new AssociationEnd(uClass.getName()+"_Object",uClass.getName(), "",uClass.getName(), m);
			AssociationEnd rightEnd = new AssociationEnd(rUClass.getName()+"_Object",rUClass.getName(), "",rUClass.getName(), m);		
			Association aAssociation = new Association(false, true,leftEnd,rightEnd);
			aAssociation.setName(rUClass.getName()+"_Object");
			getModel().addAssociation(aAssociation);	    
			AssociationEnd myEnd = aAssociation.getEnd(0);
		    AssociationEnd yourEnd = aAssociation.getEnd(1);
		    AssociationVariable myAs = new AssociationVariable(myEnd.getRoleName(),myEnd.getClassName(),myEnd.getModifier(),null,myEnd.getMultiplicity(),aAssociation.getIsLeftNavigable());
		    AssociationVariable yourAs = new AssociationVariable(yourEnd.getRoleName(),yourEnd.getClassName(),yourEnd.getModifier(),null,yourEnd.getMultiplicity(),aAssociation.getIsRightNavigable());
		    myAs.setRelatedAssociation(yourAs);
		    boolean added = uClass.addAssociationVariable(yourAs);
		    if (added)
		    {
		      unlinkedAssociationVariables.add(yourAs);
		      uClass.addAssociation(aAssociation);
		    }
		}
  }
  


}