/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file contains umplified hand written classes that were most likely used for the Xtext / Ecliipse plugin

*/

namespace cruise.umple.validation;

class UmpleJavaValidator
{
  isA AbstractUmpleJavaValidator;
  
  //	@Check
  //	public void checkGreetingStartsWithCapital(Greeting greeting) {
  //		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
  //			warning("Name should start with a capital", MyDslPackage.Literals.GREETING__NAME);
  //		}
  //	}  
  
}

external AbstractUmpleJavaValidator { }

// The following classes says there were generated by Xtext, but was put in the "src" directory
// I umplified them, and now it is in the src-gen-umple directory
// Please note that if there are duplicates (because Xtext really did generate this file,
// then please remove this, remove the src-gen-umple version and ensure that Xtext puts it
// into the correct src-gen directory)
// see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
namespace cruise.umple.scoping;

class UmpleScopeProvider
{
  isA AbstractDeclarativeScopeProvider;
  depend org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
}

external AbstractDeclarativeScopeProvider { }

namespace cruise.umple.formatting;


/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class UmpleFormatter
{
  isA AbstractDeclarativeFormatter;
  depend org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
  depend org.eclipse.xtext.formatting.impl.FormattingConfig;

  	@Override
  	protected void configureFormatting(FormattingConfig c) {
      // It's usually a good idea to activate the following three statements.
      // They will add and preserve newlines around comments
      //		c.setLinewrap(0, 1, 2).before(getGrammarAccess().getSL_COMMENTRule());
      //		c.setLinewrap(0, 1, 2).before(getGrammarAccess().getML_COMMENTRule());
      //		c.setLinewrap(0, 1, 1).after(getGrammarAccess().getML_COMMENTRule());
  	}
  
}
 
external AbstractDeclarativeFormatter {}


namespace cruise.umple;

// Use this class to register components to be used at runtime / without the Equinox extension registry.
class UmpleRuntimeModule {
  isA AbstractUmpleRuntimeModule;
}

external AbstractUmpleRuntimeModule { }