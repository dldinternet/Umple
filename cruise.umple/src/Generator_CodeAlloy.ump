/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file generates Alloy code
  generate Alloy;
in your umple file, or the command line option
  -g Alloy

 */

namespace cruise.umple.compiler;
use AlloyMetaModel.ump;

class AlloyGenerator
{
  depend cruise.umple.alloy.*;
  Utility utility = new Utility();
  public void generate(){
  
  	final String className = "UmpleObject";
    StringBuilder code = new StringBuilder(); 
       
    //This statement adds comment to model
    utility.commentModel(code,model);
    utility.printOpenStatement(className,"ordering",code);
    AlloyObject aObj = new AlloyObject();
    
    //Prints AlloyObject signature to be inherited by other signatures
    aObj.printObject(className,code);
  
    // Iterate through all classes and generate Alloy
    Set<UmpleClass> processedClass = new HashSet<UmpleClass>(); // needed to prevent double reflexive count
    for (UmpleClass uClass : model.getUmpleClasses())
    {
       //Set<Association> processedAssociations = new HashSet<Association>(); // needed to prevent double reflexive count
       Signature sig = new Signature(uClass,className);
       sig.printSignature(code);
       processedClass.add(uClass);
    }
  
    for(Association assoc : model.getAssociations()){
    	utility.addNewLine(code,2);
    	//genEndConstraint(assoc,code);
        //associativityRule(assoc,code);
        utility.addNewLine(code,2);
    }
    terminateCode(code);
  }
  
  private void terminateCode(StringBuilder code) {
    model.setCode(code.toString());
    writeModel();
  } 
  
  // Output the Alloy file to a file with the .als suffix
  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".als";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating Alloy code." + e, e);
    }
  } 
}

