/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file generates Alloy code
  generate Alloy;
in your umple file, or the command line option
  -g Alloy

 */

namespace cruise.umple.compiler;

class AlloyGenerator
{
  public void generate()
  {
    StringBuilder code = new StringBuilder();
    int indent = 0;
    AssociationEnd assocEndToOutput;
    AssociationEnd leftEnd;
    AssociationEnd rightEnd;
    String alloyMultiplicity;

    code.append("// Alloy file generated using Umple from "+model.getUmpleFile().getFileName()+" \n\n");

    
    // Iterate through all classes and generate Alloy
    for (UmpleClass uClass : model.getUmpleClasses())
    {
       Set processedAssociations = new HashSet(); // needed to prevent double reflexive count
    
      code.append("sig "+uClass.getName()+" {\n");
      indent += 2;
    
      // Iterate through associations, but only visit in first class encounter
      for(Association uAssoc : uClass.getAssociations()) {

        if(processedAssociations.contains(uAssoc)) continue;

        // Prevent double-counting of  associations
        processedAssociations.add(uAssoc);
        
        leftEnd = uAssoc.getEnd(0);
        rightEnd = uAssoc.getEnd(1);
        if(rightEnd.getClassName().equals(uClass.getName())) {
          assocEndToOutput=leftEnd;
        }
        else {
          assocEndToOutput=rightEnd;        
        }
        String theMult = assocEndToOutput.getMultiplicity().getParserable();
        if(theMult.equals("1")) {
          alloyMultiplicity = "one";
        }
        else if(theMult.equals("0..1")) {
          alloyMultiplicity = "lone";
        }
        else if(theMult.equals("*")) {
          alloyMultiplicity = "set";
        }
        else {
          alloyMultiplicity = "some";
        }

       // Output alloy assertions for this association
          appendSpaces(code, indent);
          code.append(assocEndToOutput.getRoleName()+" : "+ alloyMultiplicity + " " +assocEndToOutput.getClassName()+"\n");
        
      }
      indent -=2;
      code.append("}\n");
    }
    
    terminateCode(code);
  }

  private void terminateCode(StringBuilder code) {

    model.setCode(code.toString());
    writeModel();
  } 

  // Used to indent code
  private void appendSpaces(StringBuilder code, int numSpaces) {
    for(int i=0; i<numSpaces; i++) {
      code.append(" ");
    }
  }

  // Output the Alloy file to a file with the .als suffix
  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".als";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating Alloy code." + e, e);
    }
  } 
}

