/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Code for the variability modeling language. See Vml.ump for the model.
This code is injected into the Vml.ump model using Umple's mixin capability 

*/

namespace cruise.vml;

class VmlConsole 
{
  depend java.io.*;
  depend cruise.umple.util.*;
  public static String console = "";
  
  public static void main(String[] args) 
  {
    console = "";
     
    if (args.length < 2)
    {
      println("Usage: java -jar vml.jar <output_file> <input_files>\nExample: java -jar vml.jar myProgram.ump myBase.vml myInvoke.vml");
      return;
    }
     
    String outputFile = args[0];
    String[] inputFiles = new String[args.length - 1];
    for (int i=1; i<args.length; i++)
    {
      inputFiles[i-1] = args[i];
    }

    VmlParser parser = new VmlParser("vml");
    for(String filename : inputFiles)
    {
      File file = new File(filename);
      String input = SampleFileWriter.readContent(file);
      boolean answer = parser.parse("program",input).getWasSuccess();
      
      if (answer)
      {
        answer = parser.analyze().getWasSuccess();
      }
      
      if (!answer)
      {
        println("Unable to parser: ["+ file.getAbsolutePath() +"]");
      }
    }
    
    SampleFileWriter.createFile(outputFile,parser.getSystem().getCode());
    println("Successfully created ["+ outputFile +"]");
  }
   
  private static void println(String output)
  {
    console += output + "\n";
    System.out.println(output);
  }
}


class VmlSystem
{
  public Concern getConcern(String concernName)
  {
    if (concernName == null)
    {
      return null;
    }
    for (Concern c : getConcerns())
    {
      if (concernName.equals(c.getName()))
      {
        return c;
      }
    }
    return null;
  }
}

class Concern
{
  public String toString()
  {
    return name + ":" + numberOfVariationPoints() + " variation points";
  }
  
  public VariationPoint getVariationPoint(String name)
  {
    if (name == null)
    {
      return null;
    }
  
    for (VariationPoint vp : getVariationPoints())
    {
      if (name.equals(vp.getName()))
      {
        return vp;
      }
    }
    return null;
  }
}

class CodeSnippet
{
  public String toString()
  {
    if (code == null)
    {
      return "";
    }
    else
    {
      return code;
    }
  }
}

class VariationPoint
{
  public String toString()
  {
    if (codeSnippet == null)
    {
      return name + ":" + kind + ":";
    }
    else
    {
      return name + ":" + kind + ":" + codeSnippet;
    }
  }
  
  public Variant getVariant(String name)
  {
    if (name == null)
    {
      return null;
    }
    for (Variant var : getVariants())
    {
      if (name.equals(var.getName()))
      {
        return var;
      }
    }
    return null;
  }
  
}

class Variant
{
  public String toString()
  {
    if (name == null)
    {
      return "";
    }
    else
    {
      return name;
    }
  }
}

class VmlParser
{
  internal Map<VariationPoint,List<String>> variationPointToRequiresListMap = null;
  internal VariationPoint[] invokedVariations;
  
  after constructor { init(); }

  private void init()
  {
    addCouple(new Couple("\"","\""));
    addCouple(new Couple("{","}"));
    
    addRule("program- : ( [[comment]] | [[concern]] | [[invoke]] | [[codeSnippet]] )*");
    addRule("concern : Concern [name] { ( [[comment]] | [[variationPoint]] )* }");
    addRule("variationPoint : ( [[variantVariationPoint]] | [[regularVariationPoint]] )");
    addRule("regularVariationPoint- : VariationPoint [name] ( requires [[requiresList]]  )? { [[kind]]? [[codeSnippet]]?  }");
    addRule("variantVariationPoint- : VariationPoint [name] ( requires [[requiresList]]  )? { [[kind]]? [[variant]]*  }");
    addRule("requiresList : [name] ( , [name] )*");
    addRule("kind- : Kind : [=kind:Alternative|Optional] ;");
    addRule("variant : Variant [name] { [[codeSnippet]]? }");
    addRule("invoke- : [[invokeAlternative]] | [[invokeOptional]]");
    addRule("invokeOptional : invoke -( [concern] , [variationPoint] -) ;");
    addRule("invokeAlternative : invoke -( [concern] , [variationPoint] , [variant] -) ;");
    addRule("codeSnippet- : [**codeSnippet]");
    addRule("comment- : [[inlineComment]] | [[multilineComment]]");
    addRule("inlineComment- : // [*inlineComment]");
    addRule("multilineComment- : /* [**multilineComment] */");
    
    system = new VmlSystem();
  }  
  
  public ParseResult analyze()
  {
    for(Token t : getRootToken().getSubTokens())
    {
      if (t.is("codeSnippet"))
      {
        system.addCodeSnippet(new CodeSnippet(t.getValue()));
      }
      else if (t.is("concern"))
      {
        handleConcern(t);
      }
      else if (t.is("invokeOptional") || t.is("invokeAlternative"))
      {
        handleInvoke(t);
      }
    }
    return getParseResult();
  }
  
  private void handleConcern(Token concernToken)
  {
    variationPointToRequiresListMap = new HashMap<VariationPoint,List<String>>();

    Concern c = new Concern(concernToken.getValue("name"));
    for(Token t : concernToken.getSubTokens())
    {
      if (t.is("variationPoint"))
      {
        handleVariationPoint(t,c);
      }
    }
   
    for (VariationPoint vp : variationPointToRequiresListMap.keySet())
    {
      for (String vpName : variationPointToRequiresListMap.get(vp))
      {
        VariationPoint requires = c.getVariationPoint(vpName);
        if (requires != null)
        {
          vp.addRequire(requires);  
        }
      }
    }
    system.addConcern(c);
  }
  
  private void handleInvoke(Token invokeToken)
  {
    String concernName = invokeToken.getValue("concern");
    String variationPointName = invokeToken.getValue("variationPoint");
    
    Concern c = system.getConcern(concernName);
    if (c == null)
    { 
      return;
    }
    
    VariationPoint vp = c.getVariationPoint(variationPointName);
    if (vp == null)
    {
      return;
    }
    
    invokedVariations.add(vp);
    
    for (VariationPoint require : vp.getRequires())
    {
      if (!invokedVariations.contains(require))
      {
        invokedVariations.add(require);
        
        CodeSnippet snippet = null;
        if (VariationPoint.Kind.Optional.equals(require.getKind()))
        {
          snippet = require.getCodeSnippet();
        }
        else if (VariationPoint.Kind.Alternative.equals(require.getKind()) && require.numberOfVariants() > 0)
        {
          snippet = require.getVariant(0).getCodeSnippet();
        }
        
        if (snippet != null)
        {
          system.addCodeSnippet(snippet);
        }
      }
    }    
    
    if (invokeToken.is("invokeAlternative"))
    {
      String variantName = invokeToken.getValue("variant");
      Variant var = vp.getVariant(variantName);
      
      if (var == null)
      {
        return;
      }
      
      system.addCodeSnippet(var.getCodeSnippet());
    }
    else
    {
      system.addCodeSnippet(vp.getCodeSnippet()); 
    }
  }
  
  private void handleVariationPoint(Token variationToken, Concern c)
  {
    VariationPoint vp = new VariationPoint(variationToken.getValue("name"));
    
    Token requiresToken = variationToken.getSubToken("requiresList");
    ArrayList<String> allRequires = new ArrayList<String>();
    if (requiresToken != null)
    {
      for (Token t : requiresToken.getSubTokens())
      {
        if (t.is("name"))
        {
          allRequires.add(t.getValue());
        }
      }
    }
    
    if (variationToken.getValue("kind") != null)
    {
      VariationPoint.Kind kind = VariationPoint.Kind.valueOf(variationToken.getValue("kind")); 
      vp.setKind(kind);
    }
    
    if (vp.getKind() == VariationPoint.Kind.Optional)
    {
      
      if (variationToken.getValue("codeSnippet") != null)
      {
        vp.setCodeSnippet(new CodeSnippet(variationToken.getValue("codeSnippet")));
      }
    }
    else if (vp.getKind() == VariationPoint.Kind.Alternative)
    {
      for(Token t : variationToken.getSubTokens())
      {
        if (t.is("variant"))
        {
          handleVariant(vp,t);
        }
      }
    }
    c.addVariationPoint(vp);
    variationPointToRequiresListMap.put(vp,allRequires);
  }
  
  private void handleVariant(VariationPoint vp, Token variantToken)
  {
    Variant v = new Variant(variantToken.getValue("name"));
    if (variantToken.getValue("codeSnippet") != null)
    {
      v.setCodeSnippet(new CodeSnippet(variantToken.getValue("codeSnippet")));
    }
    vp.addVariant(v);
  }   
}

// POSITION INFORMATION

class Concern
{
  position 70 35 120 63;
  position.association 0 30,63 30,0;
}


class VariationPoint
{
  position 70 181 120 62;
  position.association 0 120,52 10,0;
  position.association 1 30,62 30,0;
  position.association 2 0,40 40,62;
}


class Variant
{
  position 70 325 120 62;
  position.association 0 120,30 0,30;
}


class VmlSystem
{
  position 285 200 120 62;
  
  position.association 0 62,62 62,0;
  position.association 1 16,0 99,63;
}


class VmlParser
{
  position 285 70 120 62;
  position.association 0 62,62 62,0;
}


class CodeSnippet
{
  position 285 325 120 62;

}