/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Model for the subsystem used to syncronize elements in UmpleOnline

*/

namespace cruise.umple.compiler;

class ECoreImportHandler
{	
	internal UmpleImportModel model = new UmpleImportModel("");
	internal currentElement = "";
	internal UmpleImportClass currentClass = null;
	
	public UmpleImportModel readDataFromXML(String filename) throws IOException, ParserConfigurationException {
		SAXParserFactory factory = SAXParserFactory.newInstance();
		factory.setNamespaceAware(true);
		try {
			SAXParser parser = factory.newSAXParser();
			parser.parse(new File(filename), this);
		} catch (SAXException e) {
			System.out.println(e.getMessage());
		}
		return model;
	}

	public void startDocument() throws SAXException {
		model = new UmpleImportModel("");
	}

	public void endDocument() throws SAXException {
		// System.out.println("end document");
	}

	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		currentElement = localName;		
		//load package object
		if (currentElement.equals("EPackage")) {
			UmpleImportPackage umplePackage = new UmpleImportPackage(UmpleImportConstants.ECORE_PACKAGE, "");
			String nameSpace = attributes.getValue(UmpleImportConstants.XMI_PACKAGENAME);
			if (nameSpace != null && !nameSpace.isEmpty()) {
				umplePackage.setName(nameSpace);
				model.addUmpleImportElement(umplePackage);
			}
		} 
		//load class/interface/dataType object
		else if (currentElement.equals("eClassifiers")) {
			String attrType = attributes.getValue(UmpleImportConstants.XMI_TYPE);
			boolean checkIsClass = attrType.equals(UmpleImportConstants.ECORE_CLASS);
			boolean checkIsDataType = attrType.equals(UmpleImportConstants.ECORE_DATATYPE);
			boolean checkDataTypeIsExtraClass = false;
			if (checkIsDataType){
				String dataTypeName = attributes.getValue(UmpleImportConstants.XMI_NAME);
				//exclude umple default date and time dataType
				boolean checkIsDate = dataTypeName.equals("Date");
				boolean checkIsTime = dataTypeName.equals("Time");
				checkDataTypeIsExtraClass = !(checkIsDate||checkIsTime);
			}
			if (checkIsClass || checkDataTypeIsExtraClass) {
				boolean isInterface = Boolean.parseBoolean(attributes.getValue(UmpleImportConstants.XMI_INTERFACE));
				boolean isAbstract = Boolean.parseBoolean(attributes.getValue(UmpleImportConstants.XMI_ABSTRACT));
				String currentPackageName = model.getCurrentPackageName();
				String className = attributes.getValue(UmpleImportConstants.XMI_NAME);
				UmpleImportClass umpleClass = new UmpleImportClass(UmpleImportConstants.ECORE_CLASS, className, currentPackageName, isAbstract, isInterface);
	            currentClass = umpleClass;
	            
				// note that it's possible that a class can have multiple interfaces
				String superType = attributes.getValue(UmpleImportConstants.XMI_SUPERTYPE);
				if (superType != null) {
					String delims = "#//";
					String[] tokens = superType.split(delims);
					for (String string : tokens) {
						if (string != null) {
							umpleClass.addSuperType(string);
						}
					}
				}
				model.addUmpleImportElement(umpleClass);
			}
		} 
		//load class attributes and associations
		else if (currentElement.equals("eStructuralFeatures")) {
			String attrType = attributes.getValue(UmpleImportConstants.XMI_TYPE);
			boolean checkIsAttribute = attrType.equals(UmpleImportConstants.ECORE_ATTRIBUTE);
			boolean checkIsReference = attrType.equals(UmpleImportConstants.ECORE_REFERENCE);
			String attrName = attributes.getValue(UmpleImportConstants.XMI_NAME);
			String classAttrTypeRaw = attributes.getValue(UmpleImportConstants.ECORE_TYPE);
			String classAttrType = classAttrTypeRaw.split("#//")[1];
			String currentClassName = currentClass.getName();
			if(checkIsAttribute)
			{				
				UmpleImportAttribute umpleAttribute = new UmpleImportAttribute(UmpleImportConstants.ECORE_ATTRIBUTE, attrName, currentClassName, classAttrType);
				String attrUpper = attributes.getValue(UmpleImportConstants.XMI_UPPER);
				if(attrUpper!=null)
					umpleAttribute.setUpperBound(Integer.parseInt(attrUpper));
				currentClass.addUmpleImportAttribute(umpleAttribute);
			}
			if(checkIsReference)
			{
				String endClassName = null;
				String endClassNameRaw = attributes.getValue("eOpposite");
				int lowerBound = Integer.parseInt(attributes.getValue("lowerBound"));
				int upperBound = Integer.parseInt(attributes.getValue("upperBound"));
				if(endClassNameRaw!=null)
					endClassName = endClassNameRaw.split(classAttrTypeRaw+"/")[1];
				UmpleImportAssociation umpleAssociation = new UmpleImportAssociation(UmpleImportConstants.ECORE_REFERENCE, attrName, currentClassName, classAttrType, endClassName);
				umpleAssociation.setLowerBound(lowerBound);
				umpleAssociation.setUpperBound(upperBound);
				UmpleImportAssociation oppoEnd = model.checkIfOppositeExist(umpleAssociation);
				if(oppoEnd==null)
					currentClass.addUmpleImportAssociation(umpleAssociation);
			}
		}
	}
	
	public void endElement(String uri, String localName, String qName) throws SAXException {
	    // reset internal values for next round of parsing
	    boolean checkIsClassifiers = currentElement.equals(currentElement.equals("eClassifiers"));
		if (checkIsClassifiers && currentClass != null)
			currentClass = null;
		currentElement = "";
	}

	public void characters(char[] ch, int start, int length) throws SAXException {
		// System.out.println("characters");
	}
		
	public void warning(SAXParseException e) throws SAXException {
		System.out.println("Warning");
	}

	public void error(SAXParseException e) throws SAXException {
		System.out.println("Error");
	}

	public void fatalError(SAXParseException e) throws SAXException {
		System.out.println("Fatal Error");
	}
}