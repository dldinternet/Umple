/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

 */

namespace cruise.umple.compiler;

class ScxmlGenerator
{
  StringBuilder code = new StringBuilder();
  
  cr <<!
!>>
  
  header <<!<!--  EXPERIMENTAL SCXML OUTPUT, NOT READY FOR USE -->!>>
  emit genHeader()(header, cr);
  
  xmlTag <<!<?xml version="1.0" encoding="utf-8"?>!>>
  emit genXMLTag()(xmlTag, cr);
  
  tagAttribute <<! <<=key>>="<<=value>>"!>>
  emit genTagAttribute(String key, String value)(tagAttribute);
  
  scxmlOpeningTag <<!<scxml<<=name>> xmlns="http://www.w3.org/2005/07/scxml" xmlns:xi="http://www.w3.org/2001/XInclude" version="1.0" initial="Main" datamodel="null">!>>
  scxmlClosingTag <<!</scxml>!>>
  emit genScxmlOpeningTag(String name)(scxmlOpeningTag, cr);
  emit genScxmlClosingTag()(scxmlClosingTag);
  
  stateOpeningTag <<!<state<<=id>>>!>>
  stateClosingTag <<!</state>!>>
  emit genStateOpeningTag(String id)(stateOpeningTag, cr);
  emit genStateClosingTag()(stateClosingTag, cr);

  public void generate()
  {
    _genHeader(0, code);
    _genXMLTag(0, code);
    String name = "";
    StateMachine sm = null;
    
    // Verify that there is only one class that contains one state machine
    if (model.getUmpleClasses().size() == 1) {
      if (model.getUmpleClass(0).getStateMachines().size() == 1) {
        sm = model.getUmpleClass(0).getStateMachine(0);
        name = genTagAttribute("name", sm.getName());
      }
    }
    
    _genScxmlOpeningTag(0, code, name);
    if (sm != null) {
      // Generate code for the state machine.
      for (State state : sm.getStates()) {
        generateState(state);
      }
    }
    
    _genScxmlClosingTag(0, code);
    model.setCode(code.toString());
    writeModel();
  }
  
  private void generateState(State state) {
    _genStateOpeningTag(0, code, genTagAttribute("id", state.getName()));
    _genStateClosingTag(0, code);
  }

  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".scxml";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating SCXML code." + e, e);
    }
  }
}
