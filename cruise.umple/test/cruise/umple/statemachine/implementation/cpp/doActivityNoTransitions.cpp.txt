/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.21.0.4666 modeling language!*/

#include "LightFixture.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 LightFixture::LightFixture()
  {
    setBulb(On);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 LightFixture::LightFixture(const LightFixture & lightfixture)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 LightFixture LightFixture::operator=(const LightFixture & lightfixture)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string LightFixture::getBulbFullName()
  {
    string answer = getBulbStringName(bulb);
    return answer;
  }
  
  LightFixture::Bulb LightFixture::getBulb()
  {
    return bulb;
  }

  string LightFixture::getBulbStringName (Bulb bulb)
  {
    switch (bulb)  {
      case 0 : {return "On"; break;}
      case 1 : {return "Off"; break;}
      default: {return ""; break;}
    }
  }

  bool LightFixture::setBulb(Bulb aBulb)
  {
    bulb = aBulb;
    return true;
  }

   void LightFixture::doActivityBulbOn()
  {
     try
     {
       doActivity();
     }
     catch (InterruptedException e)
     {
 
     }
  }

  private static class DoActivityThread extends Thread
  {
    LightFixture controller;
    String doActivityMethodName;
    
    public DoActivityThread(LightFixture aController,String aDoActivityMethodName)
    {
      controller = aController;
      doActivityMethodName = aDoActivityMethodName;
      start();
    }
    
    public void run()
    {
      if ("doActivityBulbOn".equals(doActivityMethodName))
      {
        controller.doActivityBulbOn();
      }
    }
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
LightFixture::~LightFixture()
  {}

