/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/

#include "X.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 X::X()
  {
    setSm(s1);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 X::X(const X & x)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 X X::operator=(const X & x)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string X::getSmFullName()
  {
    string answer = getSmStringName(sm);
    return answer;
  }
  
  X::Sm X::getSm()
  {
    return sm;
  }

  string X::getSmStringName (Sm sm)
  {
    switch (sm)  {
      case 0 : {return "s1"; break;}
      case 1 : {return "s2"; break;}
      default: {return ""; break;}
    }
  }

  bool X::e1()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case s1:
        setSm(s2);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void X::setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case s1:
        doActivity0SmS1Thread = new DoActivityThread(this,"doActivity0SmS1");
        doActivity1SmS1Thread = new DoActivityThread(this,"doActivity1SmS1");
        break;
    }
  }
  

   void X::doActivity0SmS1()
  {
     try
     {
       blah1();
     }
     catch (InterruptedException e)
     {
 
     }
  }

   void X::doActivity1SmS1()
  {
     try
     {
       blah2();
     }
     catch (InterruptedException e)
     {
 
     }
  }

  private static class DoActivityThread extends Thread
  {
    X controller;
    String doActivityMethodName;
    
    public DoActivityThread(X aController,String aDoActivityMethodName)
    {
      controller = aController;
      doActivityMethodName = aDoActivityMethodName;
      start();
    }
    
    public void run()
    {
      if ("doActivity0SmS1".equals(doActivityMethodName))
      {
        controller.doActivity0SmS1();
      }
        else if ("doActivity1SmS1".equals(doActivityMethodName))
      {
        controller.doActivity1SmS1();
      }
    }
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
X::~X()
  {}

