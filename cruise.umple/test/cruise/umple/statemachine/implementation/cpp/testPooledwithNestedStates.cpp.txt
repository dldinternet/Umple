/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/

#include "X.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 X::X()
  {
    if (smS2 == Null) { setSmS2(Null); }
    setSm(s1);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 X::X(const X & x)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 X X::operator=(const X & x)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string X::getSmFullName()
  {
    string answer = getSmStringName(sm);
    if (smS2 != Null) { answer += "." + getSmS2StringName(smS2); }
    return answer;
  }
  
  X::Sm X::getSm()
  {
    return sm;
  }

  string X::getSmStringName (Sm sm)
  {
    switch (sm)  {
      case 0 : {return "s1"; break;}
      case 1 : {return "s2"; break;}
      default: {return ""; break;}
    }
  }

  X::SmS2 X::getSmS2()
  {
    return smS2;
  }

  string X::getSmS2StringName (SmS2 smS2)
  {
    switch (smS2)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "s2a"; break;}
      case 2 : {return "s2b"; break;}
      default: {return ""; break;}
    }
  }

  bool X::e1()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case s1:
        setSm(s2);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::e2()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case s1:
        setSmS2(s2b);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::e3()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case s2:
        exitSm();
        setSm(s1);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::enterS2()
  {
    bool wasEventProcessed = false;

    switch (smS2)
    {
      case Null:
        setSmS2(s2a);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::exitS2()
  {
    bool wasEventProcessed = false;

    switch (smS2)
    {
      case s2a:
        setSmS2(Null);
        wasEventProcessed = true;
        break;
      case s2b:
        setSmS2(Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::e4()
  {
    bool wasEventProcessed = false;

    switch (smS2)
    {
      case s2a:
        setSmS2(s2b);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::e5()
  {
    bool wasEventProcessed = false;

    switch (smS2)
    {
      case s2b:
        setSmS2(s2a);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void X::exitSm()
  {
    switch(sm)
    {
      case s2:
        exitS2();
        break;
    }
  }

  void X::setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case s2:
        if (smS2 == Null) { setSmS2(s2a); }
        break;
    }
  }
  

  void X::setSmS2(SmS2 aSmS2)
  {
    smS2 = aSmS2;
    if (sm != s2 && aSmS2 != Null) { setSm(s2); }
  }
  

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
X::~X()
  {}