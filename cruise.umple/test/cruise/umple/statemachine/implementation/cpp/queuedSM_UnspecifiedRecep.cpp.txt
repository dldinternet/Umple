/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.19.0.3287 modeling language!*/

#include "AutomatedTellerMachine.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 AutomatedTellerMachine::AutomatedTellerMachine()
  {
    if (smActive == Null) { setSmActive(Null); }
    setSm(idle);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 AutomatedTellerMachine::AutomatedTellerMachine(const AutomatedTellerMachine & automatedtellermachine)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 AutomatedTellerMachine AutomatedTellerMachine::operator=(const AutomatedTellerMachine & automatedtellermachine)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string AutomatedTellerMachine::getSmFullName()
  {
    string answer = getSmStringName(sm);
    if (smActive != Null) { answer += "." + getSmActiveStringName(smActive); }
    return answer;
  }
  
  AutomatedTellerMachine::Sm AutomatedTellerMachine::getSm()
  {
    return sm;
  }

  string AutomatedTellerMachine::getSmStringName (Sm sm)
  {
    switch (sm)  {
      case 0 : {return "idle"; break;}
      case 1 : {return "maintenance"; break;}
      case 2 : {return "active"; break;}
      case 3 : {return "error1"; break;}
      case 4 : {return "error2"; break;}
      default: {return ""; break;}
    }
  }

  AutomatedTellerMachine::SmActive AutomatedTellerMachine::getSmActive()
  {
    return smActive;
  }

  string AutomatedTellerMachine::getSmActiveStringName (SmActive smActive)
  {
    switch (smActive)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "validating"; break;}
      case 2 : {return "selecting"; break;}
      case 3 : {return "processing"; break;}
      case 4 : {return "printing"; break;}
      default: {return ""; break;}
    }
  }

  bool AutomatedTellerMachine::cardInserted()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case idle:
        setSm(active);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::maintain()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case idle:
        setSm(maintenance);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::unspecified()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case idle:
        setSm(error1);
        wasEventProcessed = true;
        break;
    }

    switch (smActive)
    {
      case validating:
        setSm(error2);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::isMaintained()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case maintenance:
        setSm(idle);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::cancel()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case active:
        exitSm();
        setSm(idle);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::__autotransition11__()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case error1:
        setSm(idle);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::__autotransition12__()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case error2:
        setSmActive(validating);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::enterActive()
  {
    bool wasEventProcessed = false;

    switch (smActive)
    {
      case Null:
        setSmActive(validating);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::exitActive()
  {
    bool wasEventProcessed = false;

    switch (smActive)
    {
      case validating:
        setSmActive(Null);
        wasEventProcessed = true;
        break;
      case selecting:
        setSmActive(Null);
        wasEventProcessed = true;
        break;
      case processing:
        setSmActive(Null);
        wasEventProcessed = true;
        break;
      case printing:
        setSmActive(Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::validated()
  {
    bool wasEventProcessed = false;

    switch (smActive)
    {
      case validating:
        setSmActive(selecting);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::select()
  {
    bool wasEventProcessed = false;

    switch (smActive)
    {
      case selecting:
        setSmActive(processing);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::selectAnotherTransiction()
  {
    bool wasEventProcessed = false;

    switch (smActive)
    {
      case processing:
        setSmActive(selecting);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::finish()
  {
    bool wasEventProcessed = false;

    switch (smActive)
    {
      case processing:
        setSmActive(printing);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool AutomatedTellerMachine::receiptPrinted()
  {
    bool wasEventProcessed = false;

    switch (smActive)
    {
      case printing:
        setSm(idle);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void AutomatedTellerMachine::exitSm()
  {
    switch(sm)
    {
      case active:
        exitActive();
        ejectCard();
        break;
    }
  }

  void AutomatedTellerMachine::setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case active:
        readCard();
        if (smActive == Null) { setSmActive(validating); }
        break;
    }
  }
  

  void AutomatedTellerMachine::setSmActive(SmActive aSmActive)
  {
    smActive = aSmActive;
    if (sm != active && aSmActive != Null) { setSm(active); }
  }
  

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
AutomatedTellerMachine::~AutomatedTellerMachine()
  {}