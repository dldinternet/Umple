/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

#include "Lamp.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 Lamp::Lamp(const string & aLog)
  {
    log = aLog;
    if (stateMachine1TopLevel == Null) { setStateMachine1TopLevel(Null); }
    setStateMachine1(topLevel);
    if (stateMachine2TopLevel == Null) { setStateMachine2TopLevel(Null); }
    setStateMachine2(topLevel);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 Lamp::Lamp(const Lamp & lamp)
  {
    this->log = lamp.log;
  }
  	
  //------------------------
  // Operator =
  //------------------------

 Lamp Lamp::operator=(const Lamp & lamp)
  {
    this->log = lamp.log;
  }

  //------------------------
  // INTERFACE
  //------------------------

  bool Lamp::setLog(const string & aLog)
  {
    bool wasSet = false;
    log = aLog;
    wasSet = true;
    return wasSet;
  }

  string Lamp::getLog() const
  {
    return log;
  }

  string Lamp::getStateMachine1FullName()
  {
    string answer = getStateMachine1StringName(stateMachine1);
    if (stateMachine1TopLevel != Null) { answer += "." + getStateMachine1TopLevelStringName(stateMachine1TopLevel); }
    return answer;
  }
  
  string Lamp::getStateMachine2FullName()
  {
    string answer = getStateMachine2StringName(stateMachine2);
    if (stateMachine2TopLevel != Null) { answer += "." + getStateMachine2TopLevelStringName(stateMachine2TopLevel); }
    return answer;
  }
  
  Lamp::StateMachine1 Lamp::getStateMachine1()
  {
    return stateMachine1;
  }

  string Lamp::getStateMachine1StringName (StateMachine1 stateMachine1)
  {
    switch (stateMachine1)  {
      case 0 : {return "topLevel"; break;}
      default: {return ""; break;}
    }
  }

  Lamp::StateMachine2 Lamp::getStateMachine2()
  {
    return stateMachine2;
  }

  string Lamp::getStateMachine2StringName (StateMachine2 stateMachine2)
  {
    switch (stateMachine2)  {
      case 0 : {return "topLevel"; break;}
      default: {return ""; break;}
    }
  }

  Lamp::StateMachine1TopLevel Lamp::getStateMachine1TopLevel()
  {
    return stateMachine1TopLevel;
  }

  string Lamp::getStateMachine1TopLevelStringName (StateMachine1TopLevel stateMachine1TopLevel)
  {
    switch (stateMachine1TopLevel)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "thread1"; break;}
      default: {return ""; break;}
    }
  }

  Lamp::StateMachine2TopLevel Lamp::getStateMachine2TopLevel()
  {
    return stateMachine2TopLevel;
  }

  string Lamp::getStateMachine2TopLevelStringName (StateMachine2TopLevel stateMachine2TopLevel)
  {
    switch (stateMachine2TopLevel)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "thread1"; break;}
      default: {return ""; break;}
    }
  }

  bool Lamp::enterTopLevel()
  {
    bool wasEventProcessed = false;

    switch (stateMachine1TopLevel)
    {
      case Null:
        setStateMachine1TopLevel(thread1);
        wasEventProcessed = true;
        break;
    }

    switch (stateMachine2TopLevel)
    {
      case Null:
        setStateMachine2TopLevel(thread1);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool Lamp::exitTopLevel()
  {
    bool wasEventProcessed = false;

    switch (stateMachine1TopLevel)
    {
      case thread1:
        setStateMachine1TopLevel(Null);
        wasEventProcessed = true;
        break;
    }

    switch (stateMachine2TopLevel)
    {
      case thread1:
        setStateMachine2TopLevel(Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void Lamp::exitStateMachine1()
  {
    switch(stateMachine1)
    {
      case topLevel:
        exitTopLevel();
        break;
    }
  }

  void Lamp::setStateMachine1(StateMachine1 aStateMachine1)
  {
    stateMachine1 = aStateMachine1;

    // entry actions and do activities
    switch(stateMachine1)
    {
      case topLevel:
        if (stateMachine1TopLevel == Null) { setStateMachine1TopLevel(thread1); }
        break;
    }
  }
  

  void Lamp::exitStateMachine2()
  {
    switch(stateMachine2)
    {
      case topLevel:
        exitTopLevel();
        break;
    }
  }

  void Lamp::setStateMachine2(StateMachine2 aStateMachine2)
  {
    stateMachine2 = aStateMachine2;

    // entry actions and do activities
    switch(stateMachine2)
    {
      case topLevel:
        if (stateMachine2TopLevel == Null) { setStateMachine2TopLevel(thread1); }
        break;
    }
  }
  

  void Lamp::setStateMachine1TopLevel(StateMachine1TopLevel aStateMachine1TopLevel)
  {
    stateMachine1TopLevel = aStateMachine1TopLevel;
    if (stateMachine1 != topLevel && aStateMachine1TopLevel != Null) { setStateMachine1(topLevel); }

    // entry actions and do activities
    switch(stateMachine1TopLevel)
    {
      case thread1:
        doActivityTopLevelThread1Thread = new DoActivityThread(this,"doActivityTopLevelThread1");
        break;
    }
  }
  

  void Lamp::setStateMachine2TopLevel(StateMachine2TopLevel aStateMachine2TopLevel)
  {
    stateMachine2TopLevel = aStateMachine2TopLevel;
    if (stateMachine2 != topLevel && aStateMachine2TopLevel != Null) { setStateMachine2(topLevel); }

    // entry actions and do activities
    switch(stateMachine2TopLevel)
    {
      case thread1:
        doActivityTopLevelThread1Thread = new DoActivityThread(this,"doActivityTopLevelThread1");
        break;
    }
  }
  

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
Lamp::~Lamp()
  {}

