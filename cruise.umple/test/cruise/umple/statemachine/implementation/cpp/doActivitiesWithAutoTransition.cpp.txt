/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/

#include "LightFixture.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 LightFixture::LightFixture()
  {
    setBulb(On);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 LightFixture::LightFixture(const LightFixture & lightfixture)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 LightFixture LightFixture::operator=(const LightFixture & lightfixture)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string LightFixture::getBulbFullName()
  {
    string answer = getBulbStringName(bulb);
    return answer;
  }
  
  LightFixture::Bulb LightFixture::getBulb()
  {
    return bulb;
  }

  string LightFixture::getBulbStringName (Bulb bulb)
  {
    switch (bulb)  {
      case 0 : {return "On"; break;}
      case 1 : {return "Off"; break;}
      default: {return ""; break;}
    }
  }

  bool LightFixture::__autotransition1__()
  {
    bool wasEventProcessed = false;

    switch (bulb)
    {
      case On:
        setBulb(Off);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::__autotransition2__()
  {
    bool wasEventProcessed = false;

    switch (bulb)
    {
      case Off:
        setBulb(On);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void LightFixture::setBulb(Bulb aBulb)
  {
    bulb = aBulb;

    // entry actions and do activities
    switch(bulb)
    {
      case On:
        doActivity0BulbOnThread = new DoActivityThread(this,"doActivity0BulbOn");
        doActivity1BulbOnThread = new DoActivityThread(this,"doActivity1BulbOn");
        break;
      case Off:
        doActivity0BulbOffThread = new DoActivityThread(this,"doActivity0BulbOff");
        doActivity1BulbOffThread = new DoActivityThread(this,"doActivity1BulbOff");
        break;
    }
  }
  

   void LightFixture::doActivity0BulbOn()
  {
     try
     {
       onActivity1();
     }
     catch (InterruptedException e)
     {
 
     }
  }

   void LightFixture::doActivity1BulbOn()
  {
     try
     {
       onActivity2();
     }
     catch (InterruptedException e)
     {
 
     }
  }

   void LightFixture::doActivity0BulbOff()
  {
     try
     {
       offActivity1();
     }
     catch (InterruptedException e)
     {
 
     }
  }

   void LightFixture::doActivity1BulbOff()
  {
     try
     {
       offActivity2();
     }
     catch (InterruptedException e)
     {
 
     }
  }

  private static class DoActivityThread extends Thread
  {
    LightFixture controller;
    String doActivityMethodName;
    
    public DoActivityThread(LightFixture aController,String aDoActivityMethodName)
    {
      controller = aController;
      doActivityMethodName = aDoActivityMethodName;
      start();
    }
    
    public void run()
    {
      if ("doActivity0BulbOn".equals(doActivityMethodName))
      {
        controller.doActivity0BulbOn();
      }
        else if ("doActivity1BulbOn".equals(doActivityMethodName))
      {
        controller.doActivity1BulbOn();
      }
        else if ("doActivity0BulbOff".equals(doActivityMethodName))
      {
        controller.doActivity0BulbOff();
      }
        else if ("doActivity1BulbOff".equals(doActivityMethodName))
      {
        controller.doActivity1BulbOff();
      }
    }
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
LightFixture::~LightFixture()
  {}

