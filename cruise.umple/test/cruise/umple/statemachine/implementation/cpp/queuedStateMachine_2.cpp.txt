/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.17.0.2716 modeling language!*/

#include "GarageDoor.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 GarageDoor::GarageDoor()
  {
    setStatus(Open);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 GarageDoor::GarageDoor(const GarageDoor & garagedoor)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 GarageDoor GarageDoor::operator=(const GarageDoor & garagedoor)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string GarageDoor::getStatusFullName()
  {
    string answer = getStatusStringName(status);
    return answer;
  }
  
  GarageDoor::Status GarageDoor::getStatus()
  {
    return status;
  }

  string GarageDoor::getStatusStringName (Status status)
  {
    switch (status)  {
      case 0 : {return "Open"; break;}
      case 1 : {return "Closing"; break;}
      case 2 : {return "Closed"; break;}
      case 3 : {return "Opening"; break;}
      case 4 : {return "HalfOpen"; break;}
      default: {return ""; break;}
    }
  }

  bool GarageDoor::buttonOrObstacle()
  {
    bool wasEventProcessed = false;

    switch (status)
    {
      case Open:
        setStatus(Closing);
        wasEventProcessed = true;
        break;
      case Closing:
        setStatus(Opening);
        wasEventProcessed = true;
        break;
      case Closed:
        setStatus(Opening);
        wasEventProcessed = true;
        break;
      case Opening:
        setStatus(HalfOpen);
        wasEventProcessed = true;
        break;
      case HalfOpen:
        setStatus(Opening);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool GarageDoor::reachBottom()
  {
    bool wasEventProcessed = false;

    switch (status)
    {
      case Closing:
        setStatus(Closed);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool GarageDoor::reachTop()
  {
    bool wasEventProcessed = false;

    switch (status)
    {
      case Opening:
        setStatus(Open);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void GarageDoor::setStatus(Status aStatus)
  {
    status = aStatus;
  }
  

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
GarageDoor::~GarageDoor()
  {}

