/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/

#include "X.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 X::X()
  {
    setSm(q);
    if (sm1S1 == Null) { setSm1S1(Null); }
    setSm1(s1);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 X::X(const X & x)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 X X::operator=(const X & x)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string X::getSmFullName()
  {
    string answer = getSmStringName(sm);
    return answer;
  }
  
  string X::getSm1FullName()
  {
    string answer = getSm1StringName(sm1);
    if (sm1S1 != Null) { answer += "." + getSm1S1StringName(sm1S1); }
    return answer;
  }
  
  X::Sm X::getSm()
  {
    return sm;
  }

  string X::getSmStringName (Sm sm)
  {
    switch (sm)  {
      case 0 : {return "q"; break;}
      case 1 : {return "s"; break;}
      default: {return ""; break;}
    }
  }

  X::Sm1 X::getSm1()
  {
    return sm1;
  }

  string X::getSm1StringName (Sm1 sm1)
  {
    switch (sm1)  {
      case 0 : {return "s1"; break;}
      case 1 : {return "s2"; break;}
      default: {return ""; break;}
    }
  }

  X::Sm1S1 X::getSm1S1()
  {
    return sm1S1;
  }

  string X::getSm1S1StringName (Sm1S1 sm1S1)
  {
    switch (sm1S1)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "s1a"; break;}
      case 2 : {return "s1b"; break;}
      default: {return ""; break;}
    }
  }

  bool X::e1()
  {
    bool wasEventProcessed = false;

    switch (sm1)
    {
      case s1:
        exitSm1();
        setSm1S1(s1a);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::e2()
  {
    bool wasEventProcessed = false;

    switch (sm1)
    {
      case s2:
        setSm1(s1);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::enterS1()
  {
    bool wasEventProcessed = false;

    switch (sm1S1)
    {
      case Null:
        setSm1S1(s1a);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::exitS1()
  {
    bool wasEventProcessed = false;

    switch (sm1S1)
    {
      case s1a:
        setSm1S1(Null);
        wasEventProcessed = true;
        break;
      case s1b:
        setSm1S1(Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::e5()
  {
    bool wasEventProcessed = false;

    switch (sm1S1)
    {
      case s1a:
        setSm1S1(s1b);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::e6()
  {
    bool wasEventProcessed = false;

    switch (sm1S1)
    {
      case s1b:
        setSm1(s2);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool X::setSm(Sm aSm)
  {
    sm = aSm;
    return true;
  }

  void X::exitSm1()
  {
    switch(sm1)
    {
      case s1:
        exitS1();
        break;
    }
  }

  void X::setSm1(Sm1 aSm1)
  {
    sm1 = aSm1;

    // entry actions and do activities
    switch(sm1)
    {
      case s1:
        if (sm1S1 == Null) { setSm1S1(s1a); }
        break;
    }
  }
  

  void X::setSm1S1(Sm1S1 aSm1S1)
  {
    sm1S1 = aSm1S1;
    if (sm1 != s1 && aSm1S1 != Null) { setSm1(s1); }
  }
  

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
X::~X()
  {}