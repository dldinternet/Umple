/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

#include "LightFixture.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 LightFixture::LightFixture()
  {
    if (bulbOn == Null) { setBulbOn(Null); }
    setBulb(Off);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 LightFixture::LightFixture(const LightFixture & lightfixture)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 LightFixture LightFixture::operator=(const LightFixture & lightfixture)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string LightFixture::getBulbFullName()
  {
    string answer = getBulbStringName(bulb);
    if (bulbOn != Null) { answer += "." + getBulbOnStringName(bulbOn); }
    return answer;
  }
  
  LightFixture::Bulb LightFixture::getBulb()
  {
    return bulb;
  }

  string LightFixture::getBulbStringName (Bulb bulb)
  {
    switch (bulb)  {
      case 0 : {return "Off"; break;}
      case 1 : {return "On"; break;}
      default: {return ""; break;}
    }
  }

  LightFixture::BulbOn LightFixture::getBulbOn()
  {
    return bulbOn;
  }

  string LightFixture::getBulbOnStringName (BulbOn bulbOn)
  {
    switch (bulbOn)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "Normal"; break;}
      case 2 : {return "Dimmed"; break;}
      default: {return ""; break;}
    }
  }

  bool LightFixture::flip()
  {
    bool wasEventProcessed = false;

    switch (bulb)
    {
      case Off:
        setBulb(On);
        wasEventProcessed = true;
        break;
      case On:
        exitBulb();
        setBulb(Off);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::enterOn()
  {
    bool wasEventProcessed = false;

    switch (bulbOn)
    {
      case Null:
        setBulbOn(Normal);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::exitOn()
  {
    bool wasEventProcessed = false;

    switch (bulbOn)
    {
      case Normal:
        setBulbOn(Null);
        wasEventProcessed = true;
        break;
      case Dimmed:
        setBulbOn(Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool LightFixture::touch()
  {
    bool wasEventProcessed = false;

    switch (bulbOn)
    {
      case Normal:
        setBulbOn(Dimmed);
        wasEventProcessed = true;
        break;
      case Dimmed:
        setBulb(Off);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void LightFixture::exitBulb()
  {
    switch(bulb)
    {
      case On:
        exitOn();
        print("Show Me Last (Exit)");
        break;
    }
  }

  void LightFixture::setBulb(Bulb aBulb)
  {
    bulb = aBulb;

    // entry actions and do activities
    switch(bulb)
    {
      case On:
        if (bulbOn == Null) { setBulbOn(Normal); }
        break;
    }
  }
  

  void LightFixture::setBulbOn(BulbOn aBulbOn)
  {
    bulbOn = aBulbOn;
    if (bulb != On && aBulbOn != Null) { setBulb(On); }
  }
  

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
LightFixture::~LightFixture()
  {}
