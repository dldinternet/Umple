/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.18.0.3036 modeling language!*/

#include "QueuedSMwithConcurrentStates_2.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 QueuedSMwithConcurrentStates_2::QueuedSMwithConcurrentStates_2()
  {
    if (smSubState1 == Null) { setSmSubState1(Null); }
    if (smSubState2 == Null) { setSmSubState2(Null); }
    setSm(state1);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 QueuedSMwithConcurrentStates_2::QueuedSMwithConcurrentStates_2(const QueuedSMwithConcurrentStates_2 & queuedsmwithconcurrentstates_2)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 QueuedSMwithConcurrentStates_2 QueuedSMwithConcurrentStates_2::operator=(const QueuedSMwithConcurrentStates_2 & queuedsmwithconcurrentstates_2)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string QueuedSMwithConcurrentStates_2::getSmFullName()
  {
    string answer = getSmStringName(sm);
    if (smSubState1 != Null) { answer += "." + getSmSubState1StringName(smSubState1); }
    if (smSubState2 != Null) { answer += "." + getSmSubState2StringName(smSubState2); }
    return answer;
  }
  
  QueuedSMwithConcurrentStates_2::Sm QueuedSMwithConcurrentStates_2::getSm()
  {
    return sm;
  }

  string QueuedSMwithConcurrentStates_2::getSmStringName (Sm sm)
  {
    switch (sm)  {
      case 0 : {return "state1"; break;}
      case 1 : {return "state2"; break;}
      case 2 : {return "state3"; break;}
      default: {return ""; break;}
    }
  }

  QueuedSMwithConcurrentStates_2::SmSubState1 QueuedSMwithConcurrentStates_2::getSmSubState1()
  {
    return smSubState1;
  }

  string QueuedSMwithConcurrentStates_2::getSmSubState1StringName (SmSubState1 smSubState1)
  {
    switch (smSubState1)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "subState1"; break;}
      default: {return ""; break;}
    }
  }

  QueuedSMwithConcurrentStates_2::SmSubState2 QueuedSMwithConcurrentStates_2::getSmSubState2()
  {
    return smSubState2;
  }

  string QueuedSMwithConcurrentStates_2::getSmSubState2StringName (SmSubState2 smSubState2)
  {
    switch (smSubState2)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "subState2"; break;}
      default: {return ""; break;}
    }
  }

  bool QueuedSMwithConcurrentStates_2::transit()
  {
    bool wasEventProcessed = false;

    switch (sm)
    {
      case state1:
        exitSm();
        setSm(state2);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool QueuedSMwithConcurrentStates_2::enterState1()
  {
    bool wasEventProcessed = false;

    switch (smSubState1)
    {
      case Null:
        setSmSubState1(subState1);
        wasEventProcessed = true;
        break;
    }

    switch (smSubState2)
    {
      case Null:
        setSmSubState2(subState2);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool QueuedSMwithConcurrentStates_2::exitState1()
  {
    bool wasEventProcessed = false;

    switch (smSubState1)
    {
      case subState1:
        setSmSubState1(Null);
        wasEventProcessed = true;
        break;
    }

    switch (smSubState2)
    {
      case subState2:
        setSmSubState2(Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void QueuedSMwithConcurrentStates_2::exitSm()
  {
    switch(sm)
    {
      case state1:
        exitState1();
        break;
    }
  }

  void QueuedSMwithConcurrentStates_2::setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case state1:
        if (smSubState1 == Null) { setSmSubState1(subState1); }
        if (smSubState2 == Null) { setSmSubState2(subState2); }
        break;
      case state2:
        doActivitySmState2Thread = new DoActivityThread(this,"doActivitySmState2");
        break;
      case state3:
        doActivitySmState3Thread = new DoActivityThread(this,"doActivitySmState3");
        break;
    }
  }
  

  void QueuedSMwithConcurrentStates_2::setSmSubState1(SmSubState1 aSmSubState1)
  {
    smSubState1 = aSmSubState1;
    if (sm != state1 && aSmSubState1 != Null) { setSm(state1); }
  }
  

  void QueuedSMwithConcurrentStates_2::setSmSubState2(SmSubState2 aSmSubState2)
  {
    smSubState2 = aSmSubState2;
    if (sm != state1 && aSmSubState2 != Null) { setSm(state1); }
  }
  

   void QueuedSMwithConcurrentStates_2::doActivitySmState2()
  {
     try
     {
       doTransition1();
     }
     catch (InterruptedException e)
     {
 
     }
  }

   void QueuedSMwithConcurrentStates_2::doActivitySmState3()
  {
     try
     {
       doTransition2();
     }
     catch (InterruptedException e)
     {
 
     }
  }

  private static class DoActivityThread extends Thread
  {
    QueuedSMwithConcurrentStates_2 controller;
    String doActivityMethodName;
    
    public DoActivityThread(QueuedSMwithConcurrentStates_2 aController,String aDoActivityMethodName)
    {
      controller = aController;
      doActivityMethodName = aDoActivityMethodName;
      start();
    }
    
    public void run()
    {
      if ("doActivitySmState2".equals(doActivityMethodName))
      {
        controller.doActivitySmState2();
      }
        else if ("doActivitySmState3".equals(doActivityMethodName))
      {
        controller.doActivitySmState3();
      }
    }
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
QueuedSMwithConcurrentStates_2::~QueuedSMwithConcurrentStates_2()
  {}