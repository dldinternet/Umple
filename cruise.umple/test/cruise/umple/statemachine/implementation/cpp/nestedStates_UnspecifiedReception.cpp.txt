/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE ${last.version} modeling language!*/

#include "NestedStatesWthSameEventNames.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 NestedStatesWthSameEventNames::NestedStatesWthSameEventNames()
  {
    if (smNestedState1 == Null) { setSmNestedState1(Null); }
    if (smNestedState2 == Null) { setSmNestedState2(Null); }
    setSm(nestedState1);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 NestedStatesWthSameEventNames::NestedStatesWthSameEventNames(const NestedStatesWthSameEventNames & nestedstateswthsameeventnames)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 NestedStatesWthSameEventNames NestedStatesWthSameEventNames::operator=(const NestedStatesWthSameEventNames & nestedstateswthsameeventnames)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string NestedStatesWthSameEventNames::getSmFullName()
  {
    string answer = getSmStringName(sm);
    if (smNestedState1 != Null) { answer += "." + getSmNestedState1StringName(smNestedState1); }
    if (smNestedState2 != Null) { answer += "." + getSmNestedState2StringName(smNestedState2); }
    return answer;
  }
  
  NestedStatesWthSameEventNames::Sm NestedStatesWthSameEventNames::getSm()
  {
    return sm;
  }

  string NestedStatesWthSameEventNames::getSmStringName (Sm sm)
  {
    switch (sm)  {
      case 0 : {return "nestedState1"; break;}
      case 1 : {return "nestedState2"; break;}
      case 2 : {return "state5"; break;}
      default: {return ""; break;}
    }
  }

  NestedStatesWthSameEventNames::SmNestedState1 NestedStatesWthSameEventNames::getSmNestedState1()
  {
    return smNestedState1;
  }

  string NestedStatesWthSameEventNames::getSmNestedState1StringName (SmNestedState1 smNestedState1)
  {
    switch (smNestedState1)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "state1"; break;}
      case 2 : {return "state2"; break;}
      default: {return ""; break;}
    }
  }

  NestedStatesWthSameEventNames::SmNestedState2 NestedStatesWthSameEventNames::getSmNestedState2()
  {
    return smNestedState2;
  }

  string NestedStatesWthSameEventNames::getSmNestedState2StringName (SmNestedState2 smNestedState2)
  {
    switch (smNestedState2)  {
      case 0 : {return "Null"; break;}
      case 1 : {return "state3"; break;}
      case 2 : {return "state4"; break;}
      default: {return ""; break;}
    }
  }

  bool NestedStatesWthSameEventNames::enterNestedState1()
  {
    bool wasEventProcessed = false;

    switch (smNestedState1)
    {
      case Null:
        setSmNestedState1(state1);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool NestedStatesWthSameEventNames::exitNestedState1()
  {
    bool wasEventProcessed = false;

    switch (smNestedState1)
    {
      case state1:
        setSmNestedState1(Null);
        wasEventProcessed = true;
        break;
      case state2:
        setSmNestedState1(Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool NestedStatesWthSameEventNames::e1()
  {
    bool wasEventProcessed = false;

    switch (smNestedState1)
    {
      case state1:
        setSmNestedState1(state2);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool NestedStatesWthSameEventNames::unspecified()
  {
    bool wasEventProcessed = false;

    switch (smNestedState1)
    {
      case state1:
        setSmNestedState1(state1);
        wasEventProcessed = true;
        break;
    }

    switch (smNestedState2)
    {
      case state4:
        setSm(nestedState2);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool NestedStatesWthSameEventNames::e2()
  {
    bool wasEventProcessed = false;

    switch (smNestedState1)
    {
      case state2:
        setSm(state5);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool NestedStatesWthSameEventNames::enterNestedState2()
  {
    bool wasEventProcessed = false;

    switch (smNestedState2)
    {
      case Null:
        setSmNestedState2(state3);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool NestedStatesWthSameEventNames::exitNestedState2()
  {
    bool wasEventProcessed = false;

    switch (smNestedState2)
    {
      case state3:
        setSmNestedState2(Null);
        wasEventProcessed = true;
        break;
      case state4:
        setSmNestedState2(Null);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  bool NestedStatesWthSameEventNames::e4()
  {
    bool wasEventProcessed = false;

    switch (smNestedState2)
    {
      case state4:
        setSm(state5);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  void NestedStatesWthSameEventNames::exitSm()
  {
    switch(sm)
    {
      case nestedState1:
        exitNestedState1();
        break;
      case nestedState2:
        exitNestedState2();
        break;
    }
  }

  void NestedStatesWthSameEventNames::setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case nestedState1:
        if (smNestedState1 == Null) { setSmNestedState1(state1); }
        break;
      case nestedState2:
        if (smNestedState2 == Null) { setSmNestedState2(state3); }
        break;
    }
  }
  

  void NestedStatesWthSameEventNames::setSmNestedState1(SmNestedState1 aSmNestedState1)
  {
    smNestedState1 = aSmNestedState1;
    if (sm != nestedState1 && aSmNestedState1 != Null) { setSm(nestedState1); }
  }
  

  void NestedStatesWthSameEventNames::setSmNestedState2(SmNestedState2 aSmNestedState2)
  {
    smNestedState2 = aSmNestedState2;
    if (sm != nestedState2 && aSmNestedState2 != Null) { setSm(nestedState2); }
  }
  

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
NestedStatesWthSameEventNames::~NestedStatesWthSameEventNames()
  {}