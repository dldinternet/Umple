/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

#include "LightFixture.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 LightFixture::LightFixture()
  {
    setBulb(On);
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 LightFixture::LightFixture(const LightFixture & lightfixture)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 LightFixture LightFixture::operator=(const LightFixture & lightfixture)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  string LightFixture::getBulbFullName()
  {
    string answer = getBulbStringName(bulb);
    return answer;
  }
  
  LightFixture::Bulb LightFixture::getBulb()
  {
    return bulb;
  }

  string LightFixture::getBulbStringName (Bulb bulb)
  {
    switch (bulb)  {
      case 0 : {return "On"; break;}
      case 1 : {return "Off"; break;}
      default: {return ""; break;}
    }
  }

  bool LightFixture::push()
  {
    bool wasEventProcessed = false;

    switch (bulb)
    {
      case On:
        if (isTurnedOn)
        {
          exitBulb();
          doTransition();
          setBulb(Off);
          wasEventProcessed = true;
          break;
        }
        break;
    }

    return wasEventProcessed;
  }

  void LightFixture::exitBulb()
  {
    switch(bulb)
    {
      case On:
        doExit();
        break;
    }
  }

  void LightFixture::setBulb(Bulb aBulb)
  {
    bulb = aBulb;

    // entry actions and do activities
    switch(bulb)
    {
      case On:
        doEntry();
        break;
    }
  }
  

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
LightFixture::~LightFixture()
  {}
