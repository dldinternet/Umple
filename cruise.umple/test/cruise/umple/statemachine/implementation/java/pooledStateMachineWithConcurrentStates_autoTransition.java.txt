/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.19.0.3537 modeling language!*/

package example;
import java.util.*;
import java.lang.Thread;

public class CourseAttempt implements Runnable
{
  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
  public @interface umplesourcefile{int[] line();String[] file();int[] javaline();int[] length();}

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //CourseAttempt State Machines
  enum CourseAttemptSM { studying, failed, passed }
  enum CourseAttemptSMLab1 { Null, lab1, lab2 }
  enum CourseAttemptSMTermProject { Null, termProject }
  enum CourseAttemptSMFinalExam { Null, finalExam }
  private CourseAttemptSM courseAttemptSM;
  private CourseAttemptSMLab1 courseAttemptSMLab1;
  private CourseAttemptSMTermProject courseAttemptSMTermProject;
  private CourseAttemptSMFinalExam courseAttemptSMFinalExam;
  
  //enumeration type of messages accepted by CourseAttempt
  enum MessageType { lab1Done_M, fail_M }
  
  MessagePool pool;
  Thread removal;

  // A list of message types for each state of the CourseAttempt
  List<MessageType> state1MsgTypeList= Arrays.asList();
  List<MessageType> state2MsgTypeList= Arrays.asList();
  List<MessageType> state3MsgTypeList= Arrays.asList();

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public CourseAttempt()
  {
    setCourseAttemptSMLab1(CourseAttemptSMLab1.Null);
    setCourseAttemptSMTermProject(CourseAttemptSMTermProject.Null);
    setCourseAttemptSMFinalExam(CourseAttemptSMFinalExam.Null);
    setCourseAttemptSM(CourseAttemptSM.studying);
    pool = new MessagePool();
    removal=new Thread(this);
    //start the thread of CourseAttempt
    removal.start();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getCourseAttemptSMFullName()
  {
    String answer = courseAttemptSM.toString();
    if (courseAttemptSMLab1 != CourseAttemptSMLab1.Null) { answer += "." + courseAttemptSMLab1.toString(); }
    if (courseAttemptSMTermProject != CourseAttemptSMTermProject.Null) { answer += "." + courseAttemptSMTermProject.toString(); }
    if (courseAttemptSMFinalExam != CourseAttemptSMFinalExam.Null) { answer += "." + courseAttemptSMFinalExam.toString(); }
    return answer;
  }

  public CourseAttemptSM getCourseAttemptSM()
  {
    return courseAttemptSM;
  }

  public CourseAttemptSMLab1 getCourseAttemptSMLab1()
  {
    return courseAttemptSMLab1;
  }

  public CourseAttemptSMTermProject getCourseAttemptSMTermProject()
  {
    return courseAttemptSMTermProject;
  }

  public CourseAttemptSMFinalExam getCourseAttemptSMFinalExam()
  {
    return courseAttemptSMFinalExam;
  }

  private boolean __autotransition1__()
  {
    boolean wasEventProcessed = false;
    
    CourseAttemptSM aCourseAttemptSM = courseAttemptSM;
    switch (aCourseAttemptSM)
    {
      case studying:
        exitCourseAttemptSM();
        setCourseAttemptSM(CourseAttemptSM.passed);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private boolean enterStudying()
  {
    boolean wasEventProcessed = false;
    
    CourseAttemptSMLab1 aCourseAttemptSMLab1 = courseAttemptSMLab1;
    CourseAttemptSMTermProject aCourseAttemptSMTermProject = courseAttemptSMTermProject;
    CourseAttemptSMFinalExam aCourseAttemptSMFinalExam = courseAttemptSMFinalExam;
    switch (aCourseAttemptSMLab1)
    {
      case Null:
        setCourseAttemptSMLab1(CourseAttemptSMLab1.lab1);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    switch (aCourseAttemptSMTermProject)
    {
      case Null:
        setCourseAttemptSMTermProject(CourseAttemptSMTermProject.termProject);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    switch (aCourseAttemptSMFinalExam)
    {
      case Null:
        setCourseAttemptSMFinalExam(CourseAttemptSMFinalExam.finalExam);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private boolean exitStudying()
  {
    boolean wasEventProcessed = false;
    
    CourseAttemptSMLab1 aCourseAttemptSMLab1 = courseAttemptSMLab1;
    CourseAttemptSMTermProject aCourseAttemptSMTermProject = courseAttemptSMTermProject;
    CourseAttemptSMFinalExam aCourseAttemptSMFinalExam = courseAttemptSMFinalExam;
    switch (aCourseAttemptSMLab1)
    {
      case lab1:
        setCourseAttemptSMLab1(CourseAttemptSMLab1.Null);
        wasEventProcessed = true;
        break;
      case lab2:
        setCourseAttemptSMLab1(CourseAttemptSMLab1.Null);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    switch (aCourseAttemptSMTermProject)
    {
      case termProject:
        setCourseAttemptSMTermProject(CourseAttemptSMTermProject.Null);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    switch (aCourseAttemptSMFinalExam)
    {
      case finalExam:
        setCourseAttemptSMFinalExam(CourseAttemptSMFinalExam.Null);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _lab1Done()
  {
    boolean wasEventProcessed = false;
    
    CourseAttemptSMLab1 aCourseAttemptSMLab1 = courseAttemptSMLab1;
    switch (aCourseAttemptSMLab1)
    {
      case lab1:
        setCourseAttemptSMLab1(CourseAttemptSMLab1.lab2);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _fail()
  {
    boolean wasEventProcessed = false;
    
    CourseAttemptSMFinalExam aCourseAttemptSMFinalExam = courseAttemptSMFinalExam;
    switch (aCourseAttemptSMFinalExam)
    {
      case finalExam:
        exitCourseAttemptSMFinalExam();
        setCourseAttemptSM(CourseAttemptSM.failed);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void exitCourseAttemptSM()
  {
    switch(courseAttemptSM)
    {
      case studying:
        exitStudying();
        break;
    }
  }

  private void setCourseAttemptSM(CourseAttemptSM aCourseAttemptSM)
  {
    courseAttemptSM = aCourseAttemptSM;

    // entry actions and do activities
    switch(courseAttemptSM)
    {
      case studying:
        if (courseAttemptSMLab1 == CourseAttemptSMLab1.Null) { setCourseAttemptSMLab1(CourseAttemptSMLab1.lab1); }
        if (courseAttemptSMTermProject == CourseAttemptSMTermProject.Null) { setCourseAttemptSMTermProject(CourseAttemptSMTermProject.termProject); }
        if (courseAttemptSMFinalExam == CourseAttemptSMFinalExam.Null) { setCourseAttemptSMFinalExam(CourseAttemptSMFinalExam.finalExam); }
        __autotransition1__();
        break;
    }
  }

  @umplesourcefile(line={12}, file={"pooledStateMachineWithConcurrentStates_autoTransition.ump"}, javaline={261}, length={1})
  private void exitCourseAttemptSMLab1()
  {
    switch(courseAttemptSMLab1)
    {
      case lab2:
        lab2Done();
        break;
    }
  }

  private void setCourseAttemptSMLab1(CourseAttemptSMLab1 aCourseAttemptSMLab1)
  {
    courseAttemptSMLab1 = aCourseAttemptSMLab1;
    if (courseAttemptSM != CourseAttemptSM.studying && aCourseAttemptSMLab1 != CourseAttemptSMLab1.Null) { setCourseAttemptSM(CourseAttemptSM.studying); }
  }

  @umplesourcefile(line={18}, file={"pooledStateMachineWithConcurrentStates_autoTransition.ump"}, javaline={279}, length={1})
  private void exitCourseAttemptSMTermProject()
  {
    switch(courseAttemptSMTermProject)
    {
      case termProject:
        projectDone();
        break;
    }
  }

  private void setCourseAttemptSMTermProject(CourseAttemptSMTermProject aCourseAttemptSMTermProject)
  {
    courseAttemptSMTermProject = aCourseAttemptSMTermProject;
    if (courseAttemptSM != CourseAttemptSM.studying && aCourseAttemptSMTermProject != CourseAttemptSMTermProject.Null) { setCourseAttemptSM(CourseAttemptSM.studying); }
  }

  @umplesourcefile(line={25}, file={"pooledStateMachineWithConcurrentStates_autoTransition.ump"}, javaline={297}, length={1})
  private void exitCourseAttemptSMFinalExam()
  {
    switch(courseAttemptSMFinalExam)
    {
      case finalExam:
        pass();
        break;
    }
  }

  private void setCourseAttemptSMFinalExam(CourseAttemptSMFinalExam aCourseAttemptSMFinalExam)
  {
    courseAttemptSMFinalExam = aCourseAttemptSMFinalExam;
    if (courseAttemptSM != CourseAttemptSM.studying && aCourseAttemptSMFinalExam != CourseAttemptSMFinalExam.Null) { setCourseAttemptSM(CourseAttemptSM.studying); }
  }

  public void delete()
  {}

  // A method to return a list of message types for each state of the CourseAttemptstate machine
  public List<MessageType> getStateMsgTypeList(CourseAttemptSM state){
    List<MessageType> msg = null;
    switch (state)
    {
      case studying:
        msg=state1MsgTypeList;
        break;
      case failed:
        msg=state2MsgTypeList;
        break;
      case passed:
        msg=state3MsgTypeList;
        break;
      default:
    }
    return msg;
  }

  private class Message
  {
    MessageType type;
    
    //Message parameters
    Vector<Object> param;
    
    public Message(MessageType t, Vector<Object> p)
    {
      type = t; 
      param = p;
    }
  }
  
  protected class MessagePool {
    Queue<Message> messages = new LinkedList<Message>();
    
    public synchronized void put(Message m)
    {
      messages.add(m); 
      notify();
    }

    public synchronized Message getNext()
    {
      List<MessageType> processableMessages;
      // return a list of message types for the current state
      processableMessages = getStateMsgTypeList(getCourseAttemptSM());
      Message message=null;

      try {
        message=getNextProcessableMessage(processableMessages);
        while (message==null)
        {
          wait();
          message=getNextProcessableMessage(processableMessages);
        }
      } catch (InterruptedException e) { e.printStackTrace(); }

      // return the message
      return (message);
    }

    public Message getNextProcessableMessage(List<MessageType> processableMessages)
    {
      // Iterate through messages and remove the first message that matches one of the processableMessages list
      // otherwise return null
      for (Message msg: messages){
        if(processableMessages.contains(msg.type)){
          //The element to be removed
          messages.remove(msg);
          return (msg);
        }
      }
      return null;
    }
  }

  //------------------------------
  //messages accepted 
  //------------------------------

  public void lab1Done ()
  {
    pool.put(new Message(MessageType.lab1Done_M, null));
  }

  public void fail ()
  {
    pool.put(new Message(MessageType.fail_M, null));
  }

  
  @Override
  public void run ()
  {
    boolean status=false;
    while (true) 
    {
      Message m = pool.getNext();
      
      switch (m.type)
      {
        case lab1Done_M:
          status = _lab1Done();
          break;
        case fail_M:
          status = _fail();
          break; 
        default:
      }
      if(!status)
      {
        // Error message is written or  exception is raised
      }
    }
  }
}