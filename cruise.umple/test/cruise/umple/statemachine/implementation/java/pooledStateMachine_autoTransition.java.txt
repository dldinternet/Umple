/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.19.0.3537 modeling language!*/

package example;
import java.util.*;
import java.lang.Thread;

public class Light implements Runnable
{
  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
  public @interface umplesourcefile{int[] line();String[] file();int[] javaline();int[] length();}

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Light State Machines
  enum Bulb { Off, On }
  private Bulb bulb;
  
  //enumeration type of messages accepted by Light
  enum MessageType {  }
  
  MessagePool pool;
  Thread removal;

  // A list of message types for each state of the Light
  List<MessageType> state1MsgTypeList= Arrays.asList();
  List<MessageType> state2MsgTypeList= Arrays.asList();

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public Light()
  {
    setBulb(Bulb.Off);
    pool = new MessagePool();
    removal=new Thread(this);
    //start the thread of Light
    removal.start();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getBulbFullName()
  {
    String answer = bulb.toString();
    return answer;
  }

  public Bulb getBulb()
  {
    return bulb;
  }

  private boolean __autotransition4__()
  {
    boolean wasEventProcessed = false;
    
    Bulb aBulb = bulb;
    switch (aBulb)
    {
      case Off:
        setBulb(Bulb.On);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void setBulb(Bulb aBulb)
  {
    bulb = aBulb;

    // entry actions and do activities
    switch(bulb)
    {
      case Off:
        __autotransition4__();
        break;
    }
  }

  public void delete()
  {}

  // A method to return a list of message types for each state of the Lightstate machine
  public List<MessageType> getStateMsgTypeList(Bulb state){
    List<MessageType> msg = null;
    switch (state)
    {
      case Off:
        msg=state1MsgTypeList;
        break;
      case On:
        msg=state2MsgTypeList;
        break;
      default:
    }
    return msg;
  }

  private class Message
  {
    MessageType type;
    
    //Message parameters
    Vector<Object> param;
    
    public Message(MessageType t, Vector<Object> p)
    {
      type = t; 
      param = p;
    }
  }
  
  protected class MessagePool {
    Queue<Message> messages = new LinkedList<Message>();
    
    public synchronized void put(Message m)
    {
      messages.add(m); 
      notify();
    }

    public synchronized Message getNext()
    {
      List<MessageType> processableMessages;
      // return a list of message types for the current state
      processableMessages = getStateMsgTypeList(getBulb());
      Message message=null;

      try {
        message=getNextProcessableMessage(processableMessages);
        while (message==null)
        {
          wait();
          message=getNextProcessableMessage(processableMessages);
        }
      } catch (InterruptedException e) { e.printStackTrace(); }

      // return the message
      return (message);
    }

    public Message getNextProcessableMessage(List<MessageType> processableMessages)
    {
      // Iterate through messages and remove the first message that matches one of the processableMessages list
      // otherwise return null
      for (Message msg: messages){
        if(processableMessages.contains(msg.type)){
          //The element to be removed
          messages.remove(msg);
          return (msg);
        }
      }
      return null;
    }
  }

  //------------------------------
  //messages accepted 
  //------------------------------

  
  @Override
  public void run ()
  {
    boolean status=false;
    while (true) 
    {
      Message m = pool.getNext();
      
      switch (m.type)
      { 
        default:
      }
      if(!status)
      {
        // Error message is written or  exception is raised
      }
    }
  }
}