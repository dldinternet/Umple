/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

package example;
import java.util.*;
import java.lang.Thread;

public class LightFixture implements Runnable
{
  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
  public @interface umplesourcefile{int[] line();String[] file();int[] javaline();int[] length();}

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //LightFixture Attributes
  private int brightness;

  //LightFixture State Machines
  enum Bulb { Off, Dimmed, On }
  private Bulb bulb;
  
  //enumeration type of messages accepted by LightFixture
  enum MessageType { turnDimmer_M, flipSwitch_M, entry_M }
  
  MessagePool pool;
  Thread removal;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public LightFixture()
  {
    brightness = 0;
    setBulb(Bulb.Off);
    pool = new MessagePool();
    removal=new Thread(this);
    //start the thread of LightFixture
    removal.start();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setBrightness(int aBrightness)
  {
    boolean wasSet = false;
    brightness = aBrightness;
    wasSet = true;
    return wasSet;
  }

  public int getBrightness()
  {
    return brightness;
  }

  public String getBulbFullName()
  {
    String answer = bulb.toString();
    return answer;
  }

  public Bulb getBulb()
  {
    return bulb;
  }

  @umplesourcefile(line={8,14,18}, file={"queuedStateMachine_withParameters.ump","queuedStateMachine_withParameters.ump","queuedStateMachine_withParameters.ump"}, javaline={82,88,94}, length={1,1,1})
  public boolean _turnDimmer(Integer lightval)
  {
    boolean wasEventProcessed = false;
    
    Bulb aBulb = bulb;
    switch (aBulb)
    {
      case Off:
        setBrightness(lightval)
        setBulb(Bulb.Off);
        wasEventProcessed = true;
        break;
      case Dimmed:
        setBrightness(lightval)
        setBulb(Bulb.Dimmed);
        wasEventProcessed = true;
        break;
      case On:
        setBrightness(lightval)
        setBulb(Bulb.Dimmed);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _flipSwitch()
  {
    boolean wasEventProcessed = false;
    
    Bulb aBulb = bulb;
    switch (aBulb)
    {
      case Off:
        setBulb(Bulb.Dimmed);
        wasEventProcessed = true;
        break;
      case Dimmed:
        setBulb(Bulb.Off);
        wasEventProcessed = true;
        break;
      case On:
        setBulb(Bulb.Off);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  @umplesourcefile(line={12}, file={"queuedStateMachine_withParameters.ump"}, javaline={140}, length={1})
  public boolean _entry()
  {
    boolean wasEventProcessed = false;
    
    Bulb aBulb = bulb;
    switch (aBulb)
    {
      case Dimmed:
        if (dimmer > 99)
        {
          setBulb(Bulb.On);
          wasEventProcessed = true;
          break;
        }
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private void setBulb(Bulb aBulb)
  {
    bulb = aBulb;
  }

  public void delete()
  {}

  private class Message
  {
    MessageType type;
    
    //Message parameters
    Vector<Object> param;
    
    public Message(MessageType t, Vector<Object> p)
    {
      type = t; 
      param = p;
    }
  }
  
  protected class MessagePool {
    Queue<Message> messages = new LinkedList<Message>();
    
    public synchronized void put(Message m)
    {
      messages.add(m); 
      notify();
    }

    public synchronized Message getNext()
    {
      try {
        while (messages.isEmpty()) 
        {
          wait();
        }
      } catch (InterruptedException e) { e.printStackTrace(); } 

      //The element to be removed
      Message m = messages.remove(); 
      return (m);
    }
  }

  //------------------------------
  //messages accepted 
  //------------------------------

  public void turnDimmer (Integer lightval)
  {
    Vector v = new Vector(1);
    v.add(0, lightval);
    pool.put(new Message(MessageType.turnDimmer_M, v));
  }

  public void flipSwitch ()
  {
    pool.put(new Message(MessageType.flipSwitch_M, null));
  }

  public void entry ()
  {
    pool.put(new Message(MessageType.entry_M, null));
  }

  
  @Override
  public void run ()
  {
    boolean status=false;
    while (true) 
    {
      Message m = pool.getNext();
      
      switch (m.type)
      {
        case turnDimmer_M:
          status = _turnDimmer((Integer) m.param.elementAt(0));
          break;
        case flipSwitch_M:
          status = _flipSwitch();
          break;
        case entry_M:
          status = _entry();
          break; 
        default:
      }
      if(!status)
      {
        // Error message is written or  exception is raised
      }
    }
  }

  public String toString()
  {
	  String outputString = "";
    return super.toString() + "["+
            "brightness" + ":" + getBrightness()+ "]"
     + outputString;
  }
}