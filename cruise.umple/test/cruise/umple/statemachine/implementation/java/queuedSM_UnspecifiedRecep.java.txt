/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.19.0.3287 modeling language!*/

package example;
import java.util.*;
import java.lang.Thread;

public class AutomatedTellerMachine implements Runnable
{
  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
  public @interface umplesourcefile{int[] line();String[] file();int[] javaline();int[] length();}

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //AutomatedTellerMachine State Machines
  enum Sm { idle, maintenance, active, error1, error2 }
  enum SmActive { Null, validating, selecting, processing, printing }
  private Sm sm;
  private SmActive smActive;
  
  //enumeration type of messages accepted by AutomatedTellerMachine
  enum MessageType { cardInserted_M, maintain_M, isMaintained_M, cancel_M, validated_M, select_M, selectAnotherTransiction_M, finish_M, receiptPrinted_M }
  
  MessagePool pool;
  Thread removal;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public AutomatedTellerMachine()
  {
    setSmActive(SmActive.Null);
    setSm(Sm.idle);
    pool = new MessagePool();
    removal=new Thread(this);
    //start the thread of AutomatedTellerMachine
    removal.start();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getSmFullName()
  {
    String answer = sm.toString();
    if (smActive != SmActive.Null) { answer += "." + smActive.toString(); }
    return answer;
  }

  public Sm getSm()
  {
    return sm;
  }

  public SmActive getSmActive()
  {
    return smActive;
  }

  public boolean _cardInserted()
  {
    boolean wasEventProcessed = false;
    
    Sm aSm = sm;
    switch (aSm)
    {
      case idle:
        setSm(Sm.active);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
        wasEventProcessed = unspecified(getSm().toString(), "cardInserted");
    }

    return wasEventProcessed;
  }

  public boolean _maintain()
  {
    boolean wasEventProcessed = false;
    
    Sm aSm = sm;
    switch (aSm)
    {
      case idle:
        setSm(Sm.maintenance);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
        wasEventProcessed = unspecified(getSm().toString(), "maintain");
    }

    return wasEventProcessed;
  }

  public boolean unspecified(String state, String event)
  {
    boolean wasEventProcessed = false;
    
    Sm aSm = sm;
    SmActive aSmActive = smActive;
    switch (aSm)
    {
      case idle:
        setSm(Sm.error1);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    switch (aSmActive)
    {
      case validating:
        exitSm();
        setSm(Sm.error2);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _isMaintained()
  {
    boolean wasEventProcessed = false;
    
    Sm aSm = sm;
    switch (aSm)
    {
      case maintenance:
        setSm(Sm.idle);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _cancel()
  {
    boolean wasEventProcessed = false;
    
    Sm aSm = sm;
    switch (aSm)
    {
      case active:
        exitSm();
        setSm(Sm.idle);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private boolean __autotransition1__()
  {
    boolean wasEventProcessed = false;
    
    Sm aSm = sm;
    switch (aSm)
    {
      case error1:
        setSm(Sm.idle);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private boolean __autotransition2__()
  {
    boolean wasEventProcessed = false;
    
    Sm aSm = sm;
    switch (aSm)
    {
      case error2:
        setSmActive(SmActive.validating);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private boolean enterActive()
  {
    boolean wasEventProcessed = false;
    
    SmActive aSmActive = smActive;
    switch (aSmActive)
    {
      case Null:
        setSmActive(SmActive.validating);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  private boolean exitActive()
  {
    boolean wasEventProcessed = false;
    
    SmActive aSmActive = smActive;
    switch (aSmActive)
    {
      case validating:
        setSmActive(SmActive.Null);
        wasEventProcessed = true;
        break;
      case selecting:
        setSmActive(SmActive.Null);
        wasEventProcessed = true;
        break;
      case processing:
        setSmActive(SmActive.Null);
        wasEventProcessed = true;
        break;
      case printing:
        setSmActive(SmActive.Null);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _validated()
  {
    boolean wasEventProcessed = false;
    
    SmActive aSmActive = smActive;
    switch (aSmActive)
    {
      case validating:
        setSmActive(SmActive.selecting);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
        wasEventProcessed = unspecified(getSmActive().toString(), "validated");
    }

    return wasEventProcessed;
  }

  public boolean _select()
  {
    boolean wasEventProcessed = false;
    
    SmActive aSmActive = smActive;
    switch (aSmActive)
    {
      case selecting:
        setSmActive(SmActive.processing);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _selectAnotherTransiction()
  {
    boolean wasEventProcessed = false;
    
    SmActive aSmActive = smActive;
    switch (aSmActive)
    {
      case processing:
        setSmActive(SmActive.selecting);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _finish()
  {
    boolean wasEventProcessed = false;
    
    SmActive aSmActive = smActive;
    switch (aSmActive)
    {
      case processing:
        setSmActive(SmActive.printing);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  public boolean _receiptPrinted()
  {
    boolean wasEventProcessed = false;
    
    SmActive aSmActive = smActive;
    switch (aSmActive)
    {
      case printing:
        exitSm();
        setSm(Sm.idle);
        wasEventProcessed = true;
        break;
      default:
        // Other states do respond to this event
    }

    return wasEventProcessed;
  }

  @umplesourcefile(line={19}, file={"queuedSM_UnspecifiedRecep.ump"}, javaline={354}, length={1})
  private void exitSm()
  {
    switch(sm)
    {
      case active:
        exitActive();
        ejectCard();
        break;
    }
  }

  private void setSm(Sm aSm)
  {
    sm = aSm;

    // entry actions and do activities
    switch(sm)
    {
      case active:
        readCard();
        if (smActive == SmActive.Null) { setSmActive(SmActive.validating); }
        break;
      case error1:
        __autotransition1__();
        break;
      case error2:
        __autotransition2__();
        break;
    }
  }

  private void setSmActive(SmActive aSmActive)
  {
    smActive = aSmActive;
    if (sm != Sm.active && aSmActive != SmActive.Null) { setSm(Sm.active); }
  }

  public void delete()
  {}

  protected class Message
  {
    MessageType type;
    
    //Message parameters
    Vector<Object> param;
    
    public Message(MessageType t, Vector<Object> p)
    {
      type = t; 
      param = p;
    }

    @Override
    public String toString()
    {
      return type + "," + param;
    }
  }
  
  protected class MessagePool {
    Queue<Message> messages = new LinkedList<Message>();
    
    public synchronized void put(Message m)
    {
      messages.add(m); 
      notify();
    }

    public synchronized Message getNext()
    {
      try {
        while (messages.isEmpty()) 
        {
          wait();
        }
      } catch (InterruptedException e) { e.printStackTrace(); } 

      //The element to be removed
      Message m = messages.remove(); 
      return (m);
    }
  }

  //------------------------------
  //messages accepted 
  //------------------------------

  public void cardInserted ()
  {
    pool.put(new Message(MessageType.cardInserted_M, null));
  }

  public void maintain ()
  {
    pool.put(new Message(MessageType.maintain_M, null));
  }

  public void isMaintained ()
  {
    pool.put(new Message(MessageType.isMaintained_M, null));
  }

  public void cancel ()
  {
    pool.put(new Message(MessageType.cancel_M, null));
  }

  public void validated ()
  {
    pool.put(new Message(MessageType.validated_M, null));
  }

  public void select ()
  {
    pool.put(new Message(MessageType.select_M, null));
  }

  public void selectAnotherTransiction ()
  {
    pool.put(new Message(MessageType.selectAnotherTransiction_M, null));
  }

  public void finish ()
  {
    pool.put(new Message(MessageType.finish_M, null));
  }

  public void receiptPrinted ()
  {
    pool.put(new Message(MessageType.receiptPrinted_M, null));
  }

  
  @Override
  public void run ()
  {
    boolean status=false;
    while (true) 
    {
      Message m = pool.getNext();
      
      switch (m.type)
      {
        case cardInserted_M:
          status = _cardInserted();
          break;
        case maintain_M:
          status = _maintain();
          break;
        case isMaintained_M:
          status = _isMaintained();
          break;
        case cancel_M:
          status = _cancel();
          break;
        case validated_M:
          status = _validated();
          break;
        case select_M:
          status = _select();
          break;
        case selectAnotherTransiction_M:
          status = _selectAnotherTransiction();
          break;
        case finish_M:
          status = _finish();
          break;
        case receiptPrinted_M:
          status = _receiptPrinted();
          break; 
        default:
      }
      if(!status)
      {
        // Error message is written or  exception is raised
      }
    }
  }
}