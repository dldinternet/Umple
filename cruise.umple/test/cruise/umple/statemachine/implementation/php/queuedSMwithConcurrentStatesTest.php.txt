<?php
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.18.0.3247 modeling language!*/

class QueuedSMwithConcurrentStates
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //QueuedSMwithConcurrentStates State Machines
  private static $SmState1 = 1;
  private static $SmState2 = 2;
  private static $SmState3 = 3;
  private static $SmSubState1Null = 4;
  private static $SmSubState1SubState1 = 5;
  private static $SmSubState2Null = 6;
  private static $SmSubState2SubState2 = 7;
  private $sm;
  private $smSubState1;
  private $smSubState2;

  //QueuedSMwithConcurrentStates Do Activity Threads
  private $doActivitySmState2Thread = null;
  private $doActivitySmState3Thread = null;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public function __construct()
  {
    $this->setSmSubState1(self::$SmSubState1Null);
    $this->setSmSubState2(self::$SmSubState2Null);
    $this->setSm(self::$SmState1);
  }

  //------------------------
  // INTERFACE
  //------------------------

  public function getSmFullName()
  {
    $answer = $this->getSm();
    if ($this->smSubState1 != self::$SmSubState1Null) { $answer .= "." . $this->getSmSubState1(); }
    if ($this->smSubState2 != self::$SmSubState2Null) { $answer .= "." . $this->getSmSubState2(); }
    return $answer;
  }

  public function getSm()
  {
    if ($this->sm == self::$SmState1) { return "SmState1"; }
    elseif ($this->sm == self::$SmState2) { return "SmState2"; }
    elseif ($this->sm == self::$SmState3) { return "SmState3"; }
    return null;
  }

  public function getSmSubState1()
  {
    if ($this->smSubState1 == self::$SmSubState1Null) { return "SmSubState1Null"; }
    elseif ($this->smSubState1 == self::$SmSubState1SubState1) { return "SmSubState1SubState1"; }
    return null;
  }

  public function getSmSubState2()
  {
    if ($this->smSubState2 == self::$SmSubState2Null) { return "SmSubState2Null"; }
    elseif ($this->smSubState2 == self::$SmSubState2SubState2) { return "SmSubState2SubState2"; }
    return null;
  }

  private function enterState1()
  {
    $wasEventProcessed = false;
    
    $aSmSubState1 = $this->smSubState1;
    $aSmSubState2 = $this->smSubState2;
    if ($aSmSubState1 == self::$SmSubState1Null)
    {
      $this->setSmSubState1(self::$SmSubState1SubState1);
      $wasEventProcessed = true;
    }

    
    if ($aSmSubState2 == self::$SmSubState2Null)
    {
      $this->setSmSubState2(self::$SmSubState2SubState2);
      $wasEventProcessed = true;
    }
    return $wasEventProcessed;
  }

  private function exitState1()
  {
    $wasEventProcessed = false;
    
    $aSmSubState1 = $this->smSubState1;
    $aSmSubState2 = $this->smSubState2;
    if ($aSmSubState1 == self::$SmSubState1SubState1)
    {
      $this->setSmSubState1(self::$SmSubState1Null);
      $wasEventProcessed = true;
    }

    
    if ($aSmSubState2 == self::$SmSubState2SubState2)
    {
      $this->setSmSubState2(self::$SmSubState2Null);
      $wasEventProcessed = true;
    }
    return $wasEventProcessed;
  }

  public function transit()
  {
    $wasEventProcessed = false;
    
    $aSmSubState1 = $this->smSubState1;
    $aSmSubState2 = $this->smSubState2;
    if ($aSmSubState1 == self::$SmSubState1SubState1)
    {
      $this->exitSm();
      $this->setSm(self::$SmState2);
      $wasEventProcessed = true;
    }

    
    if ($aSmSubState2 == self::$SmSubState2SubState2)
    {
      $this->exitSm();
      $this->setSm(self::$SmState3);
      $wasEventProcessed = true;
    }
    return $wasEventProcessed;
  }

  private function exitSm()
  {
    if ($this->sm == self::$SmState1)
    {
      $this->exitState1();
    }
  }

  private function setSm($aSm)
  {
    $this->sm = $aSm;

    // entry actions and do activities
    if ($this->sm == self::$SmState1)
    {
      if ($this->smSubState1 == self::$SmSubState1Null) { $this->setSmSubState1(self::$SmSubState1SubState1); }
      if ($this->smSubState2 == self::$SmSubState2Null) { $this->setSmSubState2(self::$SmSubState2SubState2); }
    }
    elseif ($this->sm == self::$SmState2)
    {
      doTransition1();
    }
    elseif ($this->sm == self::$SmState3)
    {
      doTransition2();
    }
  }

  private function setSmSubState1($aSmSubState1)
  {
    $this->smSubState1 = $aSmSubState1;
    if ($this->sm != self::$SmState1 && $aSmSubState1 != self::$SmSubState1Null) { $this->setSm(self::$SmState1); }
  }

  private function setSmSubState2($aSmSubState2)
  {
    $this->smSubState2 = $aSmSubState2;
    if ($this->sm != self::$SmState1 && $aSmSubState2 != self::$SmSubState2Null) { $this->setSm(self::$SmState1); }
  }

  public function equals($compareTo)
  {
    return $this == $compareTo;
  }

  public function delete()
  {}

}
?>