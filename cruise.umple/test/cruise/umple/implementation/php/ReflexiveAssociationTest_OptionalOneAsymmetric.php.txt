<?php
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

class Student
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Student Attributes
  private $number;

  //Student Associations
  private $pupil;
  private $ta;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public function __construct($aNumber)
  {
    $this->number = $aNumber;
  }

  //------------------------
  // INTERFACE
  //------------------------

  public function setNumber($aNumber)
  {
    $wasSet = false;
    $this->number = $aNumber;
    $wasSet = true;
    return $wasSet;
  }

  public function getNumber()
  {
    return $this->number;
  }

  public function getPupil()
  {
    return $this->pupil;
  }

  public function getTa()
  {
    return $this->ta;
  }

  public function setPupil($newPupil)
  {
    $wasSet = false;
    if ($newPupil == null)
    {
      $existingPupil = $this->pupil;
      $this->pupil = null;
      
      if ($existingPupil != null && $existingPupil->getTa() != null)
      {
        $existingPupil->setTa(null);
      }
      $wasSet = true;
      return $wasSet;
    }
    
    $currentPupil = $this->getPupil();
    if ($currentPupil != null && $currentPupil != $newPupil)
    {
      $currentPupil->setTa(null);
    }
    
    $this->pupil = $newPupil;
    $existingTa = $newPupil->getTa();
    
    if ($this != $existingTa)
    {
      $newPupil->setTa($this);
    }
    $wasSet = true;
    return $wasSet;
  }

  public function setTa($newTa)
  {
    $wasSet = false;
    if ($newTa == null)
    {
      $existingTa = $this->ta;
      $this->ta = null;
      
      if ($existingTa != null && $existingTa->getPupil() != null)
      {
        $existingTa->setPupil(null);
      }
      $wasSet = true;
      return $wasSet;
    }
    
    $currentTa = $this->getTa();
    if ($currentTa != null && $currentTa != $newTa)
    {
      $currentTa->setPupil(null);
    }
    
    $this->ta = $newTa;
    $existingPupil = $newTa->getPupil();
    
    if ($this != $existingPupil)
    {
      $newTa->setPupil($this);
    }
    $wasSet = true;
    return $wasSet;
  }

  public function equals($compareTo)
  {
    return $this == $compareTo;
  }

  public function delete()
  {
    if ($this->pupil != null)
    {
      $this->pupil->setTa(null);
    }
    if ($this->ta != null)
    {
      $this->ta->setPupil(null);
    }
  }

}
?>