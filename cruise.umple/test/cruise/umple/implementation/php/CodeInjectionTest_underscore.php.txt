<?php
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

class Student
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Student Attributes
  private $id;
  private $name;
  private $type;
  private $roles;

  //Helper Variables
  private $canSetId;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public function __construct($aName)
  {
    $this->canSetId = true;
    $this->name = $aName;
    $this->resetType();
    $this->roles = array();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public function setId($aId)
  {
    $wasSet = false;
    print "start set_id";
    if (!$this->canSetId) { return false; }
    $this->canSetId = false;
    $this->id = $aId;
    $wasSet = true;
    print "end set_id";
    return $wasSet;
  }

  public function setName($aName)
  {
    $wasSet = false;
    print "start set_name";
    print "start set_name2";
    $this->name = $aName;
    $wasSet = true;
    print "end set_name";
    return $wasSet;
  }

  public function setType($aType)
  {
    $wasSet = false;
    print "start set_type";
    $this->type = $aType;
    $wasSet = true;
    print "end set_type";
    return $wasSet;
  }

  public function resetType()
  {
    $wasReset = false;
    print "start reset_type";
    $this->type = $this->getDefaultType();
    $wasReset = true;
    print "end reset_type";
    return $wasReset;
  }

  public function addRole($aRole)
  {
    $wasAdded = false;
    print "start add";
    $this->roles[] = $aRole;
    $wasAdded = true;
    print "end add";
    return $wasAdded;
  }

  public function removeRole($aRole)
  {
    $wasRemoved = false;
    print "start remove";
    unset($this->roles[$this->indexOfRole($aRole)]);
    $this->roles = array_values($this->roles);
    $wasRemoved = true;
    print "end remove";
    return $wasRemoved;
  }

  public function getId()
  {
    print "start get_id";
    $aId = $this->id;
    print "end get_id";
    return $aId;
  }

  public function getName()
  {
    print "start get_name";
    $aName = $this->name;
    print "end get_name";
    return $aName;
  }

  public function getType()
  {
    print "start get_type";
    $aType = $this->type;
    print "end get_type";
    return $aType;
  }

  public function getDefaultType()
  {
    print "start getDefault_type";
    $aType = "None";
    print "end getDefault_type";
    return $aType;
  }

  public function getRole($index)
  {
    print "start get_role";
    $aRole = $this->roles[$index];
    print "end get_role";
    return $aRole;
  }

  public function getRoles()
  {
    print "start get_roles";
    $newRoles = $this->roles;
    print "end get_roles";
    return $newRoles;
  }

  public function numberOfRoles()
  {
    print "start numberOf_roles";
    $number = count($this->roles);
    print "end numberOf_roles";
    return $number;
  }

  public function hasRoles()
  {
    $has = roles.size() > 0;
    return $has;
  }

  public function indexOfRole($aRole)
  {
    print "start indexOf_role";
    $rawAnswer = array_search($aRole,$this->roles);
    $index = $rawAnswer == null && $rawAnswer !== 0 ? -1 : $rawAnswer;
    print "end indexOf_role";
    return $index;
  }

  public function equals($compareTo)
  {
    return $this == $compareTo;
  }

  public function delete()
  {}

}
?>
