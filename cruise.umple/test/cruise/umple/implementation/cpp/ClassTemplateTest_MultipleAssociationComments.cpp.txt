/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

#include "Foo.h"
#include "Bar1.h"
#include "Bar2.h"
#include "Bar3.h"
#include "Bar4.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 Foo::Foo()
  {
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 Foo::Foo(const Foo & foo)
  {  }
  	
  //------------------------
  // Operator =
  //------------------------

 Foo Foo::operator=(const Foo & foo)
  {  }

  //------------------------
  // INTERFACE
  //------------------------

  Bar1* Foo::getBar1(int index) 
  {
    Bar1* aBar1 = bar1s[index];
    return aBar1;
  }

  vector<Bar1*> Foo::getBar1s() 
  {
    vector<Bar1*> newBar1s = bar1s;
    return newBar1s;
  }

  int Foo::numberOfBar1s()
  {
    int number = bar1s.size();
    return number;
  }

  bool Foo::hasBar1s()
  {
    bool has = bar1s.size() > 0;
    return has;
  }
  
  int Foo::indexOfBar1(Bar1* aBar1)
  {
    int index = find(bar1s.begin(), bar1s.end(), aBar1) - bar1s.begin();
    return index;
  }
  
  Bar2* Foo::getBar2(int index) 
  {
    Bar2* aBar2 = bar2s[index];
    return aBar2;
  }

  vector<Bar2*> Foo::getBar2s() 
  {
    vector<Bar2*> newBar2s = bar2s;
    return newBar2s;
  }

  int Foo::numberOfBar2s()
  {
    int number = bar2s.size();
    return number;
  }

  bool Foo::hasBar2s()
  {
    bool has = bar2s.size() > 0;
    return has;
  }
  
  int Foo::indexOfBar2(Bar2* aBar2)
  {
    int index = find(bar2s.begin(), bar2s.end(), aBar2) - bar2s.begin();
    return index;
  }
  
  Bar3* Foo::getBar3(int index) 
  {
    Bar3* aBar3 = bar3s[index];
    return aBar3;
  }

  vector<Bar3*> Foo::getBar3s() 
  {
    vector<Bar3*> newBar3s = bar3s;
    return newBar3s;
  }

  int Foo::numberOfBar3s()
  {
    int number = bar3s.size();
    return number;
  }

  bool Foo::hasBar3s()
  {
    bool has = bar3s.size() > 0;
    return has;
  }
  
  int Foo::indexOfBar3(Bar3* aBar3)
  {
    int index = find(bar3s.begin(), bar3s.end(), aBar3) - bar3s.begin();
    return index;
  }
  
  Bar4* Foo::getBar4(int index) 
  {
    Bar4* aBar4 = bar4s[index];
    return aBar4;
  }

  vector<Bar4*> Foo::getBar4s() 
  {
    vector<Bar4*> newBar4s = bar4s;
    return newBar4s;
  }

  int Foo::numberOfBar4s()
  {
    int number = bar4s.size();
    return number;
  }

  bool Foo::hasBar4s()
  {
    bool has = bar4s.size() > 0;
    return has;
  }
  
  int Foo::indexOfBar4(Bar4* aBar4)
  {
    int index = find(bar4s.begin(), bar4s.end(), aBar4) - bar4s.begin();
    return index;
  }
  
  static int minimumNumberOfBar1s()
  {
    return 0;
  }

  Bar1 Foo::addBar1()
  {
    return new Bar1(this);
  }

  bool Foo::addBar1(Bar1* aBar1)
  {
    bool wasAdded = false;
    if (find(bar1s.begin(),bar1s.end(),aBar1) != bar1s.end()) { return false; }
    Foo* existingFoo = aBar1->getFoo();
    bool isNewFoo = (existingFoo != NULL && this!=existingFoo);
    if (isNewFoo)
    {
      aBar1->setFoo(this);
    }
    else
    {
      bar1s.push_back(aBar1);
    }
    wasAdded = true;
    return wasAdded;
  }

  bool Foo::removeBar1(Bar1* aBar1)
  {
    bool wasRemoved = false;
	int index = find(bar1s.begin(), bar1s.end(), aBar1) - bar1s.begin();
    //Unable to remove aBar1, as it must always have a foo
    if (this!=aBar1->getFoo())
    {
      bar1s.erase(find(bar1s.begin(),bar1s.end(),aBar1));
	  delete bar1s[index];
      wasRemoved = true;
    }
    return wasRemoved;
  }
  static int minimumNumberOfBar2s()
  {
    return 0;
  }

  Bar2 Foo::addBar2()
  {
    return new Bar2(this);
  }

  bool Foo::addBar2(Bar2* aBar2)
  {
    bool wasAdded = false;
    if (find(bar2s.begin(),bar2s.end(),aBar2) != bar2s.end()) { return false; }
    Foo* existingFoo = aBar2->getFoo();
    bool isNewFoo = (existingFoo != NULL && this!=existingFoo);
    if (isNewFoo)
    {
      aBar2->setFoo(this);
    }
    else
    {
      bar2s.push_back(aBar2);
    }
    wasAdded = true;
    return wasAdded;
  }

  bool Foo::removeBar2(Bar2* aBar2)
  {
    bool wasRemoved = false;
	int index = find(bar2s.begin(), bar2s.end(), aBar2) - bar2s.begin();
    //Unable to remove aBar2, as it must always have a foo
    if (this!=aBar2->getFoo())
    {
      bar2s.erase(find(bar2s.begin(),bar2s.end(),aBar2));
	  delete bar2s[index];
      wasRemoved = true;
    }
    return wasRemoved;
  }
  static int minimumNumberOfBar3s()
  {
    return 0;
  }

  Bar3 Foo::addBar3()
  {
    return new Bar3(this);
  }

  bool Foo::addBar3(Bar3* aBar3)
  {
    bool wasAdded = false;
    if (find(bar3s.begin(),bar3s.end(),aBar3) != bar3s.end()) { return false; }
    Foo* existingFoo = aBar3->getFoo();
    bool isNewFoo = (existingFoo != NULL && this!=existingFoo);
    if (isNewFoo)
    {
      aBar3->setFoo(this);
    }
    else
    {
      bar3s.push_back(aBar3);
    }
    wasAdded = true;
    return wasAdded;
  }

  bool Foo::removeBar3(Bar3* aBar3)
  {
    bool wasRemoved = false;
	int index = find(bar3s.begin(), bar3s.end(), aBar3) - bar3s.begin();
    //Unable to remove aBar3, as it must always have a foo
    if (this!=aBar3->getFoo())
    {
      bar3s.erase(find(bar3s.begin(),bar3s.end(),aBar3));
	  delete bar3s[index];
      wasRemoved = true;
    }
    return wasRemoved;
  }
  static int minimumNumberOfBar4s()
  {
    return 0;
  }

  Bar4 Foo::addBar4()
  {
    return new Bar4(this);
  }

  bool Foo::addBar4(Bar4* aBar4)
  {
    bool wasAdded = false;
    if (find(bar4s.begin(),bar4s.end(),aBar4) != bar4s.end()) { return false; }
    Foo* existingFoo = aBar4->getFoo();
    bool isNewFoo = (existingFoo != NULL && this!=existingFoo);
    if (isNewFoo)
    {
      aBar4->setFoo(this);
    }
    else
    {
      bar4s.push_back(aBar4);
    }
    wasAdded = true;
    return wasAdded;
  }

  bool Foo::removeBar4(Bar4* aBar4)
  {
    bool wasRemoved = false;
	int index = find(bar4s.begin(), bar4s.end(), aBar4) - bar4s.begin();
    //Unable to remove aBar4, as it must always have a foo
    if (this!=aBar4->getFoo())
    {
      bar4s.erase(find(bar4s.begin(),bar4s.end(),aBar4));
	  delete bar4s[index];
      wasRemoved = true;
    }
    return wasRemoved;
  }
  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
Foo::~Foo()
  {
    for(i =0; sizeof(bar1s); i++)
    {
      delete bar1s[i];
    }
    for(i =0; sizeof(bar2s); i++)
    {
      delete bar2s[i];
    }
    for(i =0; sizeof(bar3s); i++)
    {
      delete bar3s[i];
    }
    for(i =0; sizeof(bar4s); i++)
    {
      delete bar4s[i];
    }
  }
