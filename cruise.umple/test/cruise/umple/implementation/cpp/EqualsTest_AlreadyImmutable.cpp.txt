/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

namespace example{

public class Student
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Student Attributes
  private int intId;
  private double doubleId;
  private boolean booleanId;
  private string stringId;

  //Helper Variables
  private int cachedHashCode;
  private boolean canSetIntId;
  private boolean canSetDoubleId;
  private boolean canSetBooleanId;
  private boolean canSetstringId;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public Student(double aDoubleId, boolean aBooleanId, string astringId)
  {
    canSetIntId = true;
    doubleId = aDoubleId;
    canSetDoubleId = false;
    booleanId = aBooleanId;
    canSetBooleanId = false;
    stringId = astringId;
    canSetstringId = false;
    cachedHashCode = -1;
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setIntId(int aIntId)
  {
    boolean wasSet = false;
    if (!canSetIntId) { return false; }
    canSetIntId = false;
    intId = aIntId;
    wasSet = true;
    return wasSet;
  }

  public int getIntId()
  {
    return intId;
  }

  public double getDoubleId()
  {
    return doubleId;
  }

  public boolean getBooleanId()
  {
    return booleanId;
  }

  public string getstringId()
  {
    return stringId;
  }

  public boolean equals(Object obj)
  {
    if (obj == null) { return false; }
    if (!getClass().equals(obj.getClass())) { return false; }

    Student compareTo = (Student)obj;
  
    if (intId != compareTo.intId)
    {
      return false;
    }

    if (doubleId != compareTo.doubleId)
    {
      return false;
    }

    if (booleanId != compareTo.booleanId)
    {
      return false;
    }

    if (stringId == null && compareTo.stringId != null)
    {
      return false;
    }
    else if (stringId != null && !stringId.equals(compareTo.stringId))
    {
      return false;
    }

    return true;
  }

  public int hashCode()
  {
    if (cachedHashCode != -1)
    {
      return cachedHashCode;
    }
    cachedHashCode = 17;
    cachedHashCode = cachedHashCode * 23 + intId;

    cachedHashCode = cachedHashCode * 23 + (new Double(doubleId)).hashCode();

    cachedHashCode = cachedHashCode * 23 + (booleanId ? 1 : 0);

    if (stringId != null)
    {
      cachedHashCode = cachedHashCode * 23 + stringId.hashCode();
    }
    else
    {
      cachedHashCode = cachedHashCode * 23;
    }

    canSetIntId = false;
    canSetDoubleId = false;
    canSetBooleanId = false;
    canSetstringId = false;
    return cachedHashCode;
  }

  public void delete()
  {}

}