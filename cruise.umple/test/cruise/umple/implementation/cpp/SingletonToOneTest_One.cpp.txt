/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

namespace example{
import java.util.*;

public class Student
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Student Attributes
  private string number;

  //Student Associations
  private List<Mentor> mentors;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public Student(string aNumber)
  {
    number = aNumber;
    mentors = new ArrayList<Mentor>();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setNumber(string aNumber)
  {
    boolean wasSet = false;
    number = aNumber;
    wasSet = true;
    return wasSet;
  }

  public string getNumber()
  {
    return number;
  }

  public Mentor getMentor(int index)
  {
    Mentor aMentor = mentors.get(index);
    return aMentor;
  }

  public List<Mentor> getMentors()
  {
    List<Mentor> newMentors = Collections.unmodifiableList(mentors);
    return newMentors;
  }

  public int numberOfMentors()
  {
    int number = mentors.size();
    return number;
  }

  public boolean hasMentors()
  {
    boolean has = mentors.size() > 0;
    return has;
  }

  public int indexOfMentor(Mentor aMentor)
  {
    int index = mentors.indexOf(aMentor);
    return index;
  }

  public static int minimumNumberOfMentors()
  {
    return 0;
  }

  public boolean addMentor(Mentor aMentor)
  {
    boolean wasAdded = false;
    if (mentors.contains(aMentor)) { return false; }
    Student existingStudent = aMentor.getStudent();
    if (existingStudent == null)
    {
      aMentor.setStudent(this);
    }
    else if (!this.equals(existingStudent))
    {
      existingStudent.removeMentor(aMentor);
      addMentor(aMentor);
    }
    else
    {
      mentors.add(aMentor);
    }
    wasAdded = true;
    return wasAdded;
  }

  public boolean removeMentor(Mentor aMentor)
  {
    boolean wasRemoved = false;
    if (mentors.contains(aMentor))
    {
      mentors.remove(aMentor);
      aMentor.setStudent(null);
      wasRemoved = true;
    }
    return wasRemoved;
  }

  public void delete()
  {
    for(Mentor aMentor : mentors)
    {
      aMentor.setStudent(null);
    }
  }

}