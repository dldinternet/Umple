/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

#include "Mentor.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 Mentor::Mentor(const string & aStr, const string & aD, const int & aI, const string & aId)
  {
    str = aStr;
    canSetStr = false;
    canSetStr2 = true;
    someName = NULL;
    lDoub = 0;
    lBool = false;
    d = aD;
    t = new Time();
    i = aI;
    id = aId;
    resetP();
    q = "chicken";
    resetR();
    s = "123";
    canSetS = false;
    tt = "1978-12-25";
    u = "12:13:14";
    resetV();
    resetW();
    x = nextX++;
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 Mentor::Mentor(const Mentor & mentor)
  {
    this->MAX = mentor.MAX;
    this->MIN = mentor.MIN;
    this->HELLO = mentor.HELLO;
    this->str = mentor.str;
    this->str2 = mentor.str2;
    this->someName = mentor.someName;
    this->lDoub = mentor.lDoub;
    this->lBool = mentor.lBool;
    this->name = mentor.name;
    this->d = mentor.d;
    this->t = mentor.t;
    this->i = mentor.i;
    this->derivedTwiceI = mentor.derivedTwiceI;
    this->x = mentor.x;
    this->id = mentor.id;
    this->p = mentor.p;
    this->q = mentor.q;
    this->r = mentor.r;
    this->s = mentor.s;
    this->tt = mentor.tt;
    this->u = mentor.u;
    this->v = mentor.v;
    this->w = mentor.w;
  }
  	
  //------------------------
  // Operator =
  //------------------------

 Mentor Mentor::operator=(const Mentor & mentor)
  {
    this->MAX = mentor.MAX;
    this->MIN = mentor.MIN;
    this->HELLO = mentor.HELLO;
    this->str = mentor.str;
    this->str2 = mentor.str2;
    this->someName = mentor.someName;
    this->lDoub = mentor.lDoub;
    this->lBool = mentor.lBool;
    this->name = mentor.name;
    this->d = mentor.d;
    this->t = mentor.t;
    this->i = mentor.i;
    this->derivedTwiceI = mentor.derivedTwiceI;
    this->x = mentor.x;
    this->id = mentor.id;
    this->p = mentor.p;
    this->q = mentor.q;
    this->r = mentor.r;
    this->s = mentor.s;
    this->tt = mentor.tt;
    this->u = mentor.u;
    this->v = mentor.v;
    this->w = mentor.w;
  }

  //------------------------
  // INTERFACE
  //------------------------

  bool Mentor::setStr2(const string & aStr2)
  {
    bool wasSet = false;
    if (!canSetStr2) { return false; }
    canSetStr2 = false;
    str2 = aStr2;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setSomeName(const string & aSomeName)
  {
    bool wasSet = false;
    someName = aSomeName;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setLDoub(const double & aLDoub)
  {
    bool wasSet = false;
    lDoub = aLDoub;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setLBool(const bool & aLBool)
  {
    bool wasSet = false;
    lBool = aLBool;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setName(const string & aName)
  {
    bool wasSet = false;
    name = aName;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setD(const string & aD)
  {
    bool wasSet = false;
    d = aD;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setI(const int & aI)
  {
    bool wasSet = false;
    i = aI;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setId(const string & aId)
  {
    bool wasSet = false;
    id = aId;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setP(const string & aP)
  {
    bool wasSet = false;
    p = aP;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::resetP()
  {
    bool wasReset = false;
    p = getDefaultP();
    wasReset = true;
    return wasReset;
  }

  bool Mentor::setQ(const string & aQ)
  {
    bool wasSet = false;
    q = aQ;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setR(const string & aR)
  {
    bool wasSet = false;
    r = aR;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::resetR()
  {
    bool wasReset = false;
    r = getDefaultR();
    wasReset = true;
    return wasReset;
  }

  bool Mentor::setTt(const string & aTt)
  {
    bool wasSet = false;
    tt = aTt;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setU(const time_t* & aU)
  {
    bool wasSet = false;
    u = aU;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::setV(const string & aV)
  {
    bool wasSet = false;
    v = aV;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::resetV()
  {
    bool wasReset = false;
    v = getDefaultV();
    wasReset = true;
    return wasReset;
  }

  bool Mentor::setW(const time_t* & aW)
  {
    bool wasSet = false;
    w = aW;
    wasSet = true;
    return wasSet;
  }

  bool Mentor::resetW()
  {
    bool wasReset = false;
    w = getDefaultW();
    wasReset = true;
    return wasReset;
  }

  string Mentor::getStr() const
  {
    return str;
  }

  string Mentor::getStr2() const
  {
    return str2;
  }

  string Mentor::getSomeName() const
  {
    return someName;
  }

  double Mentor::getLDoub() const
  {
    return lDoub;
  }

  bool Mentor::getLBool() const
  {
    return lBool;
  }

  string Mentor::getName() const
  {
    return name;
  }

  string Mentor::getD() const
  {
    return d;
  }

  int Mentor::getI() const
  {
    return i;
  }

  int Mentor::getDerivedTwiceI()
  {
    return i*2;
  }

  string Mentor::getId() const
  {
    return id;
  }

  public static Mentor getWithId(string aId)
  {
    return mentorsById.get(aId);
  }

  public static boolean hasWithId(string aId)
  {
    return getWithId(aId) != null;
  }

  string Mentor::getP() const
  {
    return p;
  }

  string Mentor::getDefaultP() const
  {
    return "robot";
  }

  string Mentor::getQ() const
  {
    return q;
  }

  string Mentor::getR() const
  {
    return r;
  }

  string Mentor::getDefaultR() const
  {
    return "";
  }

  string Mentor::getS() const
  {
    return s;
  }

  string Mentor::getTt() const
  {
    return tt;
  }

  time_t* Mentor::getU() const
  {
    return u;
  }

  string Mentor::getV() const
  {
    return v;
  }

  string Mentor::getDefaultV() const
  {
    return "1978-12-26";
  }

  time_t* Mentor::getW() const
  {
    return w;
  }

  time_t* Mentor::getDefaultW() const
  {
    return "12:59:59";
  }

  int Mentor::getX() const
  {
    return x;
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
Mentor::~Mentor()
  {}

