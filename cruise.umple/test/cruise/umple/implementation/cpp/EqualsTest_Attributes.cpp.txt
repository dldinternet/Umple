/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

namespace example{
import java.util.*;

public class Student
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Student Attributes
  private int intId;
  private double doubleId;
  private boolean booleanId;
  private string stringId;
  private List<string> stringListIds;

  //Helper Variables
  private int cachedHashCode;
  private boolean canSetIntId;
  private boolean canSetDoubleId;
  private boolean canSetBooleanId;
  private boolean canSetstringId;
  private boolean canSetstringListIds;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public Student(int aIntId, double aDoubleId, boolean aBooleanId, string astringId)
  {
    intId = aIntId;
    doubleId = aDoubleId;
    booleanId = aBooleanId;
    stringId = astringId;
    stringListIds = new ArrayList<string>();
    cachedHashCode = -1;
    canSetIntId = true;
    canSetDoubleId = true;
    canSetBooleanId = true;
    canSetstringId = true;
    canSetstringListIds = true;
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setIntId(int aIntId)
  {
    boolean wasSet = false;
    if (!canSetIntId) { return false; }
    intId = aIntId;
    wasSet = true;
    return wasSet;
  }

  public boolean setDoubleId(double aDoubleId)
  {
    boolean wasSet = false;
    if (!canSetDoubleId) { return false; }
    doubleId = aDoubleId;
    wasSet = true;
    return wasSet;
  }

  public boolean setBooleanId(boolean aBooleanId)
  {
    boolean wasSet = false;
    if (!canSetBooleanId) { return false; }
    booleanId = aBooleanId;
    wasSet = true;
    return wasSet;
  }

  public boolean setstringId(string astringId)
  {
    boolean wasSet = false;
    if (!canSetstringId) { return false; }
    stringId = astringId;
    wasSet = true;
    return wasSet;
  }

  public boolean addstringListId(string astringListId)
  {
    boolean wasAdded = false;
    if (!canSetstringListIds) { return false; }
    wasAdded = stringListIds.add(astringListId);
    return wasAdded;
  }

  public boolean removestringListId(string astringListId)
  {
    boolean wasRemoved = false;
    if (!canSetstringListIds) { return false; }
    wasRemoved = stringListIds.remove(astringListId);
    return wasRemoved;
  }

  public int getIntId()
  {
    return intId;
  }

  public double getDoubleId()
  {
    return doubleId;
  }

  public boolean getBooleanId()
  {
    return booleanId;
  }

  public string getstringId()
  {
    return stringId;
  }

  public string getstringListId(int index)
  {
    string astringListId = stringListIds.get(index);
    return astringListId;
  }

  public string[] getstringListIds()
  {
    string[] newstringListIds = stringListIds.toArray(new string[stringListIds.size()]);
    return newstringListIds;
  }

  public int numberOfstringListIds()
  {
    int number = stringListIds.size();
    return number;
  }

  public boolean hasstringListIds()
  {
    boolean has = stringListIds.size() > 0;
    return has;
  }

  public int indexOfstringListId(string astringListId)
  {
    int index = stringListIds.indexOf(astringListId);
    return index;
  }

  public boolean equals(Object obj)
  {
    if (obj == null) { return false; }
    if (!getClass().equals(obj.getClass())) { return false; }

    Student compareTo = (Student)obj;
  
    if (intId != compareTo.intId)
    {
      return false;
    }

    if (doubleId != compareTo.doubleId)
    {
      return false;
    }

    if (booleanId != compareTo.booleanId)
    {
      return false;
    }

    if (stringId == null && compareTo.stringId != null)
    {
      return false;
    }
    else if (stringId != null && !stringId.equals(compareTo.stringId))
    {
      return false;
    }

    if (stringListIds.size() != compareTo.stringListIds.size())
    {
      return false;
    }

    for (int i=0; i<stringListIds.size(); i++)
    {
      string me = stringListIds.get(i);
      string them = compareTo.stringListIds.get(i);
      if (me == null && them != null)
      {
       return false;
      }
      else if (me != null && !me.equals(them))
      {
        return false;
      }
    }

    return true;
  }

  public int hashCode()
  {
    if (cachedHashCode != -1)
    {
      return cachedHashCode;
    }
    cachedHashCode = 17;
    cachedHashCode = cachedHashCode * 23 + intId;

    cachedHashCode = cachedHashCode * 23 + (new Double(doubleId)).hashCode();

    cachedHashCode = cachedHashCode * 23 + (booleanId ? 1 : 0);

    if (stringId != null)
    {
      cachedHashCode = cachedHashCode * 23 + stringId.hashCode();
    }
    else
    {
      cachedHashCode = cachedHashCode * 23;
    }

    if (stringListIds != null)
    {
      cachedHashCode = cachedHashCode * 23 + stringListIds.hashCode();
    }
    else
    {
      cachedHashCode = cachedHashCode * 23;
    }

    canSetIntId = false;
    canSetDoubleId = false;
    canSetBooleanId = false;
    canSetstringId = false;
    canSetstringListIds = false;
    return cachedHashCode;
  }

  public void delete()
  {}

}
