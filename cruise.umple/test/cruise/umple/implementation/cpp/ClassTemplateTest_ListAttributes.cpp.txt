/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

#include "Token.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 Token::Token()
  {
		
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 Token::Token(const Token & token)
  {
    this->positions = token.positions;
  }
  	
  //------------------------
  // Operator =
  //------------------------

 Token Token::operator=(const Token & token)
  {
    this->positions = token.positions;
  }

  //------------------------
  // INTERFACE
  //------------------------

  bool Token::addPosition(const Position & aPosition)
  {
    bool wasAdded = false;
    wasAdded = positions.add(aPosition);
    return wasAdded;
  }

  bool Token::removePosition(Position & aPosition)
  {
    bool wasRemoved = false;
    wasRemoved = positions.remove(aPosition);
    return wasRemoved;
  }

  Position Token::getPosition(int index)
  {
    Position aPosition = positions.get(index);
    return aPosition;
  }

  Position[] Token::getPositions()
  {
    Position[] newPositions = positions.toArray(new Position[positions.size()]);
    return newPositions;
  }

  int Token::numberOfPositions()
  {
    int number = positions.size();
    return number;
  }

  bool Token::hasPositions()
  {
    bool has = positions.size() > 0;
    return has;
  }

  int Token::indexOfPosition(Position* aPosition)
  {
    int index = find(positions.begin(), positions.end(), aPosition) - positions.begin();
    return index;
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
Token::~Token()
  {}
