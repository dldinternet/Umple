/* EXPERIMENTAL CODE - NON COMPILEABLE VERSION OF C++ */
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

#include "Foo.h"

	
  //------------------------
  // CONSTRUCTOR
  //------------------------
  
 Foo::Foo(const string & aTestAttribute1, const string & aTestAttribute2, const string & aTestAttribute3, const string & aTestAttribute4)
  {
    testAttribute1 = aTestAttribute1;
    testAttribute2 = aTestAttribute2;
    testAttribute3 = aTestAttribute3;
    testAttribute4 = aTestAttribute4;
  }
  
  //------------------------
  // COPY CONSTRUCTOR
  //------------------------

 Foo::Foo(const Foo & foo)
  {
    this->testAttribute1 = foo.testAttribute1;
    this->testAttribute2 = foo.testAttribute2;
    this->testAttribute3 = foo.testAttribute3;
    this->testAttribute4 = foo.testAttribute4;
  }
  	
  //------------------------
  // Operator =
  //------------------------

 Foo Foo::operator=(const Foo & foo)
  {
    this->testAttribute1 = foo.testAttribute1;
    this->testAttribute2 = foo.testAttribute2;
    this->testAttribute3 = foo.testAttribute3;
    this->testAttribute4 = foo.testAttribute4;
  }

  //------------------------
  // INTERFACE
  //------------------------

  bool Foo::setTestAttribute1(const string & aTestAttribute1)
  {
    bool wasSet = false;
    testAttribute1 = aTestAttribute1;
    wasSet = true;
    return wasSet;
  }

  bool Foo::setTestAttribute2(const string & aTestAttribute2)
  {
    bool wasSet = false;
    testAttribute2 = aTestAttribute2;
    wasSet = true;
    return wasSet;
  }

  bool Foo::setTestAttribute3(const string & aTestAttribute3)
  {
    bool wasSet = false;
    testAttribute3 = aTestAttribute3;
    wasSet = true;
    return wasSet;
  }

  bool Foo::setTestAttribute4(const string & aTestAttribute4)
  {
    bool wasSet = false;
    testAttribute4 = aTestAttribute4;
    wasSet = true;
    return wasSet;
  }

  string Foo::getTestAttribute1() const
  {
    return testAttribute1;
  }

  string Foo::getTestAttribute2() const
  {
    return testAttribute2;
  }

  string Foo::getTestAttribute3() const
  {
    return testAttribute3;
  }

  string Foo::getTestAttribute4() const
  {
    return testAttribute4;
  }

  
  //------------------------
  // DESTRUCTOR
  //------------------------
  
Foo::~Foo()
  {}
