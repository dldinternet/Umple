/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

package example;

public class MySubordinate
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //MySubordinate Attributes
  private String number;

  //MySubordinate Associations
  private MyDriver myDriver;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public MySubordinate(String aNumber, MyDriver aMyDriver)
  {
    number = aNumber;
    boolean didAddMyDriver = setMyDriver(aMyDriver);
    if (!didAddMyDriver)
    {
      throw new RuntimeException("Unable to create mySubordinate due to myDriver");
    }
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setNumber(String aNumber)
  {
    boolean wasSet = false;
    number = aNumber;
    wasSet = true;
    return wasSet;
  }

  public String getNumber()
  {
    return number;
  }

  public MyDriver getMyDriver()
  {
    return myDriver;
  }

  public boolean setMyDriver(MyDriver newMyDriver)
  {
    boolean wasSet = false;
    if (newMyDriver == null)
    {
      //Unable to setMyDriver to null, as mySubordinate must always be associated to a myDriver
      return wasSet;
    }
    
    MySubordinate existingMySubordinate = newMyDriver.getMySubordinate();
    if (existingMySubordinate != null && !equals(existingMySubordinate))
    {
      //Unable to setMyDriver, the current myDriver already has a mySubordinate, which would be orphaned if it were re-assigned
      return wasSet;
    }
    
    MyDriver oldMyDriver = myDriver;
    myDriver = newMyDriver;
    myDriver.setMySubordinate(this);

    if (oldMyDriver != null)
    {
      oldMyDriver.setMySubordinate(null);
    }
    wasSet = true;
    return wasSet;
  }

  public void delete()
  {
    MyDriver existingMyDriver = myDriver;
    myDriver = null;
    if (existingMyDriver != null)
    {
      existingMyDriver.setMySubordinate(null);
    }
  }


  public String toString()
  {
	  String outputString = "";
	  
    return super.toString() + "["+
            "number" + ":" + getNumber()+ "]" + System.getProperties().getProperty("line.separator") +
            "  " + "myDriver" + "=" + getMyDriver() != null ? !getMyDriver() .equals(this)  ? getMyDriver().toString().replaceAll("  ","    ") : "this" : "null"
     + outputString;
  }
}