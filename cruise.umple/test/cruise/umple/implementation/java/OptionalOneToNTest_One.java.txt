/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

package example;
import java.util.*;

public class Mentor
{
  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
  public @interface umplesourcefile{int line();String file();int javaline();int length();}

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //Mentor Attributes
  private String name;

  //Mentor Associations
  private List<Student> students;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public Mentor(String aName, Student... allStudents)
  {
    name = aName;
    students = new ArrayList<Student>();
    boolean didAddStudents = setStudents(allStudents);
    if (!didAddStudents)
    {
      throw new RuntimeException("Unable to create Mentor, must have 3 students");
    }
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setName(String aName)
  {
    boolean wasSet = false;
    name = aName;
    wasSet = true;
    return wasSet;
  }

  public String getName()
  {
    return name;
  }

  public Student getStudent(int index)
  {
    Student aStudent = students.get(index);
    return aStudent;
  }

  public List<Student> getStudents()
  {
    List<Student> newStudents = Collections.unmodifiableList(students);
    return newStudents;
  }

  public int numberOfStudents()
  {
    int number = students.size();
    return number;
  }

  public boolean hasStudents()
  {
    boolean has = students.size() > 0;
    return has;
  }

  public int indexOfStudent(Student aStudent)
  {
    int index = students.indexOf(aStudent);
    return index;
  }

  public static int requiredNumberOfStudents()
  {
    return 3;
  }

  public static int minimumNumberOfStudents()
  {
    return 3;
  }

  public static int maximumNumberOfStudents()
  {
    return 3;
  }

  public boolean setStudents(Student... newStudents)
  {
    boolean wasSet = false;
    ArrayList<Student> checkNewStudents = new ArrayList<Student>();
    for (Student newStudent : newStudents)
    {
      if (checkNewStudents.contains(newStudent))
      {
        return wasSet;
      }
      else if (newStudent.getMentor() != null && !this.equals(newStudent.getMentor()))
      {
        return wasSet;
      }
      checkNewStudents.add(newStudent);
    }

    if (checkNewStudents.size() != minimumNumberOfStudents())
    {
      return wasSet;
    }

    students.removeAll(checkNewStudents);
    
    for (Student orphan : students)
    {
      setMentor(orphan, null);
    }
    students.clear();
    for (Student newStudent : newStudents)
    {
      setMentor(newStudent, this);
      students.add(newStudent);
    }
    wasSet = true;
    return wasSet;
  }

  private void setMentor(Student aStudent, Mentor aMentor)
  {
    try
    {
      java.lang.reflect.Field mentorField = aStudent.getClass().getDeclaredField("mentor");
      mentorField.setAccessible(true);
      mentorField.set(aStudent, aMentor);
    }
    catch (Exception e)
    {
      throw new RuntimeException("Issue internally setting aMentor to aStudent", e);
    }
  }

  public void delete()
  {
    for(Student aStudent : students)
    {
      setMentor(aStudent,null);
    }
    students.clear();
  }


  public String toString()
  {
	  String outputString = "";
	  
    return super.toString() + "["+
            "name" + ":" + getName()+ "]"
     + outputString;
  }
}