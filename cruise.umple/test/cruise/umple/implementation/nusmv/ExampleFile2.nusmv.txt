-- This file is generated from ExampleFile2.ump --

MODULE LockState
  
  VAR 
    state : { BothDoorsClosedLockFull , OpeningUpperGate , UpperGateOpen , ClosingUpperGate , LoweringWater , BothDoorsClosedLockEmpty , OpeningLowerGate , LowerGateOpen , ClosingLowerGate , RaisingWater }; 
    event : { boatRequestsToEnterAndGoDown , boatRequestsToEnterAndGoUp , upperGateFullyOpen , boatInLockRequestingToGoDown , after3minutes , upperGateFullyClosed , waterLevelMatchesDownStream , lowerGateFullyOpen , boatInLockRequestingToGoUp , lowerGateFullyClosed , waterLevelMatchesUpStream };  
    
  ASSIGN
    init(state) := BothDoorsClosedLockFull;   
     
  TRANS
    (state = BothDoorsClosedLockFull) -> (
        (event = boatRequestsToEnterAndGoDown & next(state) = OpeningUpperGate)  |
        (event = boatRequestsToEnterAndGoUp & next(state) = LoweringWater)  ) &
    (state = UpperGateOpen) -> (
        (event = boatInLockRequestingToGoDown & next(state) = ClosingUpperGate)  |
        (event = after3minutes & next(state) = ClosingUpperGate)  ) &
    (state = ClosingUpperGate) -> (
        (event = upperGateFullyClosed & next(state) = LoweringWater)  |
        (event = upperGateFullyClosed & next(state) = BothDoorsClosedLockFull)  ) &
    (state = BothDoorsClosedLockEmpty) -> (
        (event = boatRequestsToEnterAndGoUp & next(state) = OpeningLowerGate)  |
        (event = boatRequestsToEnterAndGoDown & next(state) = RaisingWater)  ) &
    (state = LowerGateOpen) -> (
        (event = boatInLockRequestingToGoUp & next(state) = ClosingLowerGate)  |
        (event = after3minutes & next(state) = ClosingLowerGate)  ) &
    (state = ClosingLowerGate) -> (
        (event = lowerGateFullyClosed & next(state) = RaisingWater)  |
        (event = lowerGateFullyClosed & next(state) = BothDoorsClosedLockEmpty)  ) &
    (state = OpeningUpperGate) -> (
        event = upperGateFullyOpen & next(state) = UpperGateOpen) &
    (state = LoweringWater) -> (
        event = waterLevelMatchesDownStream & next(state) = OpeningLowerGate) &
    (state = OpeningLowerGate) -> (
        event = lowerGateFullyOpen & next(state) = LowerGateOpen) &
    (state = RaisingWater) -> (
        event = waterLevelMatchesUpStream & next(state) = OpeningUpperGate)