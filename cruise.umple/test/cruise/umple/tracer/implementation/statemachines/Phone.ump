namespace example;

// The class representing the telephone system
class PhoneSystemSimulation {
  singleton;
  lazy PhoneLine line1 = new PhoneLine("line1");
  lazy PhoneLine line2 = new PhoneLine("line2");
  static PhoneSystemSimulation s;
  
  
  
  public static void main(String [ ] args) {
    s = getInstance();
    
    while(true) {
    
      // To Do - randomly choose who initiates
    
    
      // Initate a call
      s.line1.startDialing();
      s.line1.pause(200);
      s.line1.setOtherParty(s.line2);
      s.line1.completeNumber();
        s.line1.p(); s.line2.p(); // Will be done by tracing associations

      // The other party can choose whether to pick up or not.
      if(Math.random() > 0.5) {
        s.line2.pickUp();
      
        // While talking either party can hang up
        if(Math.random() > 0.5) {
          s.line1.hangUp();
          s.line2.hangUp(); // assuming it doesn't forget
        }
        else {
          s.line2.hangUp();
          s.line1.hangUp(); // assuming it doesn't forget
        }
      }
      else {
        // Hang up while waiting and the other will too
        s.line1.hangUp();
      }
    }
  }
}  

class PhoneLine {
  depend java.io.IOException;

  id;
  0..1 self otherParty;
  trace state record id, otherParty;
  
  state {
    onHook {
      entry / {
        if(getOtherParty() != null) {
          getOtherParty().otherPartyHangUp();
        } 
        setOtherParty(null); p();
      }
      startDialing -> dialing;
      incomingCall -> ringing;
    }
    ringing {
      entry / {say("ring ring ring!");} 
      pickUp -> / {getOtherParty().otherPartyPickUp();} communicating;
      otherPartyHangUp -> onHook;
    }
    communicating {
      entry / {say("Hello "+getOtherParty().getId());}
      hangUp -> / {say("click");} onHook;
      otherPartyHangUp -> waitForHook;
      putOnHold -> onHold;
    }
    onHold {
      hangUp -> / {say("click");} onHook;
      otherPartyHangUp -> waitForHook;
      takeOffHold -> communicating;
    }
    dialing {
      entry / {say("pat pat pat");} 
      completeNumber -> waitingForConnection;
      hangUp -> / {say("click");} onHook;
    }
    waitingForConnection {
      entry / {getOtherParty().incomingCall();}
      otherPartyPickUp -> communicating;
      hangUp -> / {say("click");} onHook;
      timeOut -> onHook;
    }
    waitForHook {
      entry / {say("OOO OOO OOO");}
      hangUp -> / {say("click");} onHook;
    }
  }
  
  String toString() {
    return getId();
  }
  
  void p() {
    System.out.println("  other party of "+getId()+"="+getOtherParty());
  }
  
  void say(String s) {
    String voice ="";
    if(getId().equals("line2")) voice=" -v Victoria";
    try {
      Runtime.getRuntime().exec("say "+getId()+" "+s+voice);
    }
    catch (IOException e) {}
    pause(2000);
  }
  
  void pause(long ms) {
    try {
      Thread.currentThread().sleep(ms);//sleep for 1000 ms
    }
    catch(InterruptedException ie){
    }
  }
}
