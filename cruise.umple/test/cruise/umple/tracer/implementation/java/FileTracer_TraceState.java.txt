/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

package example;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Date;


public class GarageDoor
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //GarageDoor State Machines
  enum Status { Open, Closing, Closed, Opening, HalfOpen }
  private Status status;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public GarageDoor()
  {
    setStatus(Status.Open);
  }

  //------------------------
  // INTERFACE
  //------------------------

  public String getStatusFullName()
  {
    String answer = status.toString();
    return answer;
  }

  public Status getStatus()
  {
    return status;
  }

  public boolean buttonOrObstacle()
  {
    boolean wasEventProcessed = false;
    
    Status aStatus = status;
    fileTracer("Event=buttonOrObstacle");
    switch (aStatus)
    {
      case Open:
        setStatus(Status.Closing);
        wasEventProcessed = true;
        break;
      case Closing:
        setStatus(Status.Opening);
        wasEventProcessed = true;
        break;
      case Closed:
        setStatus(Status.Opening);
        wasEventProcessed = true;
        break;
      case Opening:
        setStatus(Status.HalfOpen);
        wasEventProcessed = true;
        break;
      case HalfOpen:
        setStatus(Status.Opening);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  public boolean reachBottom()
  {
    boolean wasEventProcessed = false;
    
    Status aStatus = status;
    fileTracer("Event=reachBottom");
    switch (aStatus)
    {
      case Closing:
        setStatus(Status.Closed);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  public boolean reachTop()
  {
    boolean wasEventProcessed = false;
    
    Status aStatus = status;
    fileTracer("Event=reachTop");
    switch (aStatus)
    {
      case Opening:
        setStatus(Status.Open);
        wasEventProcessed = true;
        break;
    }

    return wasEventProcessed;
  }

  private void setStatus(Status aStatus)
  {
    fileTracer("status"+status);
    status = aStatus;
    fileTracer("status"+status);
  }

  public void delete()
  {}

  //------------------------
  // FILE TRACER METHOD
  //------------------------

  static void fileTracer(Object obj)
  {
    FileOutputStream fout = null;
    Date date = new Date();
    try
    {
      // Open an output stream
      fout = new FileOutputStream ("TraceLog.txt",true);
    }
    catch (IOException e)
    {
      System.err.println ("Unable to write to file");
      System.exit(-1);
    }
    // Write traced Item information
    new PrintStream(fout).println(obj);
    try
    {
      // Close output stream
      fout.close();
    }
    catch (IOException e)
    {
      e.printStackTrace();
    }
  }  static void fileTracer(Object obj)
  {
    FileOutputStream fout = null;
    Date date = new Date();
    try
    {
      // Open an output stream
      fout = new FileOutputStream ("TraceLog.txt",true);
    }
    catch (IOException e)
    {
      System.err.println ("Unable to write to file");
      System.exit(-1);
    }
    // Write traced Item information
    new PrintStream(fout).println(obj);
    try
    {
      // Close output stream
      fout.close();
    }
    catch (IOException e)
    {
      e.printStackTrace();
    }
  }

}
