namespace cruise.umple.validator;

class JavaCodeGenValidator {

	depend org.eclipse.jdt.core.compiler.IProblem;
	depend org.eclipse.jdt.core.dom.AST;
	depend org.eclipse.jdt.core.dom.ASTParser;
	depend org.eclipse.jdt.core.dom.CompilationUnit;
	depend cruise.umple.compiler.UmpleClass;
	depend java.util.Map;
	depend org.eclipse.jdt.core.JavaCore;
	depend cruise.umple.compiler.UmpleFile;
	depend cruise.umple.compiler.UmpleModel;
	depend cruise.umple.compiler.java.JavaClassGenerator;

	isA CodeGenValidator;

	internal JavaClassGenerator generator = new JavaClassGenerator();
	final String separator = System.getProperty("line.separator");
	
	@Override
	public  boolean validateGeneratedCode(UmpleFile uFile) {
       	boolean isValid = true;
	    UmpleModel model = new UmpleModel(uFile);
	    try{
	     System.out.print(separator);
	   	 System.out.print("Running Umple model. ");
		    model.run();
		 }
	     catch (Exception e1)
	     {
	       System.err.println(e1.getMessage());
	     }
	     
	for (UmpleClass uClass : model.getUmpleClasses()){
	    	String code = generator.getCode(model,uClass);
	    	System.out.print(separator);
	    	System.out.print("Parsing generated code for class" +uClass.getName());
	    	CompilationUnit unit = parse(code);
	    	IProblem[] problems = unit.getProblems();
	    	if( problems == null || problems.length > 0){
			for (IProblem problem : problems ){
				System.out.print(getOutputString(problem));	
			}
			return false;
			}
	    }
	    return isValid;
	}

	public String getOutputString(IProblem problem){
		StringBuffer outMessage = new StringBuffer();
		outMessage.append(separator);
		outMessage.append("Error in generated code");
		outMessage.append(separator);
		outMessage.append("ID: " + problem.getID() );
		outMessage.append(separator);
		outMessage.append("Line number: " +problem.getSourceLineNumber());
		outMessage.append(separator);
		outMessage.append("Message:" + problem.getMessage());
		outMessage.append(separator);
		outMessage.append("-----------------------");
		return 	outMessage.toString();
	}

	protected static CompilationUnit parse(String source) {
		ASTParser parser = ASTParser.newParser(AST.JLS4); 
		parser.setKind(ASTParser.K_COMPILATION_UNIT);
		parser.setSource(source.toCharArray()); // set source
	    // In order to parse 1.7 code, some compiler options need to be set to 1.7
	    // Annotations were not available prior 1.6
		Map<?, ?> options = JavaCore.getOptions();
		JavaCore.setComplianceOptions(JavaCore.VERSION_1_7, options);
		parser.setCompilerOptions(options);
		parser.setResolveBindings(true); // we need bindings later on
		return (CompilationUnit) parser.createAST(null);
	}

}
