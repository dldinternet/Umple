namespace cruise.umple.validator;

class JavaCodeGenValidator {

	depend java.util.List;
	depend org.eclipse.jdt.core.compiler.IProblem;
	depend org.eclipse.jdt.core.dom.AST;
	depend org.eclipse.jdt.core.dom.ASTParser;
	depend org.eclipse.jdt.core.dom.CompilationUnit;
	depend cruise.umple.compiler.UmpleClass;
	depend cruise.umple.compiler.UmpleFile;
	depend cruise.umple.compiler.UmpleModel;
	depend cruise.umple.compiler.java.JavaClassGenerator;

	isA CodeGenValidator;

	internal JavaClassGenerator generator = new JavaClassGenerator();

	@Override
	public  boolean validateGeneratedCode(UmpleFile uFile) {
       	boolean isValid = true;
	    UmpleModel model = new UmpleModel(uFile);
	    try{
		    model.run();
		    model.generate();
		 }
	     catch (Exception e1)
	     {
	       System.err.println(e1.getMessage());
	     }
	     
	for (UmpleClass uClass : model.getUmpleClasses()){
	    	String code = generator.getCode(model,uClass);
	    	CompilationUnit unit = parse(code);
	    	IProblem[] problems = unit.getProblems();
	    	if( problems == null || problems.length > 0){
			for (IProblem problem : problems ){
				System.out.print(problem);	
			}
			return false;
			}
	    }
	    return isValid;
	}

	@Override
	public boolean validateGeneratedCode(List<UmpleFile> uFiles) {
		// TODO Auto-generated method stub
		return false;
	}

	protected static CompilationUnit parse(String source) {
		ASTParser parser = ASTParser.newParser(AST.JLS4); 
		parser.setKind(ASTParser.K_COMPILATION_UNIT);
		parser.setSource(source.toCharArray()); // set source
		parser.setResolveBindings(true); // we need bindings later on
		return (CompilationUnit) parser.createAST(null);
	}

}
