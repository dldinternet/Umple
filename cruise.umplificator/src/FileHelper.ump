namespace cruise.umplificator;

class FileHelper {

depend java.io.*;
depend java.util.Arrays;
depend java.util.List;
depend cruise.umple.compiler.UmpleModel;
depend cruise.umplificator.generator.UmpleToUmpleGenerator;
depend cruise.umple.compiler.exceptions.UmpleCompilerException;
// Logger log4j
depend org.apache.log4j.Logger;

static Logger logger = Logger.getLogger(FileHelper.class);

public static final String [] EXTENSIONS = new String [] {".java",".ump"};
public static final String separator = System.getProperty("line.separator");

 public static  List<File> getListOfFilesFromPath(String path, List<File> inputFiles){
     // Get File or a Folder from path
	  File aFile = new File(path);
	  if (!aFile.isDirectory())
	  {
		  if (aFile.isFile()){
			  int index = aFile.getName().lastIndexOf(".");
			  if (index > 0) {
				  String fileExtension = aFile.getName().substring(index);
				  if (Arrays.asList(EXTENSIONS).contains(fileExtension)){
						 inputFiles.add(aFile);
				  }
			  }
		  }
	  }
	  else {
			 for (File input: aFile.listFiles()){ 
				 getListOfFilesFromPath(input.getAbsolutePath(), inputFiles);
			 }	
	  }
	return inputFiles;
  }
  
public static String getFileExtension (File file)
{
    return file.getName().substring(file.getName().lastIndexOf("."));
}
  
  
public static void printFilesToUmplify(List<File> srcFiles){
    StringBuffer outMessage = new StringBuffer();
		outMessage.append(separator);
		outMessage.append("Files to be umplified: ");
		outMessage.append(separator);
		for (File aFile: srcFiles)
		{
			outMessage.append(aFile.getName());
			outMessage.append(separator);
		}
		outMessage.append(separator);
		outMessage.append("-----------------------");
	logger.info(outMessage.toString());
}
  
   public static  void writeFile(UmpleModel model, String outputFolder, boolean createSubdirectories, boolean testMode){
	   if (testMode==false) {
		   try
		   {
			   UmpleToUmpleGenerator generator = new UmpleToUmpleGenerator();
			   generator.setModel(model);
			   generator.generate();
			   String path="";
			   if (createSubdirectories)	{	
				   String subDirectories = (model.getDefaultNamespace() != null && model.getDefaultNamespace().length() > 0) ?model.getDefaultNamespace().replace(".", File.separator) :"";
				   path = outputFolder + File.separator + subDirectories;
			   }
			   else{ path = outputFolder + File.separator;}
			   String filename = path + model.getUmpleFile().getSimpleFileName() + EXTENSIONS[1];
			   File file = new File(path);
			   file.mkdirs();
			   BufferedWriter bw = new BufferedWriter(new FileWriter(filename));
			   bw.write(model.getCode());
			   bw.flush();
			   bw.close();
			   logger.debug("--Output--");
			   logger.debug(model.getCode());
		   }
		   catch (Exception e)
		   {
			   throw new UmpleCompilerException("There was a problem with generating UmpleSelf code." + e, e);
		   }
	   }
   }
  
  
   public static void writeMasterFile(List<String> filenames, String outputFolder){
	   StringBuffer sb =  new StringBuffer();
	   for (String s: filenames)
	   {
	   	   if (s != null){
		    sb.append("use " + s + ".ump;" );
		    sb.append(System.getProperty("line.separator"));
	   	   }
	   }
	   try
	   {
		   String path = outputFolder + File.separator;
		   File file = new File(path);
		   file.mkdirs();
		   String masterFileName =  path + "Master.ump" ;
		   BufferedWriter bw = new BufferedWriter(new FileWriter(masterFileName));
		   bw.write(sb.toString());
		   bw.flush();
		   bw.close();
	   }
	   catch (Exception e)
	   {
		   throw new UmpleCompilerException("There was a problem with generating MasterFile." + e, e);
	   }
   }
  
  
}