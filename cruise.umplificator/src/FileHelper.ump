namespace cruise.umplificator;

class FileHelper {

depend java.io.File;
depend java.util.ArrayList;
depend java.util.Arrays;
depend java.util.List;
depend cruise.umple.compiler.UmpleModel;
depend cruise.umple.compiler.UmpleSelfGenerator;

public static final String [] EXTENSIONS = new String []{".java",".ump"};
public static final String separator = System.getProperty("line.separator");

 public static  List<File> getListOfFilesFromPath(String path){
    // Get File or a Folder from path
	  List<File> inputFiles = new ArrayList<File> ();
	  File aFile = new File(path);
	  if (aFile.isDirectory())
	  {
		 for (File input: aFile.listFiles()){ 
			 String extension = input.getName().substring(input.getName().lastIndexOf("."));
			 if (Arrays.asList(EXTENSIONS).contains(extension)){
				 inputFiles.add(input);
			 }
		 }	
	  }
	  else if (aFile.isFile()){
		 String extension = aFile.getName().substring(aFile.getName().lastIndexOf("."));
		 if (Arrays.asList(EXTENSIONS).contains(extension)){
			 inputFiles.add(aFile);
		 }
	  }
	return inputFiles;
  }
  
  
public static void printFilesToUmplify(List<File> srcFiles){
    StringBuffer outMessage = new StringBuffer();
		outMessage.append(separator);
		outMessage.append("Files to be umplified: ");
		outMessage.append(separator);
		for (File aFile: srcFiles)
		{
			outMessage.append(aFile.getName());
			outMessage.append(separator);
		}
		outMessage.append(separator);
		outMessage.append("-----------------------");
	System.out.println(outMessage.toString());
}

  public static void writeFile(UmpleModel model){
        UmpleSelfGenerator gen = new UmpleSelfGenerator();
        gen.setFileExtension(EXTENSIONS[1]);
        gen.setModel(model);
        gen.generate();
        System.out.println("--Output--");
        System.out.println(model.getCode());
  }
  
}