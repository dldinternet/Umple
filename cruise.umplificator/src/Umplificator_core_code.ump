class Umplificator {

depend java.io.File;
depend java.io.IOException;
depend java.util.List;
depend org.apache.commons.io.IOUtils;
depend cruise.umple.compiler.UmpleClass;
depend cruise.umple.compiler.UmpleFile;
depend cruise.umple.compiler.UmpleModel;
depend cruise.umplificator.FileHelper;
depend cruise.umplificator.parser.JavaParser;
depend cruise.umplificator.rules.RuleRunner;
depend cruise.umplificator.rules.RuleService;
depend cruise.umplificator.visitor.JavaClassVisitor;

lazy UmpleModel outputModel;

public boolean umplify(List<File> srcFiles) {
    FileHelper.printFilesToUmplify(srcFiles);
    for (File aFile : srcFiles){
    	 umplifyElement(aFile);
    }
    return true;
}

public boolean umplifyElement(File file)
{
		try {
			// GetContent from file
			// Parse File
			// The visitor is automatically assigned to the Parser
 		   	JavaParser javaParser =new JavaParser(new JavaClassVisitor());
		    String content =  IOUtils.toString(file.toURI());;
		    System.out.println("---Input---");
       		System.out.println(content);
		    javaParser.parseUnit(content);
			// initialize drools engine
		    RuleRunner ruleRunner = new RuleRunner();
		    RuleService ruleService = new RuleService (ruleRunner);
			ruleService.startRuleEngine();
			// Insert Elements in Working Memory
			String compilationUnitName= javaParser.getJavaVisitor().getName();
			UmpleClass uClass = new UmpleClass(compilationUnitName);
			ruleRunner.insertUmpleClass(uClass);
			ruleRunner.insertJavaElements(javaParser.getJavaVisitor());
			ruleRunner.fireAllRules();
			// generate Umple Code
			UmpleFile umpleFile = new UmpleFile(file);
			outputModel = new UmpleModel(umpleFile);
			outputModel.addUmpleClass(uClass);
			// generate Umple Code
			FileHelper.writeFile(outputModel);
		} catch (IOException e) {
			e.printStackTrace();
			System.err.print(e.getLocalizedMessage());
			return false;
		} 
	  return true;
  }

}