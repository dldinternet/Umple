namespace cruise.umplificator.rules;

class RuleService{

depend java.io.*;
depend org.kie.api.runtime.KieSession;

RuleRunner runner;
  
public KieSession startRuleEngine(){
    try {
		runner.addRuleFile("rules", "Rules_Fields.drl");
		return runner.buildKnowledgeSession();
	} catch (FileNotFoundException e) {
		e.printStackTrace();
		return null;
	} catch (IOException ex) {
		ex.printStackTrace();
		return null;
	}
 }
}

class RuleRunner
{
depend org.kie.api.KieServices;
depend org.kie.api.builder.KieBuilder;
depend org.kie.api.builder.KieFileSystem;
depend org.kie.api.builder.KieRepository;
depend org.kie.api.builder.Message.Level;
depend org.kie.api.io.KieResources;
depend org.kie.api.io.Resource;
depend org.kie.api.runtime.KieContainer;
depend org.kie.api.runtime.KieSession;
depend java.io.*;
depend cruise.umplificator.visitor.JavaClassVisitor;
depend cruise.umple.compiler.UmpleClass;
depend org.eclipse.jdt.core.dom.FieldDeclaration;
depend org.eclipse.jdt.core.dom.ImportDeclaration;
depend org.eclipse.jdt.core.dom.MethodDeclaration;
depend org.apache.commons.io.IOUtils;

     KieServices kieServices;
     KieContainer kieContainer;
     KieSession kieSession;
     KieResources kieResources;
     KieFileSystem kieFileSystem;
     KieRepository kieRepository;

    public RuleRunner()
    {
        this.kieServices = KieServices.Factory.get();
        this.kieResources = kieServices.getResources();
        this.kieFileSystem = kieServices.newKieFileSystem();
        this.kieRepository = kieServices.getRepository();
    }


    public void addRuleFile(String packagename, String rulefile) throws FileNotFoundException, IOException{
	  	   System.out.println("--- Adding rule files ---");
		   Resource resource = kieResources.newClassPathResource(rulefile, "UTF-8");
           kieFileSystem.write("src/main/resources/"+packagename+"/"+rulefile, resource);
           System.out.print(IOUtils.toString(resource.getInputStream()));
    }


    public KieSession buildKnowledgeSession()
    {
        KieBuilder kb = kieServices.newKieBuilder(kieFileSystem);

        kb.buildAll();

        if (kb.getResults().hasMessages(Level.ERROR))
        {
            throw new RuntimeException("Build Errors:\n" + kb.getResults().toString());
        }

        kieContainer = kieServices.newKieContainer(kieRepository.getDefaultReleaseId());

        kieSession = this.kieContainer.newKieSession();

        return kieSession;
    } 
    
    public KieSession insertJavaElements(JavaClassVisitor visitor){
	   for (ImportDeclaration importDecl : visitor.getImportDeclarations())
	   {
		   kieSession.insert(importDecl); 
	   }
	   for (MethodDeclaration methodDecl : visitor.getMethodDeclarations())
	   {
		   kieSession.insert(methodDecl); 
	   }
	   for (FieldDeclaration fieldDeclaration : visitor.getFieldDeclarations())
	   {
		   kieSession.insert(fieldDeclaration); 
	   }
	  return kieSession;
    }
  
 	public KieSession insertUmpleClass(UmpleClass uClass){
	  kieSession.insert(uClass);
	  return kieSession;
  	}  
    
    public KieSession fireAllRules()
    {
        kieSession.fireAllRules();

        return kieSession;
    }

    public void dispose()
    {
        this.kieSession.dispose();
    } 
}
  external KieServices  {}
  external KieContainer {}
  external KieSession {}
  external KieResources {}
  external KieFileSystem {}
  external KieRepository {}