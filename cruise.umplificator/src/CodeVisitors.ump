namespace cruise.umplificator.visitor;

class JavaClassVisitor {

static Logger logger = Logger.getLogger(JavaClassVisitor.class);

 isA ASTVisitor;
 
 depend cruise.umplificator.StringHelper;
 depend org.eclipse.jdt.core.dom.ASTVisitor;
 depend org.eclipse.jdt.core.dom.TypeDeclaration;
 depend org.eclipse.jdt.core.dom.ImportDeclaration;
 depend org.eclipse.jdt.core.dom.MethodDeclaration;
 depend org.eclipse.jdt.core.dom.FieldDeclaration;
 depend org.eclipse.jdt.core.dom.PackageDeclaration;
 
 depend org.apache.log4j.Logger;

 ImportDeclaration [] importDeclarations;
 MethodDeclaration [] methodDeclarations;
 FieldDeclaration [] fieldDeclarations;
 lazy PackageDeclaration packageDeclaration;
 lazy String name;
 lazy String classBody;

  @Override
  public boolean visit(ImportDeclaration node) {
    logger.debug("Visiting ImportDeclarations");
    importDeclarations.add(node);
    return super.visit(node);
  }
  
  @Override
  public boolean visit(FieldDeclaration node) {
    logger.debug("Visiting FieldDeclarations");
    fieldDeclarations.add(node);
    return super.visit(node);
  }
  
  @Override
  public boolean visit(MethodDeclaration node) {
    logger.debug("Visiting MethodDeclarations");
    methodDeclarations.add(node);
    return super.visit(node);
  }
  
  @Override
  public boolean visit(TypeDeclaration node) {
    // Main node to visit
    logger.debug("Visiting TypeDeclarations");
    name = node.getName().getFullyQualifiedName();
    String typeDeclarationCode = node.toString();
    classBody = StringHelper.getClassBody(typeDeclarationCode);
    return true; 
  }
  
  @Override
  public boolean visit (PackageDeclaration node) 
  {
    logger.debug("Visiting PackageDeclaration");
    packageDeclaration = node;
    return super.visit(node);
  }

}
 external PackageDeclaration {}
 external FieldDeclaration {}
 external MethodDeclaration {}
 external ImportDeclaration {}
 external ASTVisitor {}