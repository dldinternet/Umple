package cruise.umplificator.rules

import org.eclipse.jdt.core.dom.*;
import cruise.umple.compiler.*;
import java.util.*;

rule "TOP_isJavaClass"
	when
		typeDeclaration: TypeDeclaration(!typeDeclaration.isInterface())
		uElement: UmpleElement(typeDeclaration.getName().getIdentifier().equals(uElement.getName()))
	then
		System.out.print(uElement.getName());
		UmpleClass uClass = new UmpleClass(uElement.getName());
		insertLogical(uClass);
end

rule "TOP_isJavaInterface"
	when
		typeDeclaration: TypeDeclaration(typeDeclaration.isInterface())
		uElement: UmpleElement(typeDeclaration.getName().getIdentifier().equals(uElement.getName()))
	then
		System.out.print(uElement.getName());
		UmpleInterface uInterface = new UmpleInterface(uElement.getName());
		insertLogical(uInterface);
end

rule "transform_ImportDeclaration"
	when
		importDeclaration: ImportDeclaration()
		uClass: UmpleClass()
	then
		Depend depend = new Depend(getImportName(importDeclaration));
		uClass.addDepend(depend);
end

rule "transform_ImportDeclaration_UInterface"
	when
		importDeclaration: ImportDeclaration()
		uInterface: UmpleInterface()
	then
		Depend depend = new Depend(getImportName(importDeclaration));
		uInterface.addDepend(depend);
end

rule "transform_InheritanceDeclaration_Interfaces"
	when
		typeDeclaration : TypeDeclaration(typeDeclaration.superInterfaceTypes().size() > 0)
		uClass: UmpleClass(typeDeclaration.getName().getIdentifier().equals(uClass.getName()))
	then
		List<String> parentInterfaces = getImplementedInterfaces(typeDeclaration);
	 	for (String interfaceName : parentInterfaces)
		{
			UmpleInterface aInterface = new UmpleInterface(interfaceName);
		    System.out.println(interfaceName);
			uClass.addParentInterface(aInterface);
		}
end

rule "transform_InheritanceDeclaration_Interfaces_UInterface"
	when
		typeDeclaration : TypeDeclaration(typeDeclaration.superInterfaceTypes().size() > 0)
		uInterface: UmpleInterface(typeDeclaration.getName().getIdentifier().equals(uInterface.getName()))
	then
		List<String> parentInterfaces = getImplementedInterfaces(typeDeclaration);
	 	for (String interfaceName : parentInterfaces)
		{
			UmpleInterface aInterface = new UmpleInterface(interfaceName);
		    System.out.println(interfaceName);
			uInterface.addExtendsInterface(aInterface);
		}
end

rule "transform_InheritanceDeclaration_SuperClasses"
	when
		typeDeclaration : TypeDeclaration(typeDeclaration.getSuperclassType() != null)
		uClass: UmpleClass(typeDeclaration.getName().getIdentifier().equals(uClass.getName()))
	then
		UmpleClass superClass = new UmpleClass(getSuperClassName(typeDeclaration));
		uClass.setExtendsClass(superClass);
end

rule "transform_Namespace"
	when
		packageDeclaration: PackageDeclaration()
		uClass: UmpleClass()
	then
		uClass.addNamespace(packageDeclaration.getName().getFullyQualifiedName());
end


rule "transform_Namespace_UInterface"
	when
		packageDeclaration: PackageDeclaration()
		uClass: UmpleClass()
	then
		uClass.addNamespace(packageDeclaration.getName().getFullyQualifiedName());
end

//http://svn.apache.org/repos/asf/geronimo/devtools/j2g/trunk/plugins/org.apache.geronimo.devtools.j2g.sources/src/org/apache/geronimo/devtools/j2g/sources/dependence/NodesVisitor.java
function String getImportName(ImportDeclaration importDeclaration){
	StringBuilder importName =  new StringBuilder();
	importName.append(importDeclaration.getName().getFullyQualifiedName());
	if (importDeclaration.isOnDemand()) { 
		importName.append(".*"); 
	}else { 
		importName.append("");
	}
	return importName.toString();
}

function String getSuperClassName(TypeDeclaration typeDecl)
{
    Type type = typeDecl.getSuperclassType();
    String superClassname="";
	if (type != null)
	{
		if (type.isSimpleType())
		{
		SimpleType simpleType = (SimpleType) type;
		superClassname = simpleType.getName().getFullyQualifiedName();
		}
	}
	return superClassname;
}

function List<String> getImplementedInterfaces(TypeDeclaration typeDeclaration)
{
	List<String> names = new ArrayList<String>();
	List<Type> interfaceTypes = typeDeclaration.superInterfaceTypes();
	for (Type aType : interfaceTypes)
	{
		if (aType !=null && aType.isSimpleType())
		{
			SimpleType simpleType = (SimpleType) aType;
		    String interfaceName = simpleType.getName().getFullyQualifiedName();
		    names.add(interfaceName);
		}
	}
	return names;
}

