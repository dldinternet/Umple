<%@ jet package="cruise.umple.ignore" class="Ignore" %>
<%
/*
This file generates Sql attributes for a given class. Once all the attributes have been defined, it generates the Sql Primary Key for the table.
*/

  isFirst = true;
  for(Attribute av : uClass.getAttributes())
  {
    if (av.isConstant() || av.getModifier().equals("internal"))
    {
      continue;
    }
    if (isFirst)
    {
      appendln(stringBuffer, "");
      appendln(stringBuffer,"  /*{0} Attributes*/", gen.translate("type", uClass));      
      isFirst = false;
    }
     
    String type = gen.translate("type",av);
    String attribute = gen.translate("attributeOne",av);
    if (av.getIsList())
    {
      attribute = gen.translate("attributeMany",av);
      type = StringFormatter.format("List<{0}>",gen.translate("typeMany",av));
    }
    
    append(stringBuffer, "  {0} {1}", attribute, type);
    
    if (av.getIsAutounique())
    {
   	  append(stringBuffer, " AUTO_INCREMENT");
    }
    if (gen.translate("parameterValue",av).compareToIgnoreCase("null") != 0)
    {
   	  append(stringBuffer, " DEFAULT {0}", gen.translate("parameterValueQuoted",av));
    }
    /* Unique not implemented yet.
    if (av.getIsUnique())
    {
   	  append(stringBuffer, " UNIQUE");
    }
    */
        
    appendln(stringBuffer, ",");
  }
  
  
  //Primary Key Generation
  String tKey = "";
  List<Attribute> PKList = gen.resolvePrimaryKey(uClass);
  for(Attribute PK : PKList)
  {
    tKey += gen.translate("attributeOne", PK) + ", ";
  }
  //Remove trailing comma
  if (tKey.length() > 0)
  {
    tKey = tKey.substring(0, tKey.length()-2);
  }
  else
  {
    tKey = "/*No Possible Primary Key*/";
  }
  appendln(stringBuffer, "  PRIMARY KEY({0})", tKey);
%>